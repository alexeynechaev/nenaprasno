!function(e,t){"use strict";"object"==typeof module&&"object"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:this,function(e,t){"use strict";function n(e,t){t=t||ne;var n=t.createElement("script");n.text=e,t.head.appendChild(n).parentNode.removeChild(n)}function i(e){var t=!!e&&"length"in e&&e.length,n=he.type(e);return"function"!==n&&!he.isWindow(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}function o(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}function r(e,t,n){return he.isFunction(t)?he.grep(e,function(e,i){return!!t.call(e,i,e)!==n}):t.nodeType?he.grep(e,function(e){return e===t!==n}):"string"!=typeof t?he.grep(e,function(e){return ae.call(t,e)>-1!==n}):Se.test(t)?he.filter(t,e,n):(t=he.filter(t,e),he.grep(e,function(e){return ae.call(t,e)>-1!==n&&1===e.nodeType}))}function s(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}function a(e){var t={};return he.each(e.match(Me)||[],function(e,n){t[n]=!0}),t}function l(e){return e}function c(e){throw e}function d(e,t,n,i){var o;try{e&&he.isFunction(o=e.promise)?o.call(e).done(t).fail(n):e&&he.isFunction(o=e.then)?o.call(e,t,n):t.apply(void 0,[e].slice(i))}catch(e){n.apply(void 0,[e])}}function u(){ne.removeEventListener("DOMContentLoaded",u),e.removeEventListener("load",u),he.ready()}function p(){this.expando=he.expando+p.uid++}function f(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:je.test(e)?JSON.parse(e):e)}function h(e,t,n){var i;if(void 0===n&&1===e.nodeType)if(i="data-"+t.replace(He,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(i))){try{n=f(n)}catch(e){}Ne.set(e,t,n)}else n=void 0;return n}function g(e,t,n,i){var o,r=1,s=20,a=i?function(){return i.cur()}:function(){return he.css(e,t,"")},l=a(),c=n&&n[3]||(he.cssNumber[t]?"":"px"),d=(he.cssNumber[t]||"px"!==c&&+l)&&Re.exec(he.css(e,t));if(d&&d[3]!==c){c=c||d[3],n=n||[],d=+l||1;do{r=r||".5",d/=r,he.style(e,t,d+c)}while(r!==(r=a()/l)&&1!==r&&--s)}return n&&(d=+d||+l||0,o=n[1]?d+(n[1]+1)*n[2]:+n[2],i&&(i.unit=c,i.start=d,i.end=o)),o}function m(e){var t,n=e.ownerDocument,i=e.nodeName,o=Ye[i];return o||(t=n.body.appendChild(n.createElement(i)),o=he.css(t,"display"),t.parentNode.removeChild(t),"none"===o&&(o="block"),Ye[i]=o,o)}function v(e,t){for(var n,i,o=[],r=0,s=e.length;r<s;r++)i=e[r],i.style&&(n=i.style.display,t?("none"===n&&(o[r]=Ie.get(i,"display")||null,o[r]||(i.style.display="")),""===i.style.display&&We(i)&&(o[r]=m(i))):"none"!==n&&(o[r]="none",Ie.set(i,"display",n)));for(r=0;r<s;r++)null!=o[r]&&(e[r].style.display=o[r]);return e}function y(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&o(e,t)?he.merge([e],n):n}function b(e,t){for(var n=0,i=e.length;n<i;n++)Ie.set(e[n],"globalEval",!t||Ie.get(t[n],"globalEval"))}function w(e,t,n,i,o){for(var r,s,a,l,c,d,u=t.createDocumentFragment(),p=[],f=0,h=e.length;f<h;f++)if((r=e[f])||0===r)if("object"===he.type(r))he.merge(p,r.nodeType?[r]:r);else if(Ve.test(r)){for(s=s||u.appendChild(t.createElement("div")),a=(Be.exec(r)||["",""])[1].toLowerCase(),l=Ue[a]||Ue._default,s.innerHTML=l[1]+he.htmlPrefilter(r)+l[2],d=l[0];d--;)s=s.lastChild;he.merge(p,s.childNodes),s=u.firstChild,s.textContent=""}else p.push(t.createTextNode(r));for(u.textContent="",f=0;r=p[f++];)if(i&&he.inArray(r,i)>-1)o&&o.push(r);else if(c=he.contains(r.ownerDocument,r),s=y(u.appendChild(r),"script"),c&&b(s),n)for(d=0;r=s[d++];)Xe.test(r.type||"")&&n.push(r);return u}function x(){return!0}function C(){return!1}function k(){try{return ne.activeElement}catch(e){}}function S(e,t,n,i,o,r){var s,a;if("object"==typeof t){"string"!=typeof n&&(i=i||n,n=void 0);for(a in t)S(e,a,n,i,t[a],r);return e}if(null==i&&null==o?(o=n,i=n=void 0):null==o&&("string"==typeof n?(o=i,i=void 0):(o=i,i=n,n=void 0)),!1===o)o=C;else if(!o)return e;return 1===r&&(s=o,o=function(e){return he().off(e),s.apply(this,arguments)},o.guid=s.guid||(s.guid=he.guid++)),e.each(function(){he.event.add(this,t,o,i,n)})}function T(e,t){return o(e,"table")&&o(11!==t.nodeType?t:t.firstChild,"tr")?he(">tbody",e)[0]||e:e}function E(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function D(e){var t=nt.exec(e.type);return t?e.type=t[1]:e.removeAttribute("type"),e}function $(e,t){var n,i,o,r,s,a,l,c;if(1===t.nodeType){if(Ie.hasData(e)&&(r=Ie.access(e),s=Ie.set(t,r),c=r.events)){delete s.handle,s.events={};for(o in c)for(n=0,i=c[o].length;n<i;n++)he.event.add(t,o,c[o][n])}Ne.hasData(e)&&(a=Ne.access(e),l=he.extend({},a),Ne.set(t,l))}}function M(e,t){var n=t.nodeName.toLowerCase();"input"===n&&_e.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function P(e,t,i,o){t=re.apply([],t);var r,s,a,l,c,d,u=0,p=e.length,f=p-1,h=t[0],g=he.isFunction(h);if(g||p>1&&"string"==typeof h&&!fe.checkClone&&tt.test(h))return e.each(function(n){var r=e.eq(n);g&&(t[0]=h.call(this,n,r.html())),P(r,t,i,o)});if(p&&(r=w(t,e[0].ownerDocument,!1,e,o),s=r.firstChild,1===r.childNodes.length&&(r=s),s||o)){for(a=he.map(y(r,"script"),E),l=a.length;u<p;u++)c=r,u!==f&&(c=he.clone(c,!0,!0),l&&he.merge(a,y(c,"script"))),i.call(e[u],c,u);if(l)for(d=a[a.length-1].ownerDocument,he.map(a,D),u=0;u<l;u++)c=a[u],Xe.test(c.type||"")&&!Ie.access(c,"globalEval")&&he.contains(d,c)&&(c.src?he._evalUrl&&he._evalUrl(c.src):n(c.textContent.replace(it,""),d))}return e}function A(e,t,n){for(var i,o=t?he.filter(t,e):e,r=0;null!=(i=o[r]);r++)n||1!==i.nodeType||he.cleanData(y(i)),i.parentNode&&(n&&he.contains(i.ownerDocument,i)&&b(y(i,"script")),i.parentNode.removeChild(i));return e}function O(e,t,n){var i,o,r,s,a=e.style;return n=n||st(e),n&&(s=n.getPropertyValue(t)||n[t],""!==s||he.contains(e.ownerDocument,e)||(s=he.style(e,t)),!fe.pixelMarginRight()&&rt.test(s)&&ot.test(t)&&(i=a.width,o=a.minWidth,r=a.maxWidth,a.minWidth=a.maxWidth=a.width=s,s=n.width,a.width=i,a.minWidth=o,a.maxWidth=r)),void 0!==s?s+"":s}function L(e,t){return{get:function(){return e()?void delete this.get:(this.get=t).apply(this,arguments)}}}function I(e){if(e in pt)return e;for(var t=e[0].toUpperCase()+e.slice(1),n=ut.length;n--;)if((e=ut[n]+t)in pt)return e}function N(e){var t=he.cssProps[e];return t||(t=he.cssProps[e]=I(e)||e),t}function j(e,t,n){var i=Re.exec(t);return i?Math.max(0,i[2]-(n||0))+(i[3]||"px"):t}function H(e,t,n,i,o){var r,s=0;for(r=n===(i?"border":"content")?4:"width"===t?1:0;r<4;r+=2)"margin"===n&&(s+=he.css(e,n+qe[r],!0,o)),i?("content"===n&&(s-=he.css(e,"padding"+qe[r],!0,o)),"margin"!==n&&(s-=he.css(e,"border"+qe[r]+"Width",!0,o))):(s+=he.css(e,"padding"+qe[r],!0,o),"padding"!==n&&(s+=he.css(e,"border"+qe[r]+"Width",!0,o)));return s}function F(e,t,n){var i,o=st(e),r=O(e,t,o),s="border-box"===he.css(e,"boxSizing",!1,o);return rt.test(r)?r:(i=s&&(fe.boxSizingReliable()||r===e.style[t]),"auto"===r&&(r=e["offset"+t[0].toUpperCase()+t.slice(1)]),(r=parseFloat(r)||0)+H(e,t,n||(s?"border":"content"),i,o)+"px")}function R(e,t,n,i,o){return new R.prototype.init(e,t,n,i,o)}function q(){ht&&(!1===ne.hidden&&e.requestAnimationFrame?e.requestAnimationFrame(q):e.setTimeout(q,he.fx.interval),he.fx.tick())}function W(){return e.setTimeout(function(){ft=void 0}),ft=he.now()}function z(e,t){var n,i=0,o={height:e};for(t=t?1:0;i<4;i+=2-t)n=qe[i],o["margin"+n]=o["padding"+n]=e;return t&&(o.opacity=o.width=e),o}function Y(e,t,n){for(var i,o=(X.tweeners[t]||[]).concat(X.tweeners["*"]),r=0,s=o.length;r<s;r++)if(i=o[r].call(n,t,e))return i}function _(e,t,n){var i,o,r,s,a,l,c,d,u="width"in t||"height"in t,p=this,f={},h=e.style,g=e.nodeType&&We(e),m=Ie.get(e,"fxshow");n.queue||(s=he._queueHooks(e,"fx"),null==s.unqueued&&(s.unqueued=0,a=s.empty.fire,s.empty.fire=function(){s.unqueued||a()}),s.unqueued++,p.always(function(){p.always(function(){s.unqueued--,he.queue(e,"fx").length||s.empty.fire()})}));for(i in t)if(o=t[i],gt.test(o)){if(delete t[i],r=r||"toggle"===o,o===(g?"hide":"show")){if("show"!==o||!m||void 0===m[i])continue;g=!0}f[i]=m&&m[i]||he.style(e,i)}if((l=!he.isEmptyObject(t))||!he.isEmptyObject(f)){u&&1===e.nodeType&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],c=m&&m.display,null==c&&(c=Ie.get(e,"display")),d=he.css(e,"display"),"none"===d&&(c?d=c:(v([e],!0),c=e.style.display||c,d=he.css(e,"display"),v([e]))),("inline"===d||"inline-block"===d&&null!=c)&&"none"===he.css(e,"float")&&(l||(p.done(function(){h.display=c}),null==c&&(d=h.display,c="none"===d?"":d)),h.display="inline-block")),n.overflow&&(h.overflow="hidden",p.always(function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]})),l=!1;for(i in f)l||(m?"hidden"in m&&(g=m.hidden):m=Ie.access(e,"fxshow",{display:c}),r&&(m.hidden=!g),g&&v([e],!0),p.done(function(){g||v([e]),Ie.remove(e,"fxshow");for(i in f)he.style(e,i,f[i])})),l=Y(g?m[i]:0,i,p),i in m||(m[i]=l.start,g&&(l.end=l.start,l.start=0))}}function B(e,t){var n,i,o,r,s;for(n in e)if(i=he.camelCase(n),o=t[i],r=e[n],Array.isArray(r)&&(o=r[1],r=e[n]=r[0]),n!==i&&(e[i]=r,delete e[n]),(s=he.cssHooks[i])&&"expand"in s){r=s.expand(r),delete e[i];for(n in r)n in e||(e[n]=r[n],t[n]=o)}else t[i]=o}function X(e,t,n){var i,o,r=0,s=X.prefilters.length,a=he.Deferred().always(function(){delete l.elem}),l=function(){if(o)return!1;for(var t=ft||W(),n=Math.max(0,c.startTime+c.duration-t),i=n/c.duration||0,r=1-i,s=0,l=c.tweens.length;s<l;s++)c.tweens[s].run(r);return a.notifyWith(e,[c,r,n]),r<1&&l?n:(l||a.notifyWith(e,[c,1,0]),a.resolveWith(e,[c]),!1)},c=a.promise({elem:e,props:he.extend({},t),opts:he.extend(!0,{specialEasing:{},easing:he.easing._default},n),originalProperties:t,originalOptions:n,startTime:ft||W(),duration:n.duration,tweens:[],createTween:function(t,n){var i=he.Tween(e,c.opts,t,n,c.opts.specialEasing[t]||c.opts.easing);return c.tweens.push(i),i},stop:function(t){var n=0,i=t?c.tweens.length:0;if(o)return this;for(o=!0;n<i;n++)c.tweens[n].run(1);return t?(a.notifyWith(e,[c,1,0]),a.resolveWith(e,[c,t])):a.rejectWith(e,[c,t]),this}}),d=c.props;for(B(d,c.opts.specialEasing);r<s;r++)if(i=X.prefilters[r].call(c,e,d,c.opts))return he.isFunction(i.stop)&&(he._queueHooks(c.elem,c.opts.queue).stop=he.proxy(i.stop,i)),i;return he.map(d,Y,c),he.isFunction(c.opts.start)&&c.opts.start.call(e,c),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always),he.fx.timer(he.extend(l,{elem:e,anim:c,queue:c.opts.queue})),c}function U(e){return(e.match(Me)||[]).join(" ")}function V(e){return e.getAttribute&&e.getAttribute("class")||""}function G(e,t,n,i){var o;if(Array.isArray(t))he.each(t,function(t,o){n||Et.test(e)?i(e,o):G(e+"["+("object"==typeof o&&null!=o?t:"")+"]",o,n,i)});else if(n||"object"!==he.type(t))i(e,t);else for(o in t)G(e+"["+o+"]",t[o],n,i)}function K(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var i,o=0,r=t.toLowerCase().match(Me)||[];if(he.isFunction(n))for(;i=r[o++];)"+"===i[0]?(i=i.slice(1)||"*",(e[i]=e[i]||[]).unshift(n)):(e[i]=e[i]||[]).push(n)}}function Z(e,t,n,i){function o(a){var l;return r[a]=!0,he.each(e[a]||[],function(e,a){var c=a(t,n,i);return"string"!=typeof c||s||r[c]?s?!(l=c):void 0:(t.dataTypes.unshift(c),o(c),!1)}),l}var r={},s=e===Ft;return o(t.dataTypes[0])||!r["*"]&&o("*")}function Q(e,t){var n,i,o=he.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((o[n]?e:i||(i={}))[n]=t[n]);return i&&he.extend(!0,e,i),e}function J(e,t,n){for(var i,o,r,s,a=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===i&&(i=e.mimeType||t.getResponseHeader("Content-Type"));if(i)for(o in a)if(a[o]&&a[o].test(i)){l.unshift(o);break}if(l[0]in n)r=l[0];else{for(o in n){if(!l[0]||e.converters[o+" "+l[0]]){r=o;break}s||(s=o)}r=r||s}if(r)return r!==l[0]&&l.unshift(r),n[r]}function ee(e,t,n,i){var o,r,s,a,l,c={},d=e.dataTypes.slice();if(d[1])for(s in e.converters)c[s.toLowerCase()]=e.converters[s];for(r=d.shift();r;)if(e.responseFields[r]&&(n[e.responseFields[r]]=t),!l&&i&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=r,r=d.shift())if("*"===r)r=l;else if("*"!==l&&l!==r){if(!(s=c[l+" "+r]||c["* "+r]))for(o in c)if(a=o.split(" "),a[1]===r&&(s=c[l+" "+a[0]]||c["* "+a[0]])){!0===s?s=c[o]:!0!==c[o]&&(r=a[0],d.unshift(a[1]));break}if(!0!==s)if(s&&e.throws)t=s(t);else try{t=s(t)}catch(e){return{state:"parsererror",error:s?e:"No conversion from "+l+" to "+r}}}return{state:"success",data:t}}var te=[],ne=e.document,ie=Object.getPrototypeOf,oe=te.slice,re=te.concat,se=te.push,ae=te.indexOf,le={},ce=le.toString,de=le.hasOwnProperty,ue=de.toString,pe=ue.call(Object),fe={},he=function(e,t){return new he.fn.init(e,t)},ge=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,me=/^-ms-/,ve=/-([a-z])/g,ye=function(e,t){return t.toUpperCase()};he.fn=he.prototype={jquery:"3.2.1",constructor:he,length:0,toArray:function(){return oe.call(this)},get:function(e){return null==e?oe.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=he.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return he.each(this,e)},map:function(e){return this.pushStack(he.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(oe.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:se,sort:te.sort,splice:te.splice},he.extend=he.fn.extend=function(){var e,t,n,i,o,r,s=arguments[0]||{},a=1,l=arguments.length,c=!1;for("boolean"==typeof s&&(c=s,s=arguments[a]||{},a++),"object"==typeof s||he.isFunction(s)||(s={}),a===l&&(s=this,a--);a<l;a++)if(null!=(e=arguments[a]))for(t in e)n=s[t],i=e[t],s!==i&&(c&&i&&(he.isPlainObject(i)||(o=Array.isArray(i)))?(o?(o=!1,r=n&&Array.isArray(n)?n:[]):r=n&&he.isPlainObject(n)?n:{},s[t]=he.extend(c,r,i)):void 0!==i&&(s[t]=i));return s},he.extend({expando:"jQuery"+("3.2.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isFunction:function(e){return"function"===he.type(e)},isWindow:function(e){return null!=e&&e===e.window},isNumeric:function(e){var t=he.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==ce.call(e))&&(!(t=ie(e))||"function"==typeof(n=de.call(t,"constructor")&&t.constructor)&&ue.call(n)===pe)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},type:function(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?le[ce.call(e)]||"object":typeof e},globalEval:function(e){n(e)},camelCase:function(e){return e.replace(me,"ms-").replace(ve,ye)},each:function(e,t){var n,o=0;if(i(e))for(n=e.length;o<n&&!1!==t.call(e[o],o,e[o]);o++);else for(o in e)if(!1===t.call(e[o],o,e[o]))break;return e},trim:function(e){return null==e?"":(e+"").replace(ge,"")},makeArray:function(e,t){var n=t||[];return null!=e&&(i(Object(e))?he.merge(n,"string"==typeof e?[e]:e):se.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:ae.call(t,e,n)},merge:function(e,t){for(var n=+t.length,i=0,o=e.length;i<n;i++)e[o++]=t[i];return e.length=o,e},grep:function(e,t,n){for(var i=[],o=0,r=e.length,s=!n;o<r;o++)!t(e[o],o)!==s&&i.push(e[o]);return i},map:function(e,t,n){var o,r,s=0,a=[];if(i(e))for(o=e.length;s<o;s++)null!=(r=t(e[s],s,n))&&a.push(r);else for(s in e)null!=(r=t(e[s],s,n))&&a.push(r);return re.apply([],a)},guid:1,proxy:function(e,t){var n,i,o;if("string"==typeof t&&(n=e[t],t=e,e=n),he.isFunction(e))return i=oe.call(arguments,2),o=function(){return e.apply(t||this,i.concat(oe.call(arguments)))},o.guid=e.guid=e.guid||he.guid++,o},now:Date.now,support:fe}),"function"==typeof Symbol&&(he.fn[Symbol.iterator]=te[Symbol.iterator]),he.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){le["[object "+t+"]"]=t.toLowerCase()});var be=function(e){function t(e,t,n,i){var o,r,s,a,l,d,p,f=t&&t.ownerDocument,h=t?t.nodeType:9;if(n=n||[],"string"!=typeof e||!e||1!==h&&9!==h&&11!==h)return n;if(!i&&((t?t.ownerDocument||t:R)!==A&&P(t),t=t||A,L)){if(11!==h&&(l=ge.exec(e)))if(o=l[1]){if(9===h){if(!(s=t.getElementById(o)))return n;if(s.id===o)return n.push(s),n}else if(f&&(s=f.getElementById(o))&&H(t,s)&&s.id===o)return n.push(s),n}else{if(l[2])return K.apply(n,t.getElementsByTagName(e)),n;if((o=l[3])&&w.getElementsByClassName&&t.getElementsByClassName)return K.apply(n,t.getElementsByClassName(o)),n}if(w.qsa&&!_[e+" "]&&(!I||!I.test(e))){if(1!==h)f=t,p=e;else if("object"!==t.nodeName.toLowerCase()){for((a=t.getAttribute("id"))?a=a.replace(be,we):t.setAttribute("id",a=F),d=S(e),r=d.length;r--;)d[r]="#"+a+" "+u(d[r]);p=d.join(","),f=me.test(e)&&c(t.parentNode)||t}if(p)try{return K.apply(n,f.querySelectorAll(p)),n}catch(e){}finally{a===F&&t.removeAttribute("id")}}}return E(e.replace(re,"$1"),t,n,i)}function n(){function e(n,i){return t.push(n+" ")>x.cacheLength&&delete e[t.shift()],e[n+" "]=i}var t=[];return e}function i(e){return e[F]=!0,e}function o(e){var t=A.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function r(e,t){for(var n=e.split("|"),i=n.length;i--;)x.attrHandle[n[i]]=t}function s(e,t){var n=t&&e,i=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(i)return i;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function a(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&Ce(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function l(e){return i(function(t){return t=+t,i(function(n,i){for(var o,r=e([],n.length,t),s=r.length;s--;)n[o=r[s]]&&(n[o]=!(i[o]=n[o]))})})}function c(e){return e&&void 0!==e.getElementsByTagName&&e}function d(){}function u(e){for(var t=0,n=e.length,i="";t<n;t++)i+=e[t].value;return i}function p(e,t,n){var i=t.dir,o=t.next,r=o||i,s=n&&"parentNode"===r,a=W++;return t.first?function(t,n,o){for(;t=t[i];)if(1===t.nodeType||s)return e(t,n,o);return!1}:function(t,n,l){var c,d,u,p=[q,a];if(l){for(;t=t[i];)if((1===t.nodeType||s)&&e(t,n,l))return!0}else for(;t=t[i];)if(1===t.nodeType||s)if(u=t[F]||(t[F]={}),d=u[t.uniqueID]||(u[t.uniqueID]={}),o&&o===t.nodeName.toLowerCase())t=t[i]||t;else{if((c=d[r])&&c[0]===q&&c[1]===a)return p[2]=c[2];if(d[r]=p,p[2]=e(t,n,l))return!0}return!1}}function f(e){return e.length>1?function(t,n,i){for(var o=e.length;o--;)if(!e[o](t,n,i))return!1;return!0}:e[0]}function h(e,n,i){for(var o=0,r=n.length;o<r;o++)t(e,n[o],i);return i}function g(e,t,n,i,o){for(var r,s=[],a=0,l=e.length,c=null!=t;a<l;a++)(r=e[a])&&(n&&!n(r,i,o)||(s.push(r),c&&t.push(a)));return s}function m(e,t,n,o,r,s){return o&&!o[F]&&(o=m(o)),r&&!r[F]&&(r=m(r,s)),i(function(i,s,a,l){var c,d,u,p=[],f=[],m=s.length,v=i||h(t||"*",a.nodeType?[a]:a,[]),y=!e||!i&&t?v:g(v,p,e,a,l),b=n?r||(i?e:m||o)?[]:s:y;if(n&&n(y,b,a,l),o)for(c=g(b,f),o(c,[],a,l),d=c.length;d--;)(u=c[d])&&(b[f[d]]=!(y[f[d]]=u));if(i){if(r||e){if(r){for(c=[],d=b.length;d--;)(u=b[d])&&c.push(y[d]=u);r(null,b=[],c,l)}for(d=b.length;d--;)(u=b[d])&&(c=r?Q(i,u):p[d])>-1&&(i[c]=!(s[c]=u))}}else b=g(b===s?b.splice(m,b.length):b),r?r(null,s,b,l):K.apply(s,b)})}function v(e){for(var t,n,i,o=e.length,r=x.relative[e[0].type],s=r||x.relative[" "],a=r?1:0,l=p(function(e){return e===t},s,!0),c=p(function(e){return Q(t,e)>-1},s,!0),d=[function(e,n,i){var o=!r&&(i||n!==D)||((t=n).nodeType?l(e,n,i):c(e,n,i));return t=null,o}];a<o;a++)if(n=x.relative[e[a].type])d=[p(f(d),n)];else{if(n=x.filter[e[a].type].apply(null,e[a].matches),n[F]){for(i=++a;i<o&&!x.relative[e[i].type];i++);return m(a>1&&f(d),a>1&&u(e.slice(0,a-1).concat({value:" "===e[a-2].type?"*":""})).replace(re,"$1"),n,a<i&&v(e.slice(a,i)),i<o&&v(e=e.slice(i)),i<o&&u(e))}d.push(n)}return f(d)}function y(e,n){var o=n.length>0,r=e.length>0,s=function(i,s,a,l,c){var d,u,p,f=0,h="0",m=i&&[],v=[],y=D,b=i||r&&x.find.TAG("*",c),w=q+=null==y?1:Math.random()||.1,C=b.length;for(c&&(D=s===A||s||c);h!==C&&null!=(d=b[h]);h++){if(r&&d){for(u=0,s||d.ownerDocument===A||(P(d),a=!L);p=e[u++];)if(p(d,s||A,a)){l.push(d);break}c&&(q=w)}o&&((d=!p&&d)&&f--,i&&m.push(d))}if(f+=h,o&&h!==f){for(u=0;p=n[u++];)p(m,v,s,a);if(i){if(f>0)for(;h--;)m[h]||v[h]||(v[h]=V.call(l));v=g(v)}K.apply(l,v),c&&!i&&v.length>0&&f+n.length>1&&t.uniqueSort(l)}return c&&(q=w,D=y),m};return o?i(s):s}var b,w,x,C,k,S,T,E,D,$,M,P,A,O,L,I,N,j,H,F="sizzle"+1*new Date,R=e.document,q=0,W=0,z=n(),Y=n(),_=n(),B=function(e,t){return e===t&&(M=!0),0},X={}.hasOwnProperty,U=[],V=U.pop,G=U.push,K=U.push,Z=U.slice,Q=function(e,t){for(var n=0,i=e.length;n<i;n++)if(e[n]===t)return n;return-1},J="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",ee="[\\x20\\t\\r\\n\\f]",te="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",ne="\\["+ee+"*("+te+")(?:"+ee+"*([*^$|!~]?=)"+ee+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+te+"))|)"+ee+"*\\]",ie=":("+te+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+ne+")*)|.*)\\)|)",oe=new RegExp(ee+"+","g"),re=new RegExp("^"+ee+"+|((?:^|[^\\\\])(?:\\\\.)*)"+ee+"+$","g"),se=new RegExp("^"+ee+"*,"+ee+"*"),ae=new RegExp("^"+ee+"*([>+~]|"+ee+")"+ee+"*"),le=new RegExp("="+ee+"*([^\\]'\"]*?)"+ee+"*\\]","g"),ce=new RegExp(ie),de=new RegExp("^"+te+"$"),ue={ID:new RegExp("^#("+te+")"),CLASS:new RegExp("^\\.("+te+")"),TAG:new RegExp("^("+te+"|[*])"),ATTR:new RegExp("^"+ne),PSEUDO:new RegExp("^"+ie),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+ee+"*(even|odd|(([+-]|)(\\d*)n|)"+ee+"*(?:([+-]|)"+ee+"*(\\d+)|))"+ee+"*\\)|)","i"),bool:new RegExp("^(?:"+J+")$","i"),needsContext:new RegExp("^"+ee+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+ee+"*((?:-\\d)?\\d*)"+ee+"*\\)|)(?=[^-]|$)","i")},pe=/^(?:input|select|textarea|button)$/i,fe=/^h\d$/i,he=/^[^{]+\{\s*\[native \w/,ge=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,me=/[+~]/,ve=new RegExp("\\\\([\\da-f]{1,6}"+ee+"?|("+ee+")|.)","ig"),ye=function(e,t,n){var i="0x"+t-65536;return i!==i||n?t:i<0?String.fromCharCode(i+65536):String.fromCharCode(i>>10|55296,1023&i|56320)},be=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,we=function(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},xe=function(){P()},Ce=p(function(e){return!0===e.disabled&&("form"in e||"label"in e)},{dir:"parentNode",next:"legend"});try{K.apply(U=Z.call(R.childNodes),R.childNodes),U[R.childNodes.length].nodeType}catch(e){K={apply:U.length?function(e,t){G.apply(e,Z.call(t))}:function(e,t){for(var n=e.length,i=0;e[n++]=t[i++];);e.length=n-1}}}w=t.support={},k=t.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return!!t&&"HTML"!==t.nodeName},P=t.setDocument=function(e){var t,n,i=e?e.ownerDocument||e:R;return i!==A&&9===i.nodeType&&i.documentElement?(A=i,O=A.documentElement,L=!k(A),R!==A&&(n=A.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener("unload",xe,!1):n.attachEvent&&n.attachEvent("onunload",xe)),w.attributes=o(function(e){return e.className="i",!e.getAttribute("className")}),w.getElementsByTagName=o(function(e){return e.appendChild(A.createComment("")),!e.getElementsByTagName("*").length}),w.getElementsByClassName=he.test(A.getElementsByClassName),w.getById=o(function(e){return O.appendChild(e).id=F,!A.getElementsByName||!A.getElementsByName(F).length}),w.getById?(x.filter.ID=function(e){var t=e.replace(ve,ye);return function(e){return e.getAttribute("id")===t}},x.find.ID=function(e,t){if(void 0!==t.getElementById&&L){var n=t.getElementById(e);return n?[n]:[]}}):(x.filter.ID=function(e){var t=e.replace(ve,ye);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},x.find.ID=function(e,t){if(void 0!==t.getElementById&&L){var n,i,o,r=t.getElementById(e);if(r){if((n=r.getAttributeNode("id"))&&n.value===e)return[r];for(o=t.getElementsByName(e),i=0;r=o[i++];)if((n=r.getAttributeNode("id"))&&n.value===e)return[r]}return[]}}),x.find.TAG=w.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):w.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,i=[],o=0,r=t.getElementsByTagName(e);if("*"===e){for(;n=r[o++];)1===n.nodeType&&i.push(n);return i}return r},x.find.CLASS=w.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&L)return t.getElementsByClassName(e)},N=[],I=[],(w.qsa=he.test(A.querySelectorAll))&&(o(function(e){O.appendChild(e).innerHTML="<a id='"+F+"'></a><select id='"+F+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&I.push("[*^$]="+ee+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||I.push("\\["+ee+"*(?:value|"+J+")"),e.querySelectorAll("[id~="+F+"-]").length||I.push("~="),e.querySelectorAll(":checked").length||I.push(":checked"),e.querySelectorAll("a#"+F+"+*").length||I.push(".#.+[+~]")}),o(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=A.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&I.push("name"+ee+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&I.push(":enabled",":disabled"),O.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&I.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),I.push(",.*:")})),(w.matchesSelector=he.test(j=O.matches||O.webkitMatchesSelector||O.mozMatchesSelector||O.oMatchesSelector||O.msMatchesSelector))&&o(function(e){w.disconnectedMatch=j.call(e,"*"),j.call(e,"[s!='']:x"),N.push("!=",ie)}),I=I.length&&new RegExp(I.join("|")),N=N.length&&new RegExp(N.join("|")),t=he.test(O.compareDocumentPosition),H=t||he.test(O.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,i=t&&t.parentNode;return e===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):e.compareDocumentPosition&&16&e.compareDocumentPosition(i)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},B=t?function(e,t){if(e===t)return M=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n||(n=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1,1&n||!w.sortDetached&&t.compareDocumentPosition(e)===n?e===A||e.ownerDocument===R&&H(R,e)?-1:t===A||t.ownerDocument===R&&H(R,t)?1:$?Q($,e)-Q($,t):0:4&n?-1:1)}:function(e,t){if(e===t)return M=!0,0;var n,i=0,o=e.parentNode,r=t.parentNode,a=[e],l=[t];if(!o||!r)return e===A?-1:t===A?1:o?-1:r?1:$?Q($,e)-Q($,t):0;if(o===r)return s(e,t);for(n=e;n=n.parentNode;)a.unshift(n);for(n=t;n=n.parentNode;)l.unshift(n);for(;a[i]===l[i];)i++;return i?s(a[i],l[i]):a[i]===R?-1:l[i]===R?1:0},A):A},t.matches=function(e,n){return t(e,null,null,n)},t.matchesSelector=function(e,n){if((e.ownerDocument||e)!==A&&P(e),n=n.replace(le,"='$1']"),w.matchesSelector&&L&&!_[n+" "]&&(!N||!N.test(n))&&(!I||!I.test(n)))try{var i=j.call(e,n);if(i||w.disconnectedMatch||e.document&&11!==e.document.nodeType)return i}catch(e){}return t(n,A,null,[e]).length>0},t.contains=function(e,t){return(e.ownerDocument||e)!==A&&P(e),H(e,t)},t.attr=function(e,t){(e.ownerDocument||e)!==A&&P(e);var n=x.attrHandle[t.toLowerCase()],i=n&&X.call(x.attrHandle,t.toLowerCase())?n(e,t,!L):void 0;return void 0!==i?i:w.attributes||!L?e.getAttribute(t):(i=e.getAttributeNode(t))&&i.specified?i.value:null},t.escape=function(e){return(e+"").replace(be,we)},t.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},t.uniqueSort=function(e){var t,n=[],i=0,o=0;if(M=!w.detectDuplicates,$=!w.sortStable&&e.slice(0),e.sort(B),M){for(;t=e[o++];)t===e[o]&&(i=n.push(o));for(;i--;)e.splice(n[i],1)}return $=null,e},C=t.getText=function(e){var t,n="",i=0,o=e.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=C(e)}else if(3===o||4===o)return e.nodeValue}else for(;t=e[i++];)n+=C(t);return n},x=t.selectors={cacheLength:50,createPseudo:i,match:ue,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(ve,ye),e[3]=(e[3]||e[4]||e[5]||"").replace(ve,ye),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||t.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&t.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return ue.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&ce.test(n)&&(t=S(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(ve,ye).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=z[e+" "];return t||(t=new RegExp("(^|"+ee+")"+e+"("+ee+"|$)"))&&z(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,n,i){return function(o){var r=t.attr(o,e);return null==r?"!="===n:!n||(r+="","="===n?r===i:"!="===n?r!==i:"^="===n?i&&0===r.indexOf(i):"*="===n?i&&r.indexOf(i)>-1:"$="===n?i&&r.slice(-i.length)===i:"~="===n?(" "+r.replace(oe," ")+" ").indexOf(i)>-1:"|="===n&&(r===i||r.slice(0,i.length+1)===i+"-"))}},CHILD:function(e,t,n,i,o){var r="nth"!==e.slice(0,3),s="last"!==e.slice(-4),a="of-type"===t;return 1===i&&0===o?function(e){return!!e.parentNode}:function(t,n,l){var c,d,u,p,f,h,g=r!==s?"nextSibling":"previousSibling",m=t.parentNode,v=a&&t.nodeName.toLowerCase(),y=!l&&!a,b=!1;if(m){if(r){for(;g;){for(p=t;p=p[g];)if(a?p.nodeName.toLowerCase()===v:1===p.nodeType)return!1;h=g="only"===e&&!h&&"nextSibling"}return!0}if(h=[s?m.firstChild:m.lastChild],s&&y){for(p=m,u=p[F]||(p[F]={}),d=u[p.uniqueID]||(u[p.uniqueID]={}),c=d[e]||[],f=c[0]===q&&c[1],b=f&&c[2],p=f&&m.childNodes[f];p=++f&&p&&p[g]||(b=f=0)||h.pop();)if(1===p.nodeType&&++b&&p===t){d[e]=[q,f,b];break}}else if(y&&(p=t,u=p[F]||(p[F]={}),d=u[p.uniqueID]||(u[p.uniqueID]={}),c=d[e]||[],f=c[0]===q&&c[1],b=f),!1===b)for(;(p=++f&&p&&p[g]||(b=f=0)||h.pop())&&((a?p.nodeName.toLowerCase()!==v:1!==p.nodeType)||!++b||(y&&(u=p[F]||(p[F]={}),d=u[p.uniqueID]||(u[p.uniqueID]={}),d[e]=[q,b]),p!==t)););return(b-=o)===i||b%i==0&&b/i>=0}}},PSEUDO:function(e,n){var o,r=x.pseudos[e]||x.setFilters[e.toLowerCase()]||t.error("unsupported pseudo: "+e);return r[F]?r(n):r.length>1?(o=[e,e,"",n],x.setFilters.hasOwnProperty(e.toLowerCase())?i(function(e,t){for(var i,o=r(e,n),s=o.length;s--;)i=Q(e,o[s]),e[i]=!(t[i]=o[s])}):function(e){return r(e,0,o)}):r}},pseudos:{not:i(function(e){var t=[],n=[],o=T(e.replace(re,"$1"));return o[F]?i(function(e,t,n,i){for(var r,s=o(e,null,i,[]),a=e.length;a--;)(r=s[a])&&(e[a]=!(t[a]=r))}):function(e,i,r){return t[0]=e,o(t,null,r,n),t[0]=null,!n.pop()}}),has:i(function(e){return function(n){return t(e,n).length>0}}),contains:i(function(e){return e=e.replace(ve,ye),function(t){return(t.textContent||t.innerText||C(t)).indexOf(e)>-1}}),lang:i(function(e){return de.test(e||"")||t.error("unsupported lang: "+e),e=e.replace(ve,ye).toLowerCase(),function(t){var n;do{if(n=L?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===O},focus:function(e){return e===A.activeElement&&(!A.hasFocus||A.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:a(!1),disabled:a(!0),checked:function(e){var t=e.nodeName.toLowerCase()
;return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!x.pseudos.empty(e)},header:function(e){return fe.test(e.nodeName)},input:function(e){return pe.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:l(function(){return[0]}),last:l(function(e,t){return[t-1]}),eq:l(function(e,t,n){return[n<0?n+t:n]}),even:l(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:l(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:l(function(e,t,n){for(var i=n<0?n+t:n;--i>=0;)e.push(i);return e}),gt:l(function(e,t,n){for(var i=n<0?n+t:n;++i<t;)e.push(i);return e})}},x.pseudos.nth=x.pseudos.eq;for(b in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})x.pseudos[b]=function(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}(b);for(b in{submit:!0,reset:!0})x.pseudos[b]=function(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}(b);return d.prototype=x.filters=x.pseudos,x.setFilters=new d,S=t.tokenize=function(e,n){var i,o,r,s,a,l,c,d=Y[e+" "];if(d)return n?0:d.slice(0);for(a=e,l=[],c=x.preFilter;a;){i&&!(o=se.exec(a))||(o&&(a=a.slice(o[0].length)||a),l.push(r=[])),i=!1,(o=ae.exec(a))&&(i=o.shift(),r.push({value:i,type:o[0].replace(re," ")}),a=a.slice(i.length));for(s in x.filter)!(o=ue[s].exec(a))||c[s]&&!(o=c[s](o))||(i=o.shift(),r.push({value:i,type:s,matches:o}),a=a.slice(i.length));if(!i)break}return n?a.length:a?t.error(e):Y(e,l).slice(0)},T=t.compile=function(e,t){var n,i=[],o=[],r=_[e+" "];if(!r){for(t||(t=S(e)),n=t.length;n--;)r=v(t[n]),r[F]?i.push(r):o.push(r);r=_(e,y(o,i)),r.selector=e}return r},E=t.select=function(e,t,n,i){var o,r,s,a,l,d="function"==typeof e&&e,p=!i&&S(e=d.selector||e);if(n=n||[],1===p.length){if(r=p[0]=p[0].slice(0),r.length>2&&"ID"===(s=r[0]).type&&9===t.nodeType&&L&&x.relative[r[1].type]){if(!(t=(x.find.ID(s.matches[0].replace(ve,ye),t)||[])[0]))return n;d&&(t=t.parentNode),e=e.slice(r.shift().value.length)}for(o=ue.needsContext.test(e)?0:r.length;o--&&(s=r[o],!x.relative[a=s.type]);)if((l=x.find[a])&&(i=l(s.matches[0].replace(ve,ye),me.test(r[0].type)&&c(t.parentNode)||t))){if(r.splice(o,1),!(e=i.length&&u(r)))return K.apply(n,i),n;break}}return(d||T(e,p))(i,t,!L,n,!t||me.test(e)&&c(t.parentNode)||t),n},w.sortStable=F.split("").sort(B).join("")===F,w.detectDuplicates=!!M,P(),w.sortDetached=o(function(e){return 1&e.compareDocumentPosition(A.createElement("fieldset"))}),o(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||r("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),w.attributes&&o(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||r("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),o(function(e){return null==e.getAttribute("disabled")})||r(J,function(e,t,n){var i;if(!n)return!0===e[t]?t.toLowerCase():(i=e.getAttributeNode(t))&&i.specified?i.value:null}),t}(e);he.find=be,he.expr=be.selectors,he.expr[":"]=he.expr.pseudos,he.uniqueSort=he.unique=be.uniqueSort,he.text=be.getText,he.isXMLDoc=be.isXML,he.contains=be.contains,he.escapeSelector=be.escape;var we=function(e,t,n){for(var i=[],o=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(o&&he(e).is(n))break;i.push(e)}return i},xe=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},Ce=he.expr.match.needsContext,ke=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i,Se=/^.[^:#\[\.,]*$/;he.filter=function(e,t,n){var i=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===i.nodeType?he.find.matchesSelector(i,e)?[i]:[]:he.find.matches(e,he.grep(t,function(e){return 1===e.nodeType}))},he.fn.extend({find:function(e){var t,n,i=this.length,o=this;if("string"!=typeof e)return this.pushStack(he(e).filter(function(){for(t=0;t<i;t++)if(he.contains(o[t],this))return!0}));for(n=this.pushStack([]),t=0;t<i;t++)he.find(e,o[t],n);return i>1?he.uniqueSort(n):n},filter:function(e){return this.pushStack(r(this,e||[],!1))},not:function(e){return this.pushStack(r(this,e||[],!0))},is:function(e){return!!r(this,"string"==typeof e&&Ce.test(e)?he(e):e||[],!1).length}});var Te,Ee=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(he.fn.init=function(e,t,n){var i,o;if(!e)return this;if(n=n||Te,"string"==typeof e){if(!(i="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:Ee.exec(e))||!i[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(i[1]){if(t=t instanceof he?t[0]:t,he.merge(this,he.parseHTML(i[1],t&&t.nodeType?t.ownerDocument||t:ne,!0)),ke.test(i[1])&&he.isPlainObject(t))for(i in t)he.isFunction(this[i])?this[i](t[i]):this.attr(i,t[i]);return this}return o=ne.getElementById(i[2]),o&&(this[0]=o,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):he.isFunction(e)?void 0!==n.ready?n.ready(e):e(he):he.makeArray(e,this)}).prototype=he.fn,Te=he(ne);var De=/^(?:parents|prev(?:Until|All))/,$e={children:!0,contents:!0,next:!0,prev:!0};he.fn.extend({has:function(e){var t=he(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(he.contains(this,t[e]))return!0})},closest:function(e,t){var n,i=0,o=this.length,r=[],s="string"!=typeof e&&he(e);if(!Ce.test(e))for(;i<o;i++)for(n=this[i];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(s?s.index(n)>-1:1===n.nodeType&&he.find.matchesSelector(n,e))){r.push(n);break}return this.pushStack(r.length>1?he.uniqueSort(r):r)},index:function(e){return e?"string"==typeof e?ae.call(he(e),this[0]):ae.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(he.uniqueSort(he.merge(this.get(),he(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),he.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return we(e,"parentNode")},parentsUntil:function(e,t,n){return we(e,"parentNode",n)},next:function(e){return s(e,"nextSibling")},prev:function(e){return s(e,"previousSibling")},nextAll:function(e){return we(e,"nextSibling")},prevAll:function(e){return we(e,"previousSibling")},nextUntil:function(e,t,n){return we(e,"nextSibling",n)},prevUntil:function(e,t,n){return we(e,"previousSibling",n)},siblings:function(e){return xe((e.parentNode||{}).firstChild,e)},children:function(e){return xe(e.firstChild)},contents:function(e){return o(e,"iframe")?e.contentDocument:(o(e,"template")&&(e=e.content||e),he.merge([],e.childNodes))}},function(e,t){he.fn[e]=function(n,i){var o=he.map(this,t,n);return"Until"!==e.slice(-5)&&(i=n),i&&"string"==typeof i&&(o=he.filter(i,o)),this.length>1&&($e[e]||he.uniqueSort(o),De.test(e)&&o.reverse()),this.pushStack(o)}});var Me=/[^\x20\t\r\n\f]+/g;he.Callbacks=function(e){e="string"==typeof e?a(e):he.extend({},e);var t,n,i,o,r=[],s=[],l=-1,c=function(){for(o=o||e.once,i=t=!0;s.length;l=-1)for(n=s.shift();++l<r.length;)!1===r[l].apply(n[0],n[1])&&e.stopOnFalse&&(l=r.length,n=!1);e.memory||(n=!1),t=!1,o&&(r=n?[]:"")},d={add:function(){return r&&(n&&!t&&(l=r.length-1,s.push(n)),function t(n){he.each(n,function(n,i){he.isFunction(i)?e.unique&&d.has(i)||r.push(i):i&&i.length&&"string"!==he.type(i)&&t(i)})}(arguments),n&&!t&&c()),this},remove:function(){return he.each(arguments,function(e,t){for(var n;(n=he.inArray(t,r,n))>-1;)r.splice(n,1),n<=l&&l--}),this},has:function(e){return e?he.inArray(e,r)>-1:r.length>0},empty:function(){return r&&(r=[]),this},disable:function(){return o=s=[],r=n="",this},disabled:function(){return!r},lock:function(){return o=s=[],n||t||(r=n=""),this},locked:function(){return!!o},fireWith:function(e,n){return o||(n=n||[],n=[e,n.slice?n.slice():n],s.push(n),t||c()),this},fire:function(){return d.fireWith(this,arguments),this},fired:function(){return!!i}};return d},he.extend({Deferred:function(t){var n=[["notify","progress",he.Callbacks("memory"),he.Callbacks("memory"),2],["resolve","done",he.Callbacks("once memory"),he.Callbacks("once memory"),0,"resolved"],["reject","fail",he.Callbacks("once memory"),he.Callbacks("once memory"),1,"rejected"]],i="pending",o={state:function(){return i},always:function(){return r.done(arguments).fail(arguments),this},catch:function(e){return o.then(null,e)},pipe:function(){var e=arguments;return he.Deferred(function(t){he.each(n,function(n,i){var o=he.isFunction(e[i[4]])&&e[i[4]];r[i[1]](function(){var e=o&&o.apply(this,arguments);e&&he.isFunction(e.promise)?e.promise().progress(t.notify).done(t.resolve).fail(t.reject):t[i[0]+"With"](this,o?[e]:arguments)})}),e=null}).promise()},then:function(t,i,o){function r(t,n,i,o){return function(){var a=this,d=arguments,u=function(){var e,u;if(!(t<s)){if((e=i.apply(a,d))===n.promise())throw new TypeError("Thenable self-resolution");u=e&&("object"==typeof e||"function"==typeof e)&&e.then,he.isFunction(u)?o?u.call(e,r(s,n,l,o),r(s,n,c,o)):(s++,u.call(e,r(s,n,l,o),r(s,n,c,o),r(s,n,l,n.notifyWith))):(i!==l&&(a=void 0,d=[e]),(o||n.resolveWith)(a,d))}},p=o?u:function(){try{u()}catch(e){he.Deferred.exceptionHook&&he.Deferred.exceptionHook(e,p.stackTrace),t+1>=s&&(i!==c&&(a=void 0,d=[e]),n.rejectWith(a,d))}};t?p():(he.Deferred.getStackHook&&(p.stackTrace=he.Deferred.getStackHook()),e.setTimeout(p))}}var s=0;return he.Deferred(function(e){n[0][3].add(r(0,e,he.isFunction(o)?o:l,e.notifyWith)),n[1][3].add(r(0,e,he.isFunction(t)?t:l)),n[2][3].add(r(0,e,he.isFunction(i)?i:c))}).promise()},promise:function(e){return null!=e?he.extend(e,o):o}},r={};return he.each(n,function(e,t){var s=t[2],a=t[5];o[t[1]]=s.add,a&&s.add(function(){i=a},n[3-e][2].disable,n[0][2].lock),s.add(t[3].fire),r[t[0]]=function(){return r[t[0]+"With"](this===r?void 0:this,arguments),this},r[t[0]+"With"]=s.fireWith}),o.promise(r),t&&t.call(r,r),r},when:function(e){var t=arguments.length,n=t,i=Array(n),o=oe.call(arguments),r=he.Deferred(),s=function(e){return function(n){i[e]=this,o[e]=arguments.length>1?oe.call(arguments):n,--t||r.resolveWith(i,o)}};if(t<=1&&(d(e,r.done(s(n)).resolve,r.reject,!t),"pending"===r.state()||he.isFunction(o[n]&&o[n].then)))return r.then();for(;n--;)d(o[n],s(n),r.reject);return r.promise()}});var Pe=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;he.Deferred.exceptionHook=function(t,n){e.console&&e.console.warn&&t&&Pe.test(t.name)&&e.console.warn("jQuery.Deferred exception: "+t.message,t.stack,n)},he.readyException=function(t){e.setTimeout(function(){throw t})};var Ae=he.Deferred();he.fn.ready=function(e){return Ae.then(e).catch(function(e){he.readyException(e)}),this},he.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--he.readyWait:he.isReady)||(he.isReady=!0,!0!==e&&--he.readyWait>0||Ae.resolveWith(ne,[he]))}}),he.ready.then=Ae.then,"complete"===ne.readyState||"loading"!==ne.readyState&&!ne.documentElement.doScroll?e.setTimeout(he.ready):(ne.addEventListener("DOMContentLoaded",u),e.addEventListener("load",u));var Oe=function(e,t,n,i,o,r,s){var a=0,l=e.length,c=null==n;if("object"===he.type(n)){o=!0;for(a in n)Oe(e,t,a,n[a],!0,r,s)}else if(void 0!==i&&(o=!0,he.isFunction(i)||(s=!0),c&&(s?(t.call(e,i),t=null):(c=t,t=function(e,t,n){return c.call(he(e),n)})),t))for(;a<l;a++)t(e[a],n,s?i:i.call(e[a],a,t(e[a],n)));return o?e:c?t.call(e):l?t(e[0],n):r},Le=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};p.uid=1,p.prototype={cache:function(e){var t=e[this.expando];return t||(t={},Le(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var i,o=this.cache(e);if("string"==typeof t)o[he.camelCase(t)]=n;else for(i in t)o[he.camelCase(i)]=t[i];return o},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][he.camelCase(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,i=e[this.expando];if(void 0!==i){if(void 0!==t){Array.isArray(t)?t=t.map(he.camelCase):(t=he.camelCase(t),t=t in i?[t]:t.match(Me)||[]),n=t.length;for(;n--;)delete i[t[n]]}(void 0===t||he.isEmptyObject(i))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!he.isEmptyObject(t)}};var Ie=new p,Ne=new p,je=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,He=/[A-Z]/g;he.extend({hasData:function(e){return Ne.hasData(e)||Ie.hasData(e)},data:function(e,t,n){return Ne.access(e,t,n)},removeData:function(e,t){Ne.remove(e,t)},_data:function(e,t,n){return Ie.access(e,t,n)},_removeData:function(e,t){Ie.remove(e,t)}}),he.fn.extend({data:function(e,t){var n,i,o,r=this[0],s=r&&r.attributes;if(void 0===e){if(this.length&&(o=Ne.get(r),1===r.nodeType&&!Ie.get(r,"hasDataAttrs"))){for(n=s.length;n--;)s[n]&&(i=s[n].name,0===i.indexOf("data-")&&(i=he.camelCase(i.slice(5)),h(r,i,o[i])));Ie.set(r,"hasDataAttrs",!0)}return o}return"object"==typeof e?this.each(function(){Ne.set(this,e)}):Oe(this,function(t){var n;if(r&&void 0===t){if(void 0!==(n=Ne.get(r,e)))return n;if(void 0!==(n=h(r,e)))return n}else this.each(function(){Ne.set(this,e,t)})},null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){Ne.remove(this,e)})}}),he.extend({queue:function(e,t,n){var i;if(e)return t=(t||"fx")+"queue",i=Ie.get(e,t),n&&(!i||Array.isArray(n)?i=Ie.access(e,t,he.makeArray(n)):i.push(n)),i||[]},dequeue:function(e,t){t=t||"fx";var n=he.queue(e,t),i=n.length,o=n.shift(),r=he._queueHooks(e,t),s=function(){he.dequeue(e,t)};"inprogress"===o&&(o=n.shift(),i--),o&&("fx"===t&&n.unshift("inprogress"),delete r.stop,o.call(e,s,r)),!i&&r&&r.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return Ie.get(e,n)||Ie.access(e,n,{empty:he.Callbacks("once memory").add(function(){Ie.remove(e,[t+"queue",n])})})}}),he.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?he.queue(this[0],e):void 0===t?this:this.each(function(){var n=he.queue(this,e,t);he._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&he.dequeue(this,e)})},dequeue:function(e){return this.each(function(){he.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,i=1,o=he.Deferred(),r=this,s=this.length,a=function(){--i||o.resolveWith(r,[r])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";s--;)(n=Ie.get(r[s],e+"queueHooks"))&&n.empty&&(i++,n.empty.add(a));return a(),o.promise(t)}});var Fe=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,Re=new RegExp("^(?:([+-])=|)("+Fe+")([a-z%]*)$","i"),qe=["Top","Right","Bottom","Left"],We=function(e,t){return e=t||e,"none"===e.style.display||""===e.style.display&&he.contains(e.ownerDocument,e)&&"none"===he.css(e,"display")},ze=function(e,t,n,i){var o,r,s={};for(r in t)s[r]=e.style[r],e.style[r]=t[r];o=n.apply(e,i||[]);for(r in t)e.style[r]=s[r];return o},Ye={};he.fn.extend({show:function(){return v(this,!0)},hide:function(){return v(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){We(this)?he(this).show():he(this).hide()})}});var _e=/^(?:checkbox|radio)$/i,Be=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,Xe=/^$|\/(?:java|ecma)script/i,Ue={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};Ue.optgroup=Ue.option,Ue.tbody=Ue.tfoot=Ue.colgroup=Ue.caption=Ue.thead,Ue.th=Ue.td;var Ve=/<|&#?\w+;/;!function(){var e=ne.createDocumentFragment(),t=e.appendChild(ne.createElement("div")),n=ne.createElement("input");n.setAttribute("type","radio"),n.setAttribute("checked","checked"),n.setAttribute("name","t"),t.appendChild(n),fe.checkClone=t.cloneNode(!0).cloneNode(!0).lastChild.checked,t.innerHTML="<textarea>x</textarea>",fe.noCloneChecked=!!t.cloneNode(!0).lastChild.defaultValue}();var Ge=ne.documentElement,Ke=/^key/,Ze=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Qe=/^([^.]*)(?:\.(.+)|)/;he.event={global:{},add:function(e,t,n,i,o){var r,s,a,l,c,d,u,p,f,h,g,m=Ie.get(e);if(m)for(n.handler&&(r=n,n=r.handler,o=r.selector),o&&he.find.matchesSelector(Ge,o),n.guid||(n.guid=he.guid++),(l=m.events)||(l=m.events={}),(s=m.handle)||(s=m.handle=function(t){return void 0!==he&&he.event.triggered!==t.type?he.event.dispatch.apply(e,arguments):void 0}),t=(t||"").match(Me)||[""],c=t.length;c--;)a=Qe.exec(t[c])||[],f=g=a[1],h=(a[2]||"").split(".").sort(),f&&(u=he.event.special[f]||{},f=(o?u.delegateType:u.bindType)||f,u=he.event.special[f]||{},d=he.extend({type:f,origType:g,data:i,handler:n,guid:n.guid,selector:o,needsContext:o&&he.expr.match.needsContext.test(o),namespace:h.join(".")},r),(p=l[f])||(p=l[f]=[],p.delegateCount=0,u.setup&&!1!==u.setup.call(e,i,h,s)||e.addEventListener&&e.addEventListener(f,s)),u.add&&(u.add.call(e,d),d.handler.guid||(d.handler.guid=n.guid)),o?p.splice(p.delegateCount++,0,d):p.push(d),he.event.global[f]=!0)},remove:function(e,t,n,i,o){var r,s,a,l,c,d,u,p,f,h,g,m=Ie.hasData(e)&&Ie.get(e);if(m&&(l=m.events)){for(t=(t||"").match(Me)||[""],c=t.length;c--;)if(a=Qe.exec(t[c])||[],f=g=a[1],h=(a[2]||"").split(".").sort(),f){for(u=he.event.special[f]||{},f=(i?u.delegateType:u.bindType)||f,p=l[f]||[],a=a[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=r=p.length;r--;)d=p[r],!o&&g!==d.origType||n&&n.guid!==d.guid||a&&!a.test(d.namespace)||i&&i!==d.selector&&("**"!==i||!d.selector)||(p.splice(r,1),d.selector&&p.delegateCount--,u.remove&&u.remove.call(e,d));s&&!p.length&&(u.teardown&&!1!==u.teardown.call(e,h,m.handle)||he.removeEvent(e,f,m.handle),delete l[f])}else for(f in l)he.event.remove(e,f+t[c],n,i,!0);he.isEmptyObject(l)&&Ie.remove(e,"handle events")}},dispatch:function(e){var t,n,i,o,r,s,a=he.event.fix(e),l=new Array(arguments.length),c=(Ie.get(this,"events")||{})[a.type]||[],d=he.event.special[a.type]||{};for(l[0]=a,t=1;t<arguments.length;t++)l[t]=arguments[t];if(a.delegateTarget=this,!d.preDispatch||!1!==d.preDispatch.call(this,a)){for(s=he.event.handlers.call(this,a,c),t=0;(o=s[t++])&&!a.isPropagationStopped();)for(a.currentTarget=o.elem,n=0;(r=o.handlers[n++])&&!a.isImmediatePropagationStopped();)a.rnamespace&&!a.rnamespace.test(r.namespace)||(a.handleObj=r,a.data=r.data,void 0!==(i=((he.event.special[r.origType]||{}).handle||r.handler).apply(o.elem,l))&&!1===(a.result=i)&&(a.preventDefault(),a.stopPropagation()));return d.postDispatch&&d.postDispatch.call(this,a),a.result}},handlers:function(e,t){var n,i,o,r,s,a=[],l=t.delegateCount,c=e.target;if(l&&c.nodeType&&!("click"===e.type&&e.button>=1))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==e.type||!0!==c.disabled)){for(r=[],s={},n=0;n<l;n++)i=t[n],o=i.selector+" ",void 0===s[o]&&(s[o]=i.needsContext?he(o,this).index(c)>-1:he.find(o,this,null,[c]).length),s[o]&&r.push(i);r.length&&a.push({elem:c,handlers:r})}return c=this,l<t.length&&a.push({elem:c,handlers:t.slice(l)}),a},addProp:function(e,t){Object.defineProperty(he.Event.prototype,e,{enumerable:!0,configurable:!0,get:he.isFunction(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[he.expando]?e:new he.Event(e)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==k()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===k()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&o(this,"input"))return this.click(),!1},_default:function(e){return o(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},he.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},he.Event=function(e,t){if(!(this instanceof he.Event))return new he.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?x:C,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&he.extend(this,t),this.timeStamp=e&&e.timeStamp||he.now(),this[he.expando]=!0},he.Event.prototype={constructor:he.Event,isDefaultPrevented:C,isPropagationStopped:C,isImmediatePropagationStopped:C,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=x,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=x,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=x,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},he.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&Ke.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&Ze.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},he.event.addProp),he.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){he.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,i=this,o=e.relatedTarget,r=e.handleObj;return o&&(o===i||he.contains(i,o))||(e.type=r.origType,n=r.handler.apply(this,arguments),e.type=t),n}}}),he.fn.extend({on:function(e,t,n,i){return S(this,e,t,n,i)},one:function(e,t,n,i){return S(this,e,t,n,i,1)},off:function(e,t,n){var i,o;if(e&&e.preventDefault&&e.handleObj)return i=e.handleObj,he(e.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"==typeof e){for(o in e)this.off(o,t,e[o]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=C),this.each(function(){he.event.remove(this,e,n,t)})}});var Je=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,et=/<script|<style|<link/i,tt=/checked\s*(?:[^=]|=\s*.checked.)/i,nt=/^true\/(.*)/,it=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;he.extend({htmlPrefilter:function(e){return e.replace(Je,"<$1></$2>")},clone:function(e,t,n){var i,o,r,s,a=e.cloneNode(!0),l=he.contains(e.ownerDocument,e);if(!(fe.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||he.isXMLDoc(e)))for(s=y(a),r=y(e),i=0,o=r.length;i<o;i++)M(r[i],s[i]);if(t)if(n)for(r=r||y(e),s=s||y(a),i=0,o=r.length;i<o;i++)$(r[i],s[i]);else $(e,a);return s=y(a,"script"),s.length>0&&b(s,!l&&y(e,"script")),a},cleanData:function(e){for(var t,n,i,o=he.event.special,r=0;void 0!==(n=e[r]);r++)if(Le(n)){if(t=n[Ie.expando]){if(t.events)for(i in t.events)o[i]?he.event.remove(n,i):he.removeEvent(n,i,t.handle);n[Ie.expando]=void 0}n[Ne.expando]&&(n[Ne.expando]=void 0)}}}),he.fn.extend({detach:function(e){return A(this,e,!0)},remove:function(e){return A(this,e)},text:function(e){return Oe(this,function(e){return void 0===e?he.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return P(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){T(this,e).appendChild(e)}})},prepend:function(){return P(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=T(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return P(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return P(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(he.cleanData(y(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return he.clone(this,e,t)})},html:function(e){return Oe(this,function(e){var t=this[0]||{},n=0,i=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!et.test(e)&&!Ue[(Be.exec(e)||["",""])[1].toLowerCase()]){e=he.htmlPrefilter(e);try{for(;n<i;n++)t=this[n]||{},1===t.nodeType&&(he.cleanData(y(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=[];return P(this,arguments,function(t){var n=this.parentNode;he.inArray(this,e)<0&&(he.cleanData(y(this)),n&&n.replaceChild(t,this))},e)}}),he.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){he.fn[e]=function(e){for(var n,i=[],o=he(e),r=o.length-1,s=0;s<=r;s++)n=s===r?this:this.clone(!0),he(o[s])[t](n),se.apply(i,n.get());return this.pushStack(i)}});var ot=/^margin/,rt=new RegExp("^("+Fe+")(?!px)[a-z%]+$","i"),st=function(t){var n=t.ownerDocument.defaultView;return n&&n.opener||(n=e),n.getComputedStyle(t)};!function(){function t(){if(a){a.style.cssText="box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",a.innerHTML="",Ge.appendChild(s);var t=e.getComputedStyle(a);n="1%"!==t.top,r="2px"===t.marginLeft,i="4px"===t.width,a.style.marginRight="50%",o="4px"===t.marginRight,Ge.removeChild(s),a=null}}var n,i,o,r,s=ne.createElement("div"),a=ne.createElement("div");a.style&&(a.style.backgroundClip="content-box",a.cloneNode(!0).style.backgroundClip="",fe.clearCloneStyle="content-box"===a.style.backgroundClip,s.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",s.appendChild(a),he.extend(fe,{pixelPosition:function(){return t(),n},boxSizingReliable:function(){return t(),i},pixelMarginRight:function(){return t(),o},reliableMarginLeft:function(){return t(),r}}))}();var at=/^(none|table(?!-c[ea]).+)/,lt=/^--/,ct={position:"absolute",visibility:"hidden",display:"block"},dt={letterSpacing:"0",fontWeight:"400"},ut=["Webkit","Moz","ms"],pt=ne.createElement("div").style;he.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=O(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{float:"cssFloat"},style:function(e,t,n,i){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var o,r,s,a=he.camelCase(t),l=lt.test(t),c=e.style;if(l||(t=N(a)),s=he.cssHooks[t]||he.cssHooks[a],void 0===n)return s&&"get"in s&&void 0!==(o=s.get(e,!1,i))?o:c[t];r=typeof n,"string"===r&&(o=Re.exec(n))&&o[1]&&(n=g(e,t,o),r="number"),null!=n&&n===n&&("number"===r&&(n+=o&&o[3]||(he.cssNumber[a]?"":"px")),fe.clearCloneStyle||""!==n||0!==t.indexOf("background")||(c[t]="inherit"),s&&"set"in s&&void 0===(n=s.set(e,n,i))||(l?c.setProperty(t,n):c[t]=n))}},css:function(e,t,n,i){var o,r,s,a=he.camelCase(t);return lt.test(t)||(t=N(a)),s=he.cssHooks[t]||he.cssHooks[a],s&&"get"in s&&(o=s.get(e,!0,n)),void 0===o&&(o=O(e,t,i)),"normal"===o&&t in dt&&(o=dt[t]),""===n||n?(r=parseFloat(o),!0===n||isFinite(r)?r||0:o):o}}),he.each(["height","width"],function(e,t){he.cssHooks[t]={get:function(e,n,i){if(n)return!at.test(he.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?F(e,t,i):ze(e,ct,function(){return F(e,t,i)})},set:function(e,n,i){var o,r=i&&st(e),s=i&&H(e,t,i,"border-box"===he.css(e,"boxSizing",!1,r),r);return s&&(o=Re.exec(n))&&"px"!==(o[3]||"px")&&(e.style[t]=n,n=he.css(e,t)),j(e,n,s)}}}),he.cssHooks.marginLeft=L(fe.reliableMarginLeft,function(e,t){if(t)return(parseFloat(O(e,"marginLeft"))||e.getBoundingClientRect().left-ze(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),he.each({margin:"",padding:"",border:"Width"},function(e,t){he.cssHooks[e+t]={expand:function(n){for(var i=0,o={},r="string"==typeof n?n.split(" "):[n];i<4;i++)o[e+qe[i]+t]=r[i]||r[i-2]||r[0];return o}},ot.test(e)||(he.cssHooks[e+t].set=j)}),he.fn.extend({css:function(e,t){return Oe(this,function(e,t,n){var i,o,r={},s=0;if(Array.isArray(t)){for(i=st(e),o=t.length;s<o;s++)r[t[s]]=he.css(e,t[s],!1,i);return r}return void 0!==n?he.style(e,t,n):he.css(e,t)},e,t,arguments.length>1)}}),he.Tween=R,R.prototype={constructor:R,init:function(e,t,n,i,o,r){this.elem=e,this.prop=n,this.easing=o||he.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=i,this.unit=r||(he.cssNumber[n]?"":"px")},cur:function(){var e=R.propHooks[this.prop];return e&&e.get?e.get(this):R.propHooks._default.get(this)},run:function(e){var t,n=R.propHooks[this.prop];return this.options.duration?this.pos=t=he.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):R.propHooks._default.set(this),this}},R.prototype.init.prototype=R.prototype,R.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=he.css(e.elem,e.prop,""),t&&"auto"!==t?t:0)},set:function(e){he.fx.step[e.prop]?he.fx.step[e.prop](e):1!==e.elem.nodeType||null==e.elem.style[he.cssProps[e.prop]]&&!he.cssHooks[e.prop]?e.elem[e.prop]=e.now:he.style(e.elem,e.prop,e.now+e.unit)}}},R.propHooks.scrollTop=R.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},he.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},he.fx=R.prototype.init,he.fx.step={};var ft,ht,gt=/^(?:toggle|show|hide)$/,mt=/queueHooks$/;he.Animation=he.extend(X,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return g(n.elem,e,Re.exec(t),n),n}]},tweener:function(e,t){he.isFunction(e)?(t=e,e=["*"]):e=e.match(Me);for(var n,i=0,o=e.length;i<o;i++)n=e[i],X.tweeners[n]=X.tweeners[n]||[],X.tweeners[n].unshift(t)},prefilters:[_],prefilter:function(e,t){t?X.prefilters.unshift(e):X.prefilters.push(e)}}),he.speed=function(e,t,n){var i=e&&"object"==typeof e?he.extend({},e):{complete:n||!n&&t||he.isFunction(e)&&e,duration:e,easing:n&&t||t&&!he.isFunction(t)&&t};return he.fx.off?i.duration=0:"number"!=typeof i.duration&&(i.duration in he.fx.speeds?i.duration=he.fx.speeds[i.duration]:i.duration=he.fx.speeds._default),null!=i.queue&&!0!==i.queue||(i.queue="fx"),i.old=i.complete,i.complete=function(){he.isFunction(i.old)&&i.old.call(this),i.queue&&he.dequeue(this,i.queue)},i},he.fn.extend({fadeTo:function(e,t,n,i){return this.filter(We).css("opacity",0).show().end().animate({opacity:t},e,n,i)},animate:function(e,t,n,i){var o=he.isEmptyObject(e),r=he.speed(t,n,i),s=function(){var t=X(this,he.extend({},e),r);(o||Ie.get(this,"finish"))&&t.stop(!0)};return s.finish=s,o||!1===r.queue?this.each(s):this.queue(r.queue,s)},stop:function(e,t,n){var i=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&!1!==e&&this.queue(e||"fx",[]),this.each(function(){var t=!0,o=null!=e&&e+"queueHooks",r=he.timers,s=Ie.get(this);if(o)s[o]&&s[o].stop&&i(s[o]);else for(o in s)s[o]&&s[o].stop&&mt.test(o)&&i(s[o])
;for(o=r.length;o--;)r[o].elem!==this||null!=e&&r[o].queue!==e||(r[o].anim.stop(n),t=!1,r.splice(o,1));!t&&n||he.dequeue(this,e)})},finish:function(e){return!1!==e&&(e=e||"fx"),this.each(function(){var t,n=Ie.get(this),i=n[e+"queue"],o=n[e+"queueHooks"],r=he.timers,s=i?i.length:0;for(n.finish=!0,he.queue(this,e,[]),o&&o.stop&&o.stop.call(this,!0),t=r.length;t--;)r[t].elem===this&&r[t].queue===e&&(r[t].anim.stop(!0),r.splice(t,1));for(t=0;t<s;t++)i[t]&&i[t].finish&&i[t].finish.call(this);delete n.finish})}}),he.each(["toggle","show","hide"],function(e,t){var n=he.fn[t];he.fn[t]=function(e,i,o){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(z(t,!0),e,i,o)}}),he.each({slideDown:z("show"),slideUp:z("hide"),slideToggle:z("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){he.fn[e]=function(e,n,i){return this.animate(t,e,n,i)}}),he.timers=[],he.fx.tick=function(){var e,t=0,n=he.timers;for(ft=he.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||he.fx.stop(),ft=void 0},he.fx.timer=function(e){he.timers.push(e),he.fx.start()},he.fx.interval=13,he.fx.start=function(){ht||(ht=!0,q())},he.fx.stop=function(){ht=null},he.fx.speeds={slow:600,fast:200,_default:400},he.fn.delay=function(t,n){return t=he.fx?he.fx.speeds[t]||t:t,n=n||"fx",this.queue(n,function(n,i){var o=e.setTimeout(n,t);i.stop=function(){e.clearTimeout(o)}})},function(){var e=ne.createElement("input"),t=ne.createElement("select"),n=t.appendChild(ne.createElement("option"));e.type="checkbox",fe.checkOn=""!==e.value,fe.optSelected=n.selected,e=ne.createElement("input"),e.value="t",e.type="radio",fe.radioValue="t"===e.value}();var vt,yt=he.expr.attrHandle;he.fn.extend({attr:function(e,t){return Oe(this,he.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){he.removeAttr(this,e)})}}),he.extend({attr:function(e,t,n){var i,o,r=e.nodeType;if(3!==r&&8!==r&&2!==r)return void 0===e.getAttribute?he.prop(e,t,n):(1===r&&he.isXMLDoc(e)||(o=he.attrHooks[t.toLowerCase()]||(he.expr.match.bool.test(t)?vt:void 0)),void 0!==n?null===n?void he.removeAttr(e,t):o&&"set"in o&&void 0!==(i=o.set(e,n,t))?i:(e.setAttribute(t,n+""),n):o&&"get"in o&&null!==(i=o.get(e,t))?i:(i=he.find.attr(e,t),null==i?void 0:i))},attrHooks:{type:{set:function(e,t){if(!fe.radioValue&&"radio"===t&&o(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,i=0,o=t&&t.match(Me);if(o&&1===e.nodeType)for(;n=o[i++];)e.removeAttribute(n)}}),vt={set:function(e,t,n){return!1===t?he.removeAttr(e,n):e.setAttribute(n,n),n}},he.each(he.expr.match.bool.source.match(/\w+/g),function(e,t){var n=yt[t]||he.find.attr;yt[t]=function(e,t,i){var o,r,s=t.toLowerCase();return i||(r=yt[s],yt[s]=o,o=null!=n(e,t,i)?s:null,yt[s]=r),o}});var bt=/^(?:input|select|textarea|button)$/i,wt=/^(?:a|area)$/i;he.fn.extend({prop:function(e,t){return Oe(this,he.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each(function(){delete this[he.propFix[e]||e]})}}),he.extend({prop:function(e,t,n){var i,o,r=e.nodeType;if(3!==r&&8!==r&&2!==r)return 1===r&&he.isXMLDoc(e)||(t=he.propFix[t]||t,o=he.propHooks[t]),void 0!==n?o&&"set"in o&&void 0!==(i=o.set(e,n,t))?i:e[t]=n:o&&"get"in o&&null!==(i=o.get(e,t))?i:e[t]},propHooks:{tabIndex:{get:function(e){var t=he.find.attr(e,"tabindex");return t?parseInt(t,10):bt.test(e.nodeName)||wt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),fe.optSelected||(he.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),he.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){he.propFix[this.toLowerCase()]=this}),he.fn.extend({addClass:function(e){var t,n,i,o,r,s,a,l=0;if(he.isFunction(e))return this.each(function(t){he(this).addClass(e.call(this,t,V(this)))});if("string"==typeof e&&e)for(t=e.match(Me)||[];n=this[l++];)if(o=V(n),i=1===n.nodeType&&" "+U(o)+" "){for(s=0;r=t[s++];)i.indexOf(" "+r+" ")<0&&(i+=r+" ");a=U(i),o!==a&&n.setAttribute("class",a)}return this},removeClass:function(e){var t,n,i,o,r,s,a,l=0;if(he.isFunction(e))return this.each(function(t){he(this).removeClass(e.call(this,t,V(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof e&&e)for(t=e.match(Me)||[];n=this[l++];)if(o=V(n),i=1===n.nodeType&&" "+U(o)+" "){for(s=0;r=t[s++];)for(;i.indexOf(" "+r+" ")>-1;)i=i.replace(" "+r+" "," ");a=U(i),o!==a&&n.setAttribute("class",a)}return this},toggleClass:function(e,t){var n=typeof e;return"boolean"==typeof t&&"string"===n?t?this.addClass(e):this.removeClass(e):he.isFunction(e)?this.each(function(n){he(this).toggleClass(e.call(this,n,V(this),t),t)}):this.each(function(){var t,i,o,r;if("string"===n)for(i=0,o=he(this),r=e.match(Me)||[];t=r[i++];)o.hasClass(t)?o.removeClass(t):o.addClass(t);else void 0!==e&&"boolean"!==n||(t=V(this),t&&Ie.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":Ie.get(this,"__className__")||""))})},hasClass:function(e){var t,n,i=0;for(t=" "+e+" ";n=this[i++];)if(1===n.nodeType&&(" "+U(V(n))+" ").indexOf(t)>-1)return!0;return!1}});var xt=/\r/g;he.fn.extend({val:function(e){var t,n,i,o=this[0];{if(arguments.length)return i=he.isFunction(e),this.each(function(n){var o;1===this.nodeType&&(o=i?e.call(this,n,he(this).val()):e,null==o?o="":"number"==typeof o?o+="":Array.isArray(o)&&(o=he.map(o,function(e){return null==e?"":e+""})),(t=he.valHooks[this.type]||he.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,o,"value")||(this.value=o))});if(o)return(t=he.valHooks[o.type]||he.valHooks[o.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(o,"value"))?n:(n=o.value,"string"==typeof n?n.replace(xt,""):null==n?"":n)}}}),he.extend({valHooks:{option:{get:function(e){var t=he.find.attr(e,"value");return null!=t?t:U(he.text(e))}},select:{get:function(e){var t,n,i,r=e.options,s=e.selectedIndex,a="select-one"===e.type,l=a?null:[],c=a?s+1:r.length;for(i=s<0?c:a?s:0;i<c;i++)if(n=r[i],(n.selected||i===s)&&!n.disabled&&(!n.parentNode.disabled||!o(n.parentNode,"optgroup"))){if(t=he(n).val(),a)return t;l.push(t)}return l},set:function(e,t){for(var n,i,o=e.options,r=he.makeArray(t),s=o.length;s--;)i=o[s],(i.selected=he.inArray(he.valHooks.option.get(i),r)>-1)&&(n=!0);return n||(e.selectedIndex=-1),r}}}}),he.each(["radio","checkbox"],function(){he.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=he.inArray(he(e).val(),t)>-1}},fe.checkOn||(he.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})});var Ct=/^(?:focusinfocus|focusoutblur)$/;he.extend(he.event,{trigger:function(t,n,i,o){var r,s,a,l,c,d,u,p=[i||ne],f=de.call(t,"type")?t.type:t,h=de.call(t,"namespace")?t.namespace.split("."):[];if(s=a=i=i||ne,3!==i.nodeType&&8!==i.nodeType&&!Ct.test(f+he.event.triggered)&&(f.indexOf(".")>-1&&(h=f.split("."),f=h.shift(),h.sort()),c=f.indexOf(":")<0&&"on"+f,t=t[he.expando]?t:new he.Event(f,"object"==typeof t&&t),t.isTrigger=o?2:3,t.namespace=h.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=i),n=null==n?[t]:he.makeArray(n,[t]),u=he.event.special[f]||{},o||!u.trigger||!1!==u.trigger.apply(i,n))){if(!o&&!u.noBubble&&!he.isWindow(i)){for(l=u.delegateType||f,Ct.test(l+f)||(s=s.parentNode);s;s=s.parentNode)p.push(s),a=s;a===(i.ownerDocument||ne)&&p.push(a.defaultView||a.parentWindow||e)}for(r=0;(s=p[r++])&&!t.isPropagationStopped();)t.type=r>1?l:u.bindType||f,d=(Ie.get(s,"events")||{})[t.type]&&Ie.get(s,"handle"),d&&d.apply(s,n),(d=c&&s[c])&&d.apply&&Le(s)&&(t.result=d.apply(s,n),!1===t.result&&t.preventDefault());return t.type=f,o||t.isDefaultPrevented()||u._default&&!1!==u._default.apply(p.pop(),n)||!Le(i)||c&&he.isFunction(i[f])&&!he.isWindow(i)&&(a=i[c],a&&(i[c]=null),he.event.triggered=f,i[f](),he.event.triggered=void 0,a&&(i[c]=a)),t.result}},simulate:function(e,t,n){var i=he.extend(new he.Event,n,{type:e,isSimulated:!0});he.event.trigger(i,null,t)}}),he.fn.extend({trigger:function(e,t){return this.each(function(){he.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return he.event.trigger(e,t,n,!0)}}),he.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,t){he.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),he.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),fe.focusin="onfocusin"in e,fe.focusin||he.each({focus:"focusin",blur:"focusout"},function(e,t){var n=function(e){he.event.simulate(t,e.target,he.event.fix(e))};he.event.special[t]={setup:function(){var i=this.ownerDocument||this,o=Ie.access(i,t);o||i.addEventListener(e,n,!0),Ie.access(i,t,(o||0)+1)},teardown:function(){var i=this.ownerDocument||this,o=Ie.access(i,t)-1;o?Ie.access(i,t,o):(i.removeEventListener(e,n,!0),Ie.remove(i,t))}}});var kt=e.location,St=he.now(),Tt=/\?/;he.parseXML=function(t){var n;if(!t||"string"!=typeof t)return null;try{n=(new e.DOMParser).parseFromString(t,"text/xml")}catch(e){n=void 0}return n&&!n.getElementsByTagName("parsererror").length||he.error("Invalid XML: "+t),n};var Et=/\[\]$/,Dt=/\r?\n/g,$t=/^(?:submit|button|image|reset|file)$/i,Mt=/^(?:input|select|textarea|keygen)/i;he.param=function(e,t){var n,i=[],o=function(e,t){var n=he.isFunction(t)?t():t;i[i.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(Array.isArray(e)||e.jquery&&!he.isPlainObject(e))he.each(e,function(){o(this.name,this.value)});else for(n in e)G(n,e[n],t,o);return i.join("&")},he.fn.extend({serialize:function(){return he.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=he.prop(this,"elements");return e?he.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!he(this).is(":disabled")&&Mt.test(this.nodeName)&&!$t.test(e)&&(this.checked||!_e.test(e))}).map(function(e,t){var n=he(this).val();return null==n?null:Array.isArray(n)?he.map(n,function(e){return{name:t.name,value:e.replace(Dt,"\r\n")}}):{name:t.name,value:n.replace(Dt,"\r\n")}}).get()}});var Pt=/%20/g,At=/#.*$/,Ot=/([?&])_=[^&]*/,Lt=/^(.*?):[ \t]*([^\r\n]*)$/gm,It=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Nt=/^(?:GET|HEAD)$/,jt=/^\/\//,Ht={},Ft={},Rt="*/".concat("*"),qt=ne.createElement("a");qt.href=kt.href,he.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:kt.href,type:"GET",isLocal:It.test(kt.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Rt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":he.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Q(Q(e,he.ajaxSettings),t):Q(he.ajaxSettings,e)},ajaxPrefilter:K(Ht),ajaxTransport:K(Ft),ajax:function(t,n){function i(t,n,i,a){var c,p,f,w,x,C=n;d||(d=!0,l&&e.clearTimeout(l),o=void 0,s=a||"",k.readyState=t>0?4:0,c=t>=200&&t<300||304===t,i&&(w=J(h,k,i)),w=ee(h,w,k,c),c?(h.ifModified&&(x=k.getResponseHeader("Last-Modified"),x&&(he.lastModified[r]=x),(x=k.getResponseHeader("etag"))&&(he.etag[r]=x)),204===t||"HEAD"===h.type?C="nocontent":304===t?C="notmodified":(C=w.state,p=w.data,f=w.error,c=!f)):(f=C,!t&&C||(C="error",t<0&&(t=0))),k.status=t,k.statusText=(n||C)+"",c?v.resolveWith(g,[p,C,k]):v.rejectWith(g,[k,C,f]),k.statusCode(b),b=void 0,u&&m.trigger(c?"ajaxSuccess":"ajaxError",[k,h,c?p:f]),y.fireWith(g,[k,C]),u&&(m.trigger("ajaxComplete",[k,h]),--he.active||he.event.trigger("ajaxStop")))}"object"==typeof t&&(n=t,t=void 0),n=n||{};var o,r,s,a,l,c,d,u,p,f,h=he.ajaxSetup({},n),g=h.context||h,m=h.context&&(g.nodeType||g.jquery)?he(g):he.event,v=he.Deferred(),y=he.Callbacks("once memory"),b=h.statusCode||{},w={},x={},C="canceled",k={readyState:0,getResponseHeader:function(e){var t;if(d){if(!a)for(a={};t=Lt.exec(s);)a[t[1].toLowerCase()]=t[2];t=a[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return d?s:null},setRequestHeader:function(e,t){return null==d&&(e=x[e.toLowerCase()]=x[e.toLowerCase()]||e,w[e]=t),this},overrideMimeType:function(e){return null==d&&(h.mimeType=e),this},statusCode:function(e){var t;if(e)if(d)k.always(e[k.status]);else for(t in e)b[t]=[b[t],e[t]];return this},abort:function(e){var t=e||C;return o&&o.abort(t),i(0,t),this}};if(v.promise(k),h.url=((t||h.url||kt.href)+"").replace(jt,kt.protocol+"//"),h.type=n.method||n.type||h.method||h.type,h.dataTypes=(h.dataType||"*").toLowerCase().match(Me)||[""],null==h.crossDomain){c=ne.createElement("a");try{c.href=h.url,c.href=c.href,h.crossDomain=qt.protocol+"//"+qt.host!=c.protocol+"//"+c.host}catch(e){h.crossDomain=!0}}if(h.data&&h.processData&&"string"!=typeof h.data&&(h.data=he.param(h.data,h.traditional)),Z(Ht,h,n,k),d)return k;u=he.event&&h.global,u&&0==he.active++&&he.event.trigger("ajaxStart"),h.type=h.type.toUpperCase(),h.hasContent=!Nt.test(h.type),r=h.url.replace(At,""),h.hasContent?h.data&&h.processData&&0===(h.contentType||"").indexOf("application/x-www-form-urlencoded")&&(h.data=h.data.replace(Pt,"+")):(f=h.url.slice(r.length),h.data&&(r+=(Tt.test(r)?"&":"?")+h.data,delete h.data),!1===h.cache&&(r=r.replace(Ot,"$1"),f=(Tt.test(r)?"&":"?")+"_="+St+++f),h.url=r+f),h.ifModified&&(he.lastModified[r]&&k.setRequestHeader("If-Modified-Since",he.lastModified[r]),he.etag[r]&&k.setRequestHeader("If-None-Match",he.etag[r])),(h.data&&h.hasContent&&!1!==h.contentType||n.contentType)&&k.setRequestHeader("Content-Type",h.contentType),k.setRequestHeader("Accept",h.dataTypes[0]&&h.accepts[h.dataTypes[0]]?h.accepts[h.dataTypes[0]]+("*"!==h.dataTypes[0]?", "+Rt+"; q=0.01":""):h.accepts["*"]);for(p in h.headers)k.setRequestHeader(p,h.headers[p]);if(h.beforeSend&&(!1===h.beforeSend.call(g,k,h)||d))return k.abort();if(C="abort",y.add(h.complete),k.done(h.success),k.fail(h.error),o=Z(Ft,h,n,k)){if(k.readyState=1,u&&m.trigger("ajaxSend",[k,h]),d)return k;h.async&&h.timeout>0&&(l=e.setTimeout(function(){k.abort("timeout")},h.timeout));try{d=!1,o.send(w,i)}catch(e){if(d)throw e;i(-1,e)}}else i(-1,"No Transport");return k},getJSON:function(e,t,n){return he.get(e,t,n,"json")},getScript:function(e,t){return he.get(e,void 0,t,"script")}}),he.each(["get","post"],function(e,t){he[t]=function(e,n,i,o){return he.isFunction(n)&&(o=o||i,i=n,n=void 0),he.ajax(he.extend({url:e,type:t,dataType:o,data:n,success:i},he.isPlainObject(e)&&e))}}),he._evalUrl=function(e){return he.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,throws:!0})},he.fn.extend({wrapAll:function(e){var t;return this[0]&&(he.isFunction(e)&&(e=e.call(this[0])),t=he(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(e){return he.isFunction(e)?this.each(function(t){he(this).wrapInner(e.call(this,t))}):this.each(function(){var t=he(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=he.isFunction(e);return this.each(function(n){he(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(e){return this.parent(e).not("body").each(function(){he(this).replaceWith(this.childNodes)}),this}}),he.expr.pseudos.hidden=function(e){return!he.expr.pseudos.visible(e)},he.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},he.ajaxSettings.xhr=function(){try{return new e.XMLHttpRequest}catch(e){}};var Wt={0:200,1223:204},zt=he.ajaxSettings.xhr();fe.cors=!!zt&&"withCredentials"in zt,fe.ajax=zt=!!zt,he.ajaxTransport(function(t){var n,i;if(fe.cors||zt&&!t.crossDomain)return{send:function(o,r){var s,a=t.xhr();if(a.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(s in t.xhrFields)a[s]=t.xhrFields[s];t.mimeType&&a.overrideMimeType&&a.overrideMimeType(t.mimeType),t.crossDomain||o["X-Requested-With"]||(o["X-Requested-With"]="XMLHttpRequest");for(s in o)a.setRequestHeader(s,o[s]);n=function(e){return function(){n&&(n=i=a.onload=a.onerror=a.onabort=a.onreadystatechange=null,"abort"===e?a.abort():"error"===e?"number"!=typeof a.status?r(0,"error"):r(a.status,a.statusText):r(Wt[a.status]||a.status,a.statusText,"text"!==(a.responseType||"text")||"string"!=typeof a.responseText?{binary:a.response}:{text:a.responseText},a.getAllResponseHeaders()))}},a.onload=n(),i=a.onerror=n("error"),void 0!==a.onabort?a.onabort=i:a.onreadystatechange=function(){4===a.readyState&&e.setTimeout(function(){n&&i()})},n=n("abort");try{a.send(t.hasContent&&t.data||null)}catch(e){if(n)throw e}},abort:function(){n&&n()}}}),he.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),he.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return he.globalEval(e),e}}}),he.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),he.ajaxTransport("script",function(e){if(e.crossDomain){var t,n;return{send:function(i,o){t=he("<script>").prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&o("error"===e.type?404:200,e.type)}),ne.head.appendChild(t[0])},abort:function(){n&&n()}}}});var Yt=[],_t=/(=)\?(?=&|$)|\?\?/;he.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Yt.pop()||he.expando+"_"+St++;return this[e]=!0,e}}),he.ajaxPrefilter("json jsonp",function(t,n,i){var o,r,s,a=!1!==t.jsonp&&(_t.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&_t.test(t.data)&&"data");if(a||"jsonp"===t.dataTypes[0])return o=t.jsonpCallback=he.isFunction(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,a?t[a]=t[a].replace(_t,"$1"+o):!1!==t.jsonp&&(t.url+=(Tt.test(t.url)?"&":"?")+t.jsonp+"="+o),t.converters["script json"]=function(){return s||he.error(o+" was not called"),s[0]},t.dataTypes[0]="json",r=e[o],e[o]=function(){s=arguments},i.always(function(){void 0===r?he(e).removeProp(o):e[o]=r,t[o]&&(t.jsonpCallback=n.jsonpCallback,Yt.push(o)),s&&he.isFunction(r)&&r(s[0]),s=r=void 0}),"script"}),fe.createHTMLDocument=function(){var e=ne.implementation.createHTMLDocument("").body;return e.innerHTML="<form></form><form></form>",2===e.childNodes.length}(),he.parseHTML=function(e,t,n){if("string"!=typeof e)return[];"boolean"==typeof t&&(n=t,t=!1);var i,o,r;return t||(fe.createHTMLDocument?(t=ne.implementation.createHTMLDocument(""),i=t.createElement("base"),i.href=ne.location.href,t.head.appendChild(i)):t=ne),o=ke.exec(e),r=!n&&[],o?[t.createElement(o[1])]:(o=w([e],t,r),r&&r.length&&he(r).remove(),he.merge([],o.childNodes))},he.fn.load=function(e,t,n){var i,o,r,s=this,a=e.indexOf(" ");return a>-1&&(i=U(e.slice(a)),e=e.slice(0,a)),he.isFunction(t)?(n=t,t=void 0):t&&"object"==typeof t&&(o="POST"),s.length>0&&he.ajax({url:e,type:o||"GET",dataType:"html",data:t}).done(function(e){r=arguments,s.html(i?he("<div>").append(he.parseHTML(e)).find(i):e)}).always(n&&function(e,t){s.each(function(){n.apply(this,r||[e.responseText,t,e])})}),this},he.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){he.fn[t]=function(e){return this.on(t,e)}}),he.expr.pseudos.animated=function(e){return he.grep(he.timers,function(t){return e===t.elem}).length},he.offset={setOffset:function(e,t,n){var i,o,r,s,a,l,c,d=he.css(e,"position"),u=he(e),p={};"static"===d&&(e.style.position="relative"),a=u.offset(),r=he.css(e,"top"),l=he.css(e,"left"),c=("absolute"===d||"fixed"===d)&&(r+l).indexOf("auto")>-1,c?(i=u.position(),s=i.top,o=i.left):(s=parseFloat(r)||0,o=parseFloat(l)||0),he.isFunction(t)&&(t=t.call(e,n,he.extend({},a))),null!=t.top&&(p.top=t.top-a.top+s),null!=t.left&&(p.left=t.left-a.left+o),"using"in t?t.using.call(e,p):u.css(p)}},he.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){he.offset.setOffset(this,e,t)});var t,n,i,o,r=this[0];if(r)return r.getClientRects().length?(i=r.getBoundingClientRect(),t=r.ownerDocument,n=t.documentElement,o=t.defaultView,{top:i.top+o.pageYOffset-n.clientTop,left:i.left+o.pageXOffset-n.clientLeft}):{top:0,left:0}},position:function(){if(this[0]){var e,t,n=this[0],i={top:0,left:0};return"fixed"===he.css(n,"position")?t=n.getBoundingClientRect():(e=this.offsetParent(),t=this.offset(),o(e[0],"html")||(i=e.offset()),i={top:i.top+he.css(e[0],"borderTopWidth",!0),left:i.left+he.css(e[0],"borderLeftWidth",!0)}),{top:t.top-i.top-he.css(n,"marginTop",!0),left:t.left-i.left-he.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===he.css(e,"position");)e=e.offsetParent;return e||Ge})}}),he.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var n="pageYOffset"===t;he.fn[e]=function(i){return Oe(this,function(e,i,o){var r;if(he.isWindow(e)?r=e:9===e.nodeType&&(r=e.defaultView),void 0===o)return r?r[t]:e[i];r?r.scrollTo(n?r.pageXOffset:o,n?o:r.pageYOffset):e[i]=o},e,i,arguments.length)}}),he.each(["top","left"],function(e,t){he.cssHooks[t]=L(fe.pixelPosition,function(e,n){if(n)return n=O(e,t),rt.test(n)?he(e).position()[t]+"px":n})}),he.each({Height:"height",Width:"width"},function(e,t){he.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,i){he.fn[i]=function(o,r){var s=arguments.length&&(n||"boolean"!=typeof o),a=n||(!0===o||!0===r?"margin":"border");return Oe(this,function(t,n,o){var r;return he.isWindow(t)?0===i.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(r=t.documentElement,Math.max(t.body["scroll"+e],r["scroll"+e],t.body["offset"+e],r["offset"+e],r["client"+e])):void 0===o?he.css(t,n,a):he.style(t,n,o,a)},t,s?o:void 0,s)}})}),he.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,i){return this.on(t,e,n,i)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}}),he.holdReady=function(e){e?he.readyWait++:he.ready(!0)},he.isArray=Array.isArray,he.parseJSON=JSON.parse,he.nodeName=o,"function"==typeof define&&define.amd&&define("jquery",[],function(){return he});var Bt=e.jQuery,Xt=e.$;return he.noConflict=function(t){return e.$===he&&(e.$=Xt),t&&e.jQuery===he&&(e.jQuery=Bt),he},t||(e.jQuery=e.$=he),he}),function(e){var t={mode:"horizontal",slideSelector:"",infiniteLoop:!0,hideControlOnEnd:!1,speed:500,easing:null,slideMargin:0,startSlide:0,randomStart:!1,captions:!1,ticker:!1,tickerHover:!1,adaptiveHeight:!1,adaptiveHeightSpeed:500,video:!1,useCSS:!0,preloadImages:"visible",responsive:!0,slideZIndex:50,wrapperClass:"bx-wrapper",touchEnabled:!0,swipeThreshold:50,oneToOneTouch:!0,preventDefaultSwipeX:!0,preventDefaultSwipeY:!1,ariaLive:!0,ariaHidden:!0,keyboardEnabled:!1,pager:!0,pagerType:"full",pagerShortSeparator:" / ",pagerSelector:null,buildPager:null,pagerCustom:null,controls:!0,nextText:"Next",prevText:"Prev",nextSelector:null,prevSelector:null,autoControls:!1,startText:"Start",stopText:"Stop",autoControlsCombine:!1,autoControlsSelector:null,auto:!1,pause:4e3,autoStart:!0,autoDirection:"next",stopAutoOnClick:!1,autoHover:!1,autoDelay:0,autoSlideForOnePage:!1,minSlides:1,maxSlides:1,moveSlides:0,slideWidth:0,shrinkItems:!1,onSliderLoad:function(){return!0},onSlideBefore:function(){return!0},onSlideAfter:function(){return!0},onSlideNext:function(){return!0},onSlidePrev:function(){return!0},onSliderResize:function(){return!0},onAutoChange:function(){return!0}};e.fn.bxSlider=function(n){if(0===this.length)return this;if(this.length>1)return this.each(function(){e(this).bxSlider(n)}),this;var o={},r=this,s=e(window).width(),a=e(window).height();if(!e(r).data("bxSlider")){var l=function(){e(r).data("bxSlider")||(o.settings=e.extend({},t,n),o.settings.slideWidth=parseInt(o.settings.slideWidth),o.children=r.children(o.settings.slideSelector),o.children.length<o.settings.minSlides&&(o.settings.minSlides=o.children.length),o.children.length<o.settings.maxSlides&&(o.settings.maxSlides=o.children.length),o.settings.randomStart&&(o.settings.startSlide=Math.floor(Math.random()*o.children.length)),o.active={index:o.settings.startSlide},o.carousel=o.settings.minSlides>1||o.settings.maxSlides>1,o.carousel&&(o.settings.preloadImages="all"),o.minThreshold=o.settings.minSlides*o.settings.slideWidth+(o.settings.minSlides-1)*o.settings.slideMargin,o.maxThreshold=o.settings.maxSlides*o.settings.slideWidth+(o.settings.maxSlides-1)*o.settings.slideMargin,o.working=!1,o.controls={},o.interval=null,o.animProp="vertical"===o.settings.mode?"top":"left",o.usingCSS=o.settings.useCSS&&"fade"!==o.settings.mode&&function(){for(var e=document.createElement("div"),t=["WebkitPerspective","MozPerspective","OPerspective","msPerspective"],n=0;n<t.length;n++)if(void 0!==e.style[t[n]])return o.cssPrefix=t[n].replace("Perspective","").toLowerCase(),o.animProp="-"+o.cssPrefix+"-transform",!0;return!1}(),"vertical"===o.settings.mode&&(o.settings.maxSlides=o.settings.minSlides),r.data("origStyle",r.attr("style")),r.children(o.settings.slideSelector).each(function(){e(this).data("origStyle",e(this).attr("style"))}),c())},c=function(){var t=o.children.eq(o.settings.startSlide);r.wrap('<div class="'+o.settings.wrapperClass+'"><div class="bx-viewport"></div></div>'),o.viewport=r.parent(),o.settings.ariaLive&&!o.settings.ticker&&o.viewport.attr("aria-live","polite"),o.loader=e('<div class="bx-loading" />'),o.viewport.prepend(o.loader),r.css({width:"horizontal"===o.settings.mode?1e3*o.children.length+215+"%":"auto",position:"relative"}),o.usingCSS&&o.settings.easing?r.css("-"+o.cssPrefix+"-transition-timing-function",o.settings.easing):o.settings.easing||(o.settings.easing="swing"),o.viewport.css({width:"100%",overflow:"hidden",position:"relative"}),o.viewport.parent().css({maxWidth:f()}),o.children.css({float:"horizontal"===o.settings.mode?"left":"none",listStyle:"none",position:"relative"}),o.children.css("width",h()),"horizontal"===o.settings.mode&&o.settings.slideMargin>0&&o.children.css("marginRight",o.settings.slideMargin),"vertical"===o.settings.mode&&o.settings.slideMargin>0&&o.children.css("marginBottom",o.settings.slideMargin),"fade"===o.settings.mode&&(o.children.css({position:"absolute",zIndex:0,display:"none"}),o.children.eq(o.settings.startSlide).css({zIndex:o.settings.slideZIndex,display:"block"})),o.controls.el=e('<div class="bx-controls" />'),o.settings.captions&&S(),o.active.last=o.settings.startSlide===m()-1,o.settings.video&&r.fitVids(),("all"===o.settings.preloadImages||o.settings.ticker)&&(t=o.children),o.settings.ticker?o.settings.pager=!1:(o.settings.controls&&C(),o.settings.auto&&o.settings.autoControls&&k(),o.settings.pager&&x(),(o.settings.controls||o.settings.autoControls||o.settings.pager)&&o.viewport.after(o.controls.el)),d(t,u)},d=function(t,n){var i=t.find('img:not([src=""]), iframe').length,o=0;if(0===i)return void n();t.find('img:not([src=""]), iframe').each(function(){e(this).one("load error",function(){++o===i&&n()}).each(function(){(this.complete||""==this.src)&&e(this).trigger("load")})})},u=function(){if(o.settings.infiniteLoop&&"fade"!==o.settings.mode&&!o.settings.ticker){var t="vertical"===o.settings.mode?o.settings.minSlides:o.settings.maxSlides,n=o.children.slice(0,t).clone(!0).addClass("bx-clone"),i=o.children.slice(-t).clone(!0).addClass("bx-clone");o.settings.ariaHidden&&(n.attr("aria-hidden",!0),i.attr("aria-hidden",!0)),r.append(n).prepend(i)}o.loader.remove(),y(),"vertical"===o.settings.mode&&(o.settings.adaptiveHeight=!0),o.viewport.height(p()),r.redrawSlider(),o.settings.onSliderLoad.call(r,o.active.index),o.initialized=!0,o.settings.responsive&&e(window).bind("resize",X),o.settings.auto&&o.settings.autoStart&&(m()>1||o.settings.autoSlideForOnePage)&&j(),o.settings.ticker&&H(),o.settings.pager&&P(o.settings.startSlide),o.settings.controls&&L(),o.settings.touchEnabled&&!o.settings.ticker&&W(),o.settings.keyboardEnabled&&!o.settings.ticker&&e(document).keydown(q)},p=function(){var t=0,n=e();if("vertical"===o.settings.mode||o.settings.adaptiveHeight)if(o.carousel){var r=1===o.settings.moveSlides?o.active.index:o.active.index*v();for(n=o.children.eq(r),i=1;i<=o.settings.maxSlides-1;i++)n=r+i>=o.children.length?n.add(o.children.eq(i-1)):n.add(o.children.eq(r+i))}else n=o.children.eq(o.active.index);else n=o.children;return"vertical"===o.settings.mode?(n.each(function(n){t+=e(this).outerHeight()}),o.settings.slideMargin>0&&(t+=o.settings.slideMargin*(o.settings.minSlides-1))):t=Math.max.apply(Math,n.map(function(){return e(this).outerHeight(!1)}).get()),"border-box"===o.viewport.css("box-sizing")?t+=parseFloat(o.viewport.css("padding-top"))+parseFloat(o.viewport.css("padding-bottom"))+parseFloat(o.viewport.css("border-top-width"))+parseFloat(o.viewport.css("border-bottom-width")):"padding-box"===o.viewport.css("box-sizing")&&(t+=parseFloat(o.viewport.css("padding-top"))+parseFloat(o.viewport.css("padding-bottom"))),t},f=function(){var e="100%";return o.settings.slideWidth>0&&(e="horizontal"===o.settings.mode?o.settings.maxSlides*o.settings.slideWidth+(o.settings.maxSlides-1)*o.settings.slideMargin:o.settings.slideWidth),e},h=function(){var e=o.settings.slideWidth,t=o.viewport.width();if(0===o.settings.slideWidth||o.settings.slideWidth>t&&!o.carousel||"vertical"===o.settings.mode)e=t;else if(o.settings.maxSlides>1&&"horizontal"===o.settings.mode){if(t>o.maxThreshold)return e;t<o.minThreshold?e=(t-o.settings.slideMargin*(o.settings.minSlides-1))/o.settings.minSlides:o.settings.shrinkItems&&(e=Math.floor((t+o.settings.slideMargin)/Math.ceil((t+o.settings.slideMargin)/(e+o.settings.slideMargin))-o.settings.slideMargin))}return e},g=function(){var e=1,t=null;return"horizontal"===o.settings.mode&&o.settings.slideWidth>0?o.viewport.width()<o.minThreshold?e=o.settings.minSlides:o.viewport.width()>o.maxThreshold?e=o.settings.maxSlides:(t=o.children.first().width()+o.settings.slideMargin,e=Math.floor((o.viewport.width()+o.settings.slideMargin)/t)||1):"vertical"===o.settings.mode&&(e=o.settings.minSlides),e},m=function(){var e=0,t=0,n=0;if(o.settings.moveSlides>0){if(!o.settings.infiniteLoop){for(;t<o.children.length;)++e,t=n+g(),n+=o.settings.moveSlides<=g()?o.settings.moveSlides:g();return n}e=Math.ceil(o.children.length/v())}else e=Math.ceil(o.children.length/g());return e},v=function(){return o.settings.moveSlides>0&&o.settings.moveSlides<=g()?o.settings.moveSlides:g()},y=function(){var e,t,n;o.children.length>o.settings.maxSlides&&o.active.last&&!o.settings.infiniteLoop?"horizontal"===o.settings.mode?(t=o.children.last(),e=t.position(),b(-(e.left-(o.viewport.width()-t.outerWidth())),"reset",0)):"vertical"===o.settings.mode&&(n=o.children.length-o.settings.minSlides,e=o.children.eq(n).position(),b(-e.top,"reset",0)):(e=o.children.eq(o.active.index*v()).position(),o.active.index===m()-1&&(o.active.last=!0),void 0!==e&&("horizontal"===o.settings.mode?b(-e.left,"reset",0):"vertical"===o.settings.mode&&b(-e.top,"reset",0)))},b=function(t,n,i,s){var a,l;o.usingCSS?(l="vertical"===o.settings.mode?"translate3d(0, "+t+"px, 0)":"translate3d("+t+"px, 0, 0)",r.css("-"+o.cssPrefix+"-transition-duration",i/1e3+"s"),"slide"===n?(r.css(o.animProp,l),0!==i?r.bind("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd",function(t){
e(t.target).is(r)&&(r.unbind("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd"),A())}):A()):"reset"===n?r.css(o.animProp,l):"ticker"===n&&(r.css("-"+o.cssPrefix+"-transition-timing-function","linear"),r.css(o.animProp,l),0!==i?r.bind("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd",function(t){e(t.target).is(r)&&(r.unbind("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd"),b(s.resetValue,"reset",0),F())}):(b(s.resetValue,"reset",0),F()))):(a={},a[o.animProp]=t,"slide"===n?r.animate(a,i,o.settings.easing,function(){A()}):"reset"===n?r.css(o.animProp,t):"ticker"===n&&r.animate(a,i,"linear",function(){b(s.resetValue,"reset",0),F()}))},w=function(){for(var t="",n="",i=m(),r=0;r<i;r++)n="",o.settings.buildPager&&e.isFunction(o.settings.buildPager)||o.settings.pagerCustom?(n=o.settings.buildPager(r),o.pagerEl.addClass("bx-custom-pager")):(n=r+1,o.pagerEl.addClass("bx-default-pager")),t+='<div class="bx-pager-item"><a href="" data-slide-index="'+r+'" class="bx-pager-link">'+n+"</a></div>";o.pagerEl.html(t)},x=function(){o.settings.pagerCustom?o.pagerEl=e(o.settings.pagerCustom):(o.pagerEl=e('<div class="bx-pager" />'),o.settings.pagerSelector?e(o.settings.pagerSelector).html(o.pagerEl):o.controls.el.addClass("bx-has-pager").append(o.pagerEl),w()),o.pagerEl.on("click touchend","a",M)},C=function(){o.controls.next=e('<a class="bx-next" href="">'+o.settings.nextText+"</a>"),o.controls.prev=e('<a class="bx-prev" href="">'+o.settings.prevText+"</a>"),o.controls.next.bind("click touchend",T),o.controls.prev.bind("click touchend",E),o.settings.nextSelector&&e(o.settings.nextSelector).append(o.controls.next),o.settings.prevSelector&&e(o.settings.prevSelector).append(o.controls.prev),o.settings.nextSelector||o.settings.prevSelector||(o.controls.directionEl=e('<div class="bx-controls-direction" />'),o.controls.directionEl.append(o.controls.prev).append(o.controls.next),o.controls.el.addClass("bx-has-controls-direction").append(o.controls.directionEl))},k=function(){o.controls.start=e('<div class="bx-controls-auto-item"><a class="bx-start" href="">'+o.settings.startText+"</a></div>"),o.controls.stop=e('<div class="bx-controls-auto-item"><a class="bx-stop" href="">'+o.settings.stopText+"</a></div>"),o.controls.autoEl=e('<div class="bx-controls-auto" />'),o.controls.autoEl.on("click",".bx-start",D),o.controls.autoEl.on("click",".bx-stop",$),o.settings.autoControlsCombine?o.controls.autoEl.append(o.controls.start):o.controls.autoEl.append(o.controls.start).append(o.controls.stop),o.settings.autoControlsSelector?e(o.settings.autoControlsSelector).html(o.controls.autoEl):o.controls.el.addClass("bx-has-controls-auto").append(o.controls.autoEl),O(o.settings.autoStart?"stop":"start")},S=function(){o.children.each(function(t){var n=e(this).find("img:first").attr("title");void 0!==n&&(""+n).length&&e(this).append('<div class="bx-caption"><span>'+n+"</span></div>")})},T=function(e){e.preventDefault(),o.controls.el.hasClass("disabled")||(o.settings.auto&&o.settings.stopAutoOnClick&&r.stopAuto(),r.goToNextSlide())},E=function(e){e.preventDefault(),o.controls.el.hasClass("disabled")||(o.settings.auto&&o.settings.stopAutoOnClick&&r.stopAuto(),r.goToPrevSlide())},D=function(e){r.startAuto(),e.preventDefault()},$=function(e){r.stopAuto(),e.preventDefault()},M=function(t){var n,i;t.preventDefault(),o.controls.el.hasClass("disabled")||(o.settings.auto&&o.settings.stopAutoOnClick&&r.stopAuto(),n=e(t.currentTarget),void 0!==n.attr("data-slide-index")&&(i=parseInt(n.attr("data-slide-index")))!==o.active.index&&r.goToSlide(i))},P=function(t){var n=o.children.length;if("short"===o.settings.pagerType)return o.settings.maxSlides>1&&(n=Math.ceil(o.children.length/o.settings.maxSlides)),void o.pagerEl.html(t+1+o.settings.pagerShortSeparator+n);o.pagerEl.find("a").removeClass("active"),o.pagerEl.each(function(n,i){e(i).find("a").eq(t).addClass("active")})},A=function(){if(o.settings.infiniteLoop){var e="";0===o.active.index?e=o.children.eq(0).position():o.active.index===m()-1&&o.carousel?e=o.children.eq((m()-1)*v()).position():o.active.index===o.children.length-1&&(e=o.children.eq(o.children.length-1).position()),e&&("horizontal"===o.settings.mode?b(-e.left,"reset",0):"vertical"===o.settings.mode&&b(-e.top,"reset",0))}o.working=!1,o.settings.onSlideAfter.call(r,o.children.eq(o.active.index),o.oldIndex,o.active.index)},O=function(e){o.settings.autoControlsCombine?o.controls.autoEl.html(o.controls[e]):(o.controls.autoEl.find("a").removeClass("active"),o.controls.autoEl.find("a:not(.bx-"+e+")").addClass("active"))},L=function(){1===m()?(o.controls.prev.addClass("disabled"),o.controls.next.addClass("disabled")):!o.settings.infiniteLoop&&o.settings.hideControlOnEnd&&(0===o.active.index?(o.controls.prev.addClass("disabled"),o.controls.next.removeClass("disabled")):o.active.index===m()-1?(o.controls.next.addClass("disabled"),o.controls.prev.removeClass("disabled")):(o.controls.prev.removeClass("disabled"),o.controls.next.removeClass("disabled")))},I=function(){r.startAuto()},N=function(){r.stopAuto()},j=function(){if(o.settings.autoDelay>0){setTimeout(r.startAuto,o.settings.autoDelay)}else r.startAuto(),e(window).focus(I).blur(N);o.settings.autoHover&&r.hover(function(){o.interval&&(r.stopAuto(!0),o.autoPaused=!0)},function(){o.autoPaused&&(r.startAuto(!0),o.autoPaused=null)})},H=function(){var t,n,i,s,a,l,c,d,u=0;"next"===o.settings.autoDirection?r.append(o.children.clone().addClass("bx-clone")):(r.prepend(o.children.clone().addClass("bx-clone")),t=o.children.first().position(),u="horizontal"===o.settings.mode?-t.left:-t.top),b(u,"reset",0),o.settings.pager=!1,o.settings.controls=!1,o.settings.autoControls=!1,o.settings.tickerHover&&(o.usingCSS?(s="horizontal"===o.settings.mode?4:5,o.viewport.hover(function(){n=r.css("-"+o.cssPrefix+"-transform"),i=parseFloat(n.split(",")[s]),b(i,"reset",0)},function(){d=0,o.children.each(function(t){d+="horizontal"===o.settings.mode?e(this).outerWidth(!0):e(this).outerHeight(!0)}),a=o.settings.speed/d,l="horizontal"===o.settings.mode?"left":"top",c=a*(d-Math.abs(parseInt(i))),F(c)})):o.viewport.hover(function(){r.stop()},function(){d=0,o.children.each(function(t){d+="horizontal"===o.settings.mode?e(this).outerWidth(!0):e(this).outerHeight(!0)}),a=o.settings.speed/d,l="horizontal"===o.settings.mode?"left":"top",c=a*(d-Math.abs(parseInt(r.css(l)))),F(c)})),F()},F=function(e){var t,n,i,s=e||o.settings.speed,a={left:0,top:0},l={left:0,top:0};"next"===o.settings.autoDirection?a=r.find(".bx-clone").first().position():l=o.children.first().position(),t="horizontal"===o.settings.mode?-a.left:-a.top,n="horizontal"===o.settings.mode?-l.left:-l.top,i={resetValue:n},b(t,"ticker",s,i)},R=function(t){var n=e(window),i={top:n.scrollTop(),left:n.scrollLeft()},o=t.offset();return i.right=i.left+n.width(),i.bottom=i.top+n.height(),o.right=o.left+t.outerWidth(),o.bottom=o.top+t.outerHeight(),!(i.right<o.left||i.left>o.right||i.bottom<o.top||i.top>o.bottom)},q=function(e){var t=document.activeElement.tagName.toLowerCase();if(null==new RegExp(t,["i"]).exec("input|textarea")&&R(r)){if(39===e.keyCode)return T(e),!1;if(37===e.keyCode)return E(e),!1}},W=function(){o.touch={start:{x:0,y:0},end:{x:0,y:0}},o.viewport.bind("touchstart MSPointerDown pointerdown",z),o.viewport.on("click",".bxslider a",function(e){o.viewport.hasClass("click-disabled")&&(e.preventDefault(),o.viewport.removeClass("click-disabled"))})},z=function(e){if(o.controls.el.addClass("disabled"),o.working)e.preventDefault(),o.controls.el.removeClass("disabled");else{o.touch.originalPos=r.position();var t=e.originalEvent,n=void 0!==t.changedTouches?t.changedTouches:[t];o.touch.start.x=n[0].pageX,o.touch.start.y=n[0].pageY,o.viewport.get(0).setPointerCapture&&(o.pointerId=t.pointerId,o.viewport.get(0).setPointerCapture(o.pointerId)),o.viewport.bind("touchmove MSPointerMove pointermove",_),o.viewport.bind("touchend MSPointerUp pointerup",B),o.viewport.bind("MSPointerCancel pointercancel",Y)}},Y=function(e){b(o.touch.originalPos.left,"reset",0),o.controls.el.removeClass("disabled"),o.viewport.unbind("MSPointerCancel pointercancel",Y),o.viewport.unbind("touchmove MSPointerMove pointermove",_),o.viewport.unbind("touchend MSPointerUp pointerup",B),o.viewport.get(0).releasePointerCapture&&o.viewport.get(0).releasePointerCapture(o.pointerId)},_=function(e){var t=e.originalEvent,n=void 0!==t.changedTouches?t.changedTouches:[t],i=Math.abs(n[0].pageX-o.touch.start.x),r=Math.abs(n[0].pageY-o.touch.start.y),s=0,a=0;3*i>r&&o.settings.preventDefaultSwipeX?e.preventDefault():3*r>i&&o.settings.preventDefaultSwipeY&&e.preventDefault(),"fade"!==o.settings.mode&&o.settings.oneToOneTouch&&("horizontal"===o.settings.mode?(a=n[0].pageX-o.touch.start.x,s=o.touch.originalPos.left+a):(a=n[0].pageY-o.touch.start.y,s=o.touch.originalPos.top+a),b(s,"reset",0))},B=function(e){o.viewport.unbind("touchmove MSPointerMove pointermove",_),o.controls.el.removeClass("disabled");var t=e.originalEvent,n=void 0!==t.changedTouches?t.changedTouches:[t],i=0,s=0;o.touch.end.x=n[0].pageX,o.touch.end.y=n[0].pageY,"fade"===o.settings.mode?(s=Math.abs(o.touch.start.x-o.touch.end.x))>=o.settings.swipeThreshold&&(o.touch.start.x>o.touch.end.x?r.goToNextSlide():r.goToPrevSlide(),r.stopAuto()):("horizontal"===o.settings.mode?(s=o.touch.end.x-o.touch.start.x,i=o.touch.originalPos.left):(s=o.touch.end.y-o.touch.start.y,i=o.touch.originalPos.top),!o.settings.infiniteLoop&&(0===o.active.index&&s>0||o.active.last&&s<0)?b(i,"reset",200):Math.abs(s)>=o.settings.swipeThreshold?(s<0?r.goToNextSlide():r.goToPrevSlide(),r.stopAuto()):b(i,"reset",200)),o.viewport.unbind("touchend MSPointerUp pointerup",B),o.viewport.get(0).releasePointerCapture&&o.viewport.get(0).releasePointerCapture(o.pointerId)},X=function(t){if(o.initialized)if(o.working)window.setTimeout(X,10);else{var n=e(window).width(),i=e(window).height();s===n&&a===i||(s=n,a=i,r.redrawSlider(),o.settings.onSliderResize.call(r,o.active.index))}},U=function(e){var t=g();o.settings.ariaHidden&&!o.settings.ticker&&(o.children.attr("aria-hidden","true"),o.children.slice(e,e+t).attr("aria-hidden","false"))},V=function(e){return e<0?o.settings.infiniteLoop?m()-1:o.active.index:e>=m()?o.settings.infiniteLoop?0:o.active.index:e};return r.goToSlide=function(t,n){var i,s,a,l,c=!0,d=0,u={left:0,top:0},f=null;if(o.oldIndex=o.active.index,o.active.index=V(t),!o.working&&o.active.index!==o.oldIndex){if(o.working=!0,void 0!==(c=o.settings.onSlideBefore.call(r,o.children.eq(o.active.index),o.oldIndex,o.active.index))&&!c)return o.active.index=o.oldIndex,void(o.working=!1);"next"===n?o.settings.onSlideNext.call(r,o.children.eq(o.active.index),o.oldIndex,o.active.index)||(c=!1):"prev"===n&&(o.settings.onSlidePrev.call(r,o.children.eq(o.active.index),o.oldIndex,o.active.index)||(c=!1)),o.active.last=o.active.index>=m()-1,(o.settings.pager||o.settings.pagerCustom)&&P(o.active.index),o.settings.controls&&L(),"fade"===o.settings.mode?(o.settings.adaptiveHeight&&o.viewport.height()!==p()&&o.viewport.animate({height:p()},o.settings.adaptiveHeightSpeed),o.children.filter(":visible").fadeOut(o.settings.speed).css({zIndex:0}),o.children.eq(o.active.index).css("zIndex",o.settings.slideZIndex+1).fadeIn(o.settings.speed,function(){e(this).css("zIndex",o.settings.slideZIndex),A()})):(o.settings.adaptiveHeight&&o.viewport.height()!==p()&&o.viewport.animate({height:p()},o.settings.adaptiveHeightSpeed),!o.settings.infiniteLoop&&o.carousel&&o.active.last?"horizontal"===o.settings.mode?(f=o.children.eq(o.children.length-1),u=f.position(),d=o.viewport.width()-f.outerWidth()):(i=o.children.length-o.settings.minSlides,u=o.children.eq(i).position()):o.carousel&&o.active.last&&"prev"===n?(s=1===o.settings.moveSlides?o.settings.maxSlides-v():(m()-1)*v()-(o.children.length-o.settings.maxSlides),f=r.children(".bx-clone").eq(s),u=f.position()):"next"===n&&0===o.active.index?(u=r.find("> .bx-clone").eq(o.settings.maxSlides).position(),o.active.last=!1):t>=0&&(l=t*parseInt(v()),u=o.children.eq(l).position()),void 0!==u&&(a="horizontal"===o.settings.mode?-(u.left-d):-u.top,b(a,"slide",o.settings.speed)),o.working=!1),o.settings.ariaHidden&&U(o.active.index*v())}},r.goToNextSlide=function(){if((o.settings.infiniteLoop||!o.active.last)&&1!=o.working){var e=parseInt(o.active.index)+1;r.goToSlide(e,"next")}},r.goToPrevSlide=function(){if((o.settings.infiniteLoop||0!==o.active.index)&&1!=o.working){var e=parseInt(o.active.index)-1;r.goToSlide(e,"prev")}},r.startAuto=function(e){o.interval||(o.interval=setInterval(function(){"next"===o.settings.autoDirection?r.goToNextSlide():r.goToPrevSlide()},o.settings.pause),o.settings.onAutoChange.call(r,!0),o.settings.autoControls&&!0!==e&&O("stop"))},r.stopAuto=function(e){o.interval&&(clearInterval(o.interval),o.interval=null,o.settings.onAutoChange.call(r,!1),o.settings.autoControls&&!0!==e&&O("start"))},r.getCurrentSlide=function(){return o.active.index},r.getCurrentSlideElement=function(){return o.children.eq(o.active.index)},r.getSlideElement=function(e){return o.children.eq(e)},r.getSlideCount=function(){return o.children.length},r.isWorking=function(){return o.working},r.redrawSlider=function(){o.children.add(r.find(".bx-clone")).outerWidth(h()),o.viewport.css("height",p()),o.settings.ticker||y(),o.active.last&&(o.active.index=m()-1),o.active.index>=m()&&(o.active.last=!0),o.settings.pager&&!o.settings.pagerCustom&&(w(),P(o.active.index)),o.settings.ariaHidden&&U(o.active.index*v())},r.destroySlider=function(){o.initialized&&(o.initialized=!1,e(".bx-clone",this).remove(),o.children.each(function(){void 0!==e(this).data("origStyle")?e(this).attr("style",e(this).data("origStyle")):e(this).removeAttr("style")}),void 0!==e(this).data("origStyle")?this.attr("style",e(this).data("origStyle")):e(this).removeAttr("style"),e(this).unwrap().unwrap(),o.controls.el&&o.controls.el.remove(),o.controls.next&&o.controls.next.remove(),o.controls.prev&&o.controls.prev.remove(),o.pagerEl&&o.settings.controls&&!o.settings.pagerCustom&&o.pagerEl.remove(),e(".bx-caption",this).remove(),o.controls.autoEl&&o.controls.autoEl.remove(),clearInterval(o.interval),o.settings.responsive&&e(window).unbind("resize",X),o.settings.keyboardEnabled&&e(document).unbind("keydown",q),e(this).removeData("bxSlider"),e(window).off("blur",N).off("focus",I))},r.reloadSlider=function(t){void 0!==t&&(n=t),r.destroySlider(),l(),e(r).data("bxSlider",this)},l(),e(r).data("bxSlider",this),this}}}(jQuery),function(e){"use strict";"function"==typeof define&&define.amd?define(["jquery"],e):"undefined"!=typeof exports?module.exports=e(require("jquery")):e(jQuery)}(function(e){"use strict";var t=window.Slick||{};t=function(){function t(t,i){var o,r=this;r.defaults={accessibility:!0,adaptiveHeight:!1,appendArrows:e(t),appendDots:e(t),arrows:!0,asNavFor:null,prevArrow:'<button class="slick-prev" aria-label="Previous" type="button">Previous</button>',nextArrow:'<button class="slick-next" aria-label="Next" type="button">Next</button>',autoplay:!1,autoplaySpeed:3e3,centerMode:!1,centerPadding:"50px",cssEase:"ease",customPaging:function(t,n){return e('<button type="button" />').text(n+1)},dots:!1,dotsClass:"slick-dots",draggable:!0,easing:"linear",edgeFriction:.35,fade:!1,focusOnSelect:!1,focusOnChange:!1,infinite:!0,initialSlide:0,lazyLoad:"ondemand",mobileFirst:!1,pauseOnHover:!0,pauseOnFocus:!0,pauseOnDotsHover:!1,respondTo:"window",responsive:null,rows:1,rtl:!1,slide:"",slidesPerRow:1,slidesToShow:1,slidesToScroll:1,speed:500,swipe:!0,swipeToSlide:!1,touchMove:!0,touchThreshold:5,useCSS:!0,useTransform:!0,variableWidth:!1,vertical:!1,verticalSwiping:!1,waitForAnimate:!0,zIndex:1e3},r.initials={animating:!1,dragging:!1,autoPlayTimer:null,currentDirection:0,currentLeft:null,currentSlide:0,direction:1,$dots:null,listWidth:null,listHeight:null,loadIndex:0,$nextArrow:null,$prevArrow:null,scrolling:!1,slideCount:null,slideWidth:null,$slideTrack:null,$slides:null,sliding:!1,slideOffset:0,swipeLeft:null,swiping:!1,$list:null,touchObject:{},transformsEnabled:!1,unslicked:!1},e.extend(r,r.initials),r.activeBreakpoint=null,r.animType=null,r.animProp=null,r.breakpoints=[],r.breakpointSettings=[],r.cssTransitions=!1,r.focussed=!1,r.interrupted=!1,r.hidden="hidden",r.paused=!0,r.positionProp=null,r.respondTo=null,r.rowCount=1,r.shouldClick=!0,r.$slider=e(t),r.$slidesCache=null,r.transformType=null,r.transitionType=null,r.visibilityChange="visibilitychange",r.windowWidth=0,r.windowTimer=null,o=e(t).data("slick")||{},r.options=e.extend({},r.defaults,i,o),r.currentSlide=r.options.initialSlide,r.originalSettings=r.options,void 0!==document.mozHidden?(r.hidden="mozHidden",r.visibilityChange="mozvisibilitychange"):void 0!==document.webkitHidden&&(r.hidden="webkitHidden",r.visibilityChange="webkitvisibilitychange"),r.autoPlay=e.proxy(r.autoPlay,r),r.autoPlayClear=e.proxy(r.autoPlayClear,r),r.autoPlayIterator=e.proxy(r.autoPlayIterator,r),r.changeSlide=e.proxy(r.changeSlide,r),r.clickHandler=e.proxy(r.clickHandler,r),r.selectHandler=e.proxy(r.selectHandler,r),r.setPosition=e.proxy(r.setPosition,r),r.swipeHandler=e.proxy(r.swipeHandler,r),r.dragHandler=e.proxy(r.dragHandler,r),r.keyHandler=e.proxy(r.keyHandler,r),r.instanceUid=n++,r.htmlExpr=/^(?:\s*(<[\w\W]+>)[^>]*)$/,r.registerBreakpoints(),r.init(!0)}var n=0;return t}(),t.prototype.activateADA=function(){this.$slideTrack.find(".slick-active").attr({"aria-hidden":"false"}).find("a, input, button, select").attr({tabindex:"0"})},t.prototype.addSlide=t.prototype.slickAdd=function(t,n,i){var o=this;if("boolean"==typeof n)i=n,n=null;else if(n<0||n>=o.slideCount)return!1;o.unload(),"number"==typeof n?0===n&&0===o.$slides.length?e(t).appendTo(o.$slideTrack):i?e(t).insertBefore(o.$slides.eq(n)):e(t).insertAfter(o.$slides.eq(n)):!0===i?e(t).prependTo(o.$slideTrack):e(t).appendTo(o.$slideTrack),o.$slides=o.$slideTrack.children(this.options.slide),o.$slideTrack.children(this.options.slide).detach(),o.$slideTrack.append(o.$slides),o.$slides.each(function(t,n){e(n).attr("data-slick-index",t)}),o.$slidesCache=o.$slides,o.reinit()},t.prototype.animateHeight=function(){var e=this;if(1===e.options.slidesToShow&&!0===e.options.adaptiveHeight&&!1===e.options.vertical){var t=e.$slides.eq(e.currentSlide).outerHeight(!0);e.$list.animate({height:t},e.options.speed)}},t.prototype.animateSlide=function(t,n){var i={},o=this;o.animateHeight(),!0===o.options.rtl&&!1===o.options.vertical&&(t=-t),!1===o.transformsEnabled?!1===o.options.vertical?o.$slideTrack.animate({left:t},o.options.speed,o.options.easing,n):o.$slideTrack.animate({top:t},o.options.speed,o.options.easing,n):!1===o.cssTransitions?(!0===o.options.rtl&&(o.currentLeft=-o.currentLeft),e({animStart:o.currentLeft}).animate({animStart:t},{duration:o.options.speed,easing:o.options.easing,step:function(e){e=Math.ceil(e),!1===o.options.vertical?(i[o.animType]="translate("+e+"px, 0px)",o.$slideTrack.css(i)):(i[o.animType]="translate(0px,"+e+"px)",o.$slideTrack.css(i))},complete:function(){n&&n.call()}})):(o.applyTransition(),t=Math.ceil(t),!1===o.options.vertical?i[o.animType]="translate3d("+t+"px, 0px, 0px)":i[o.animType]="translate3d(0px,"+t+"px, 0px)",o.$slideTrack.css(i),n&&setTimeout(function(){o.disableTransition(),n.call()},o.options.speed))},t.prototype.getNavTarget=function(){var t=this,n=t.options.asNavFor;return n&&null!==n&&(n=e(n).not(t.$slider)),n},t.prototype.asNavFor=function(t){var n=this,i=n.getNavTarget();null!==i&&"object"==typeof i&&i.each(function(){var n=e(this).slick("getSlick");n.unslicked||n.slideHandler(t,!0)})},t.prototype.applyTransition=function(e){var t=this,n={};!1===t.options.fade?n[t.transitionType]=t.transformType+" "+t.options.speed+"ms "+t.options.cssEase:n[t.transitionType]="opacity "+t.options.speed+"ms "+t.options.cssEase,!1===t.options.fade?t.$slideTrack.css(n):t.$slides.eq(e).css(n)},t.prototype.autoPlay=function(){var e=this;e.autoPlayClear(),e.slideCount>e.options.slidesToShow&&(e.autoPlayTimer=setInterval(e.autoPlayIterator,e.options.autoplaySpeed))},t.prototype.autoPlayClear=function(){var e=this;e.autoPlayTimer&&clearInterval(e.autoPlayTimer)},t.prototype.autoPlayIterator=function(){var e=this,t=e.currentSlide+e.options.slidesToScroll;e.paused||e.interrupted||e.focussed||(!1===e.options.infinite&&(1===e.direction&&e.currentSlide+1===e.slideCount-1?e.direction=0:0===e.direction&&(t=e.currentSlide-e.options.slidesToScroll,e.currentSlide-1==0&&(e.direction=1))),e.slideHandler(t))},t.prototype.buildArrows=function(){var t=this;!0===t.options.arrows&&(t.$prevArrow=e(t.options.prevArrow).addClass("slick-arrow"),t.$nextArrow=e(t.options.nextArrow).addClass("slick-arrow"),t.slideCount>t.options.slidesToShow?(t.$prevArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"),t.$nextArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"),t.htmlExpr.test(t.options.prevArrow)&&t.$prevArrow.prependTo(t.options.appendArrows),t.htmlExpr.test(t.options.nextArrow)&&t.$nextArrow.appendTo(t.options.appendArrows),!0!==t.options.infinite&&t.$prevArrow.addClass("slick-disabled").attr("aria-disabled","true")):t.$prevArrow.add(t.$nextArrow).addClass("slick-hidden").attr({"aria-disabled":"true",tabindex:"-1"}))},t.prototype.buildDots=function(){var t,n,i=this;if(!0===i.options.dots&&i.slideCount>i.options.slidesToShow){for(i.$slider.addClass("slick-dotted"),n=e("<ul />").addClass(i.options.dotsClass),t=0;t<=i.getDotCount();t+=1)n.append(e("<li />").append(i.options.customPaging.call(this,i,t)));i.$dots=n.appendTo(i.options.appendDots),i.$dots.find("li").first().addClass("slick-active")}},t.prototype.buildOut=function(){var t=this;t.$slides=t.$slider.children(t.options.slide+":not(.slick-cloned)").addClass("slick-slide"),t.slideCount=t.$slides.length,t.$slides.each(function(t,n){e(n).attr("data-slick-index",t).data("originalStyling",e(n).attr("style")||"")}),t.$slider.addClass("slick-slider"),t.$slideTrack=0===t.slideCount?e('<div class="slick-track"/>').appendTo(t.$slider):t.$slides.wrapAll('<div class="slick-track"/>').parent(),t.$list=t.$slideTrack.wrap('<div class="slick-list"/>').parent(),t.$slideTrack.css("opacity",0),!0!==t.options.centerMode&&!0!==t.options.swipeToSlide||(t.options.slidesToScroll=1),e("img[data-lazy]",t.$slider).not("[src]").addClass("slick-loading"),t.setupInfinite(),t.buildArrows(),t.buildDots(),t.updateDots(),t.setSlideClasses("number"==typeof t.currentSlide?t.currentSlide:0),!0===t.options.draggable&&t.$list.addClass("draggable")},t.prototype.buildRows=function(){var e,t,n,i,o,r,s,a=this;if(i=document.createDocumentFragment(),r=a.$slider.children(),a.options.rows>0){for(s=a.options.slidesPerRow*a.options.rows,o=Math.ceil(r.length/s),e=0;e<o;e++){var l=document.createElement("div");for(t=0;t<a.options.rows;t++){var c=document.createElement("div");for(n=0;n<a.options.slidesPerRow;n++){var d=e*s+(t*a.options.slidesPerRow+n);r.get(d)&&c.appendChild(r.get(d))}l.appendChild(c)}i.appendChild(l)}a.$slider.empty().append(i),a.$slider.children().children().children().css({width:100/a.options.slidesPerRow+"%",display:"inline-block"})}},t.prototype.checkResponsive=function(t,n){var i,o,r,s=this,a=!1,l=s.$slider.width(),c=window.innerWidth||e(window).width();if("window"===s.respondTo?r=c:"slider"===s.respondTo?r=l:"min"===s.respondTo&&(r=Math.min(c,l)),s.options.responsive&&s.options.responsive.length&&null!==s.options.responsive){o=null;for(i in s.breakpoints)s.breakpoints.hasOwnProperty(i)&&(!1===s.originalSettings.mobileFirst?r<s.breakpoints[i]&&(o=s.breakpoints[i]):r>s.breakpoints[i]&&(o=s.breakpoints[i]));null!==o?null!==s.activeBreakpoint?(o!==s.activeBreakpoint||n)&&(s.activeBreakpoint=o,"unslick"===s.breakpointSettings[o]?s.unslick(o):(s.options=e.extend({},s.originalSettings,s.breakpointSettings[o]),!0===t&&(s.currentSlide=s.options.initialSlide),s.refresh(t)),a=o):(s.activeBreakpoint=o,"unslick"===s.breakpointSettings[o]?s.unslick(o):(s.options=e.extend({},s.originalSettings,s.breakpointSettings[o]),!0===t&&(s.currentSlide=s.options.initialSlide),s.refresh(t)),a=o):null!==s.activeBreakpoint&&(s.activeBreakpoint=null,s.options=s.originalSettings,!0===t&&(s.currentSlide=s.options.initialSlide),s.refresh(t),a=o),t||!1===a||s.$slider.trigger("breakpoint",[s,a])}},t.prototype.changeSlide=function(t,n){var i,o,r,s=this,a=e(t.currentTarget);switch(a.is("a")&&t.preventDefault(),a.is("li")||(a=a.closest("li")),r=s.slideCount%s.options.slidesToScroll!=0,i=r?0:(s.slideCount-s.currentSlide)%s.options.slidesToScroll,t.data.message){case"previous":o=0===i?s.options.slidesToScroll:s.options.slidesToShow-i,s.slideCount>s.options.slidesToShow&&s.slideHandler(s.currentSlide-o,!1,n);break;case"next":o=0===i?s.options.slidesToScroll:i,s.slideCount>s.options.slidesToShow&&s.slideHandler(s.currentSlide+o,!1,n);break;case"index":var l=0===t.data.index?0:t.data.index||a.index()*s.options.slidesToScroll;s.slideHandler(s.checkNavigable(l),!1,n),a.children().trigger("focus");break;default:return}},t.prototype.checkNavigable=function(e){var t,n,i=this;if(t=i.getNavigableIndexes(),n=0,e>t[t.length-1])e=t[t.length-1];else for(var o in t){if(e<t[o]){e=n;break}n=t[o]}return e},t.prototype.cleanUpEvents=function(){var t=this;t.options.dots&&null!==t.$dots&&(e("li",t.$dots).off("click.slick",t.changeSlide).off("mouseenter.slick",e.proxy(t.interrupt,t,!0)).off("mouseleave.slick",e.proxy(t.interrupt,t,!1)),!0===t.options.accessibility&&t.$dots.off("keydown.slick",t.keyHandler)),t.$slider.off("focus.slick blur.slick"),!0===t.options.arrows&&t.slideCount>t.options.slidesToShow&&(t.$prevArrow&&t.$prevArrow.off("click.slick",t.changeSlide),t.$nextArrow&&t.$nextArrow.off("click.slick",t.changeSlide),!0===t.options.accessibility&&(t.$prevArrow&&t.$prevArrow.off("keydown.slick",t.keyHandler),t.$nextArrow&&t.$nextArrow.off("keydown.slick",t.keyHandler))),t.$list.off("touchstart.slick mousedown.slick",t.swipeHandler),t.$list.off("touchmove.slick mousemove.slick",t.swipeHandler),t.$list.off("touchend.slick mouseup.slick",t.swipeHandler),t.$list.off("touchcancel.slick mouseleave.slick",t.swipeHandler),t.$list.off("click.slick",t.clickHandler),e(document).off(t.visibilityChange,t.visibility),t.cleanUpSlideEvents(),!0===t.options.accessibility&&t.$list.off("keydown.slick",t.keyHandler),!0===t.options.focusOnSelect&&e(t.$slideTrack).children().off("click.slick",t.selectHandler),e(window).off("orientationchange.slick.slick-"+t.instanceUid,t.orientationChange),e(window).off("resize.slick.slick-"+t.instanceUid,t.resize),e("[draggable!=true]",t.$slideTrack).off("dragstart",t.preventDefault),e(window).off("load.slick.slick-"+t.instanceUid,t.setPosition)},t.prototype.cleanUpSlideEvents=function(){var t=this;t.$list.off("mouseenter.slick",e.proxy(t.interrupt,t,!0)),t.$list.off("mouseleave.slick",e.proxy(t.interrupt,t,!1))},t.prototype.cleanUpRows=function(){var e,t=this;t.options.rows>0&&(e=t.$slides.children().children(),e.removeAttr("style"),t.$slider.empty().append(e))},t.prototype.clickHandler=function(e){!1===this.shouldClick&&(e.stopImmediatePropagation(),e.stopPropagation(),e.preventDefault())},t.prototype.destroy=function(t){var n=this;n.autoPlayClear(),n.touchObject={},n.cleanUpEvents(),e(".slick-cloned",n.$slider).detach(),n.$dots&&n.$dots.remove(),n.$prevArrow&&n.$prevArrow.length&&(n.$prevArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display",""),n.htmlExpr.test(n.options.prevArrow)&&n.$prevArrow.remove()),n.$nextArrow&&n.$nextArrow.length&&(n.$nextArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display",""),n.htmlExpr.test(n.options.nextArrow)&&n.$nextArrow.remove()),n.$slides&&(n.$slides.removeClass("slick-slide slick-active slick-center slick-visible slick-current").removeAttr("aria-hidden").removeAttr("data-slick-index").each(function(){e(this).attr("style",e(this).data("originalStyling"))}),n.$slideTrack.children(this.options.slide).detach(),n.$slideTrack.detach(),n.$list.detach(),n.$slider.append(n.$slides)),n.cleanUpRows(),n.$slider.removeClass("slick-slider"),n.$slider.removeClass("slick-initialized"),n.$slider.removeClass("slick-dotted"),n.unslicked=!0,t||n.$slider.trigger("destroy",[n])},t.prototype.disableTransition=function(e){var t=this,n={};n[t.transitionType]="",!1===t.options.fade?t.$slideTrack.css(n):t.$slides.eq(e).css(n)},t.prototype.fadeSlide=function(e,t){var n=this;!1===n.cssTransitions?(n.$slides.eq(e).css({zIndex:n.options.zIndex}),n.$slides.eq(e).animate({opacity:1},n.options.speed,n.options.easing,t)):(n.applyTransition(e),n.$slides.eq(e).css({opacity:1,zIndex:n.options.zIndex}),t&&setTimeout(function(){n.disableTransition(e),t.call()},n.options.speed))},t.prototype.fadeSlideOut=function(e){var t=this;!1===t.cssTransitions?t.$slides.eq(e).animate({opacity:0,zIndex:t.options.zIndex-2},t.options.speed,t.options.easing):(t.applyTransition(e),t.$slides.eq(e).css({opacity:0,zIndex:t.options.zIndex-2}))},t.prototype.filterSlides=t.prototype.slickFilter=function(e){var t=this;null!==e&&(t.$slidesCache=t.$slides,t.unload(),t.$slideTrack.children(this.options.slide).detach(),t.$slidesCache.filter(e).appendTo(t.$slideTrack),t.reinit())},t.prototype.focusHandler=function(){var t=this;t.$slider.off("focus.slick blur.slick").on("focus.slick blur.slick","*",function(n){n.stopImmediatePropagation();var i=e(this);setTimeout(function(){t.options.pauseOnFocus&&(t.focussed=i.is(":focus"),t.autoPlay())},0)})},t.prototype.getCurrent=t.prototype.slickCurrentSlide=function(){return this.currentSlide},t.prototype.getDotCount=function(){var e=this,t=0,n=0,i=0;if(!0===e.options.infinite)if(e.slideCount<=e.options.slidesToShow)++i;else for(;t<e.slideCount;)++i,t=n+e.options.slidesToScroll,n+=e.options.slidesToScroll<=e.options.slidesToShow?e.options.slidesToScroll:e.options.slidesToShow;else if(!0===e.options.centerMode)i=e.slideCount;else if(e.options.asNavFor)for(;t<e.slideCount;)++i,t=n+e.options.slidesToScroll,n+=e.options.slidesToScroll<=e.options.slidesToShow?e.options.slidesToScroll:e.options.slidesToShow;else i=1+Math.ceil((e.slideCount-e.options.slidesToShow)/e.options.slidesToScroll);return i-1},t.prototype.getLeft=function(e){var t,n,i,o,r=this,s=0;return r.slideOffset=0,n=r.$slides.first().outerHeight(!0),!0===r.options.infinite?(r.slideCount>r.options.slidesToShow&&(r.slideOffset=r.slideWidth*r.options.slidesToShow*-1,o=-1,!0===r.options.vertical&&!0===r.options.centerMode&&(2===r.options.slidesToShow?o=-1.5:1===r.options.slidesToShow&&(o=-2)),s=n*r.options.slidesToShow*o),r.slideCount%r.options.slidesToScroll!=0&&e+r.options.slidesToScroll>r.slideCount&&r.slideCount>r.options.slidesToShow&&(e>r.slideCount?(r.slideOffset=(r.options.slidesToShow-(e-r.slideCount))*r.slideWidth*-1,s=(r.options.slidesToShow-(e-r.slideCount))*n*-1):(r.slideOffset=r.slideCount%r.options.slidesToScroll*r.slideWidth*-1,s=r.slideCount%r.options.slidesToScroll*n*-1))):e+r.options.slidesToShow>r.slideCount&&(r.slideOffset=(e+r.options.slidesToShow-r.slideCount)*r.slideWidth,s=(e+r.options.slidesToShow-r.slideCount)*n),r.slideCount<=r.options.slidesToShow&&(r.slideOffset=0,s=0),!0===r.options.centerMode&&r.slideCount<=r.options.slidesToShow?r.slideOffset=r.slideWidth*Math.floor(r.options.slidesToShow)/2-r.slideWidth*r.slideCount/2:!0===r.options.centerMode&&!0===r.options.infinite?r.slideOffset+=r.slideWidth*Math.floor(r.options.slidesToShow/2)-r.slideWidth:!0===r.options.centerMode&&(r.slideOffset=0,r.slideOffset+=r.slideWidth*Math.floor(r.options.slidesToShow/2)),t=!1===r.options.vertical?e*r.slideWidth*-1+r.slideOffset:e*n*-1+s,!0===r.options.variableWidth&&(i=r.slideCount<=r.options.slidesToShow||!1===r.options.infinite?r.$slideTrack.children(".slick-slide").eq(e):r.$slideTrack.children(".slick-slide").eq(e+r.options.slidesToShow),t=!0===r.options.rtl?i[0]?-1*(r.$slideTrack.width()-i[0].offsetLeft-i.width()):0:i[0]?-1*i[0].offsetLeft:0,
!0===r.options.centerMode&&(i=r.slideCount<=r.options.slidesToShow||!1===r.options.infinite?r.$slideTrack.children(".slick-slide").eq(e):r.$slideTrack.children(".slick-slide").eq(e+r.options.slidesToShow+1),t=!0===r.options.rtl?i[0]?-1*(r.$slideTrack.width()-i[0].offsetLeft-i.width()):0:i[0]?-1*i[0].offsetLeft:0,t+=(r.$list.width()-i.outerWidth())/2)),t},t.prototype.getOption=t.prototype.slickGetOption=function(e){return this.options[e]},t.prototype.getNavigableIndexes=function(){var e,t=this,n=0,i=0,o=[];for(!1===t.options.infinite?e=t.slideCount:(n=-1*t.options.slidesToScroll,i=-1*t.options.slidesToScroll,e=2*t.slideCount);n<e;)o.push(n),n=i+t.options.slidesToScroll,i+=t.options.slidesToScroll<=t.options.slidesToShow?t.options.slidesToScroll:t.options.slidesToShow;return o},t.prototype.getSlick=function(){return this},t.prototype.getSlideCount=function(){var t,n,i=this;return n=!0===i.options.centerMode?i.slideWidth*Math.floor(i.options.slidesToShow/2):0,!0===i.options.swipeToSlide?(i.$slideTrack.find(".slick-slide").each(function(o,r){if(r.offsetLeft-n+e(r).outerWidth()/2>-1*i.swipeLeft)return t=r,!1}),Math.abs(e(t).attr("data-slick-index")-i.currentSlide)||1):i.options.slidesToScroll},t.prototype.goTo=t.prototype.slickGoTo=function(e,t){this.changeSlide({data:{message:"index",index:parseInt(e)}},t)},t.prototype.init=function(t){var n=this;e(n.$slider).hasClass("slick-initialized")||(e(n.$slider).addClass("slick-initialized"),n.buildRows(),n.buildOut(),n.setProps(),n.startLoad(),n.loadSlider(),n.initializeEvents(),n.updateArrows(),n.updateDots(),n.checkResponsive(!0),n.focusHandler()),t&&n.$slider.trigger("init",[n]),!0===n.options.accessibility&&n.initADA(),n.options.autoplay&&(n.paused=!1,n.autoPlay())},t.prototype.initADA=function(){var t=this,n=Math.ceil(t.slideCount/t.options.slidesToShow),i=t.getNavigableIndexes().filter(function(e){return e>=0&&e<t.slideCount});t.$slides.add(t.$slideTrack.find(".slick-cloned")).attr({"aria-hidden":"true",tabindex:"-1"}).find("a, input, button, select").attr({tabindex:"-1"}),null!==t.$dots&&(t.$slides.not(t.$slideTrack.find(".slick-cloned")).each(function(n){var o=i.indexOf(n);if(e(this).attr({role:"tabpanel",id:"slick-slide"+t.instanceUid+n,tabindex:-1}),-1!==o){var r="slick-slide-control"+t.instanceUid+o;e("#"+r).length&&e(this).attr({"aria-describedby":r})}}),t.$dots.attr("role","tablist").find("li").each(function(o){var r=i[o];e(this).attr({role:"presentation"}),e(this).find("button").first().attr({role:"tab",id:"slick-slide-control"+t.instanceUid+o,"aria-controls":"slick-slide"+t.instanceUid+r,"aria-label":o+1+" of "+n,"aria-selected":null,tabindex:"-1"})}).eq(t.currentSlide).find("button").attr({"aria-selected":"true",tabindex:"0"}).end());for(var o=t.currentSlide,r=o+t.options.slidesToShow;o<r;o++)t.options.focusOnChange?t.$slides.eq(o).attr({tabindex:"0"}):t.$slides.eq(o).removeAttr("tabindex");t.activateADA()},t.prototype.initArrowEvents=function(){var e=this;!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&(e.$prevArrow.off("click.slick").on("click.slick",{message:"previous"},e.changeSlide),e.$nextArrow.off("click.slick").on("click.slick",{message:"next"},e.changeSlide),!0===e.options.accessibility&&(e.$prevArrow.on("keydown.slick",e.keyHandler),e.$nextArrow.on("keydown.slick",e.keyHandler)))},t.prototype.initDotEvents=function(){var t=this;!0===t.options.dots&&t.slideCount>t.options.slidesToShow&&(e("li",t.$dots).on("click.slick",{message:"index"},t.changeSlide),!0===t.options.accessibility&&t.$dots.on("keydown.slick",t.keyHandler)),!0===t.options.dots&&!0===t.options.pauseOnDotsHover&&t.slideCount>t.options.slidesToShow&&e("li",t.$dots).on("mouseenter.slick",e.proxy(t.interrupt,t,!0)).on("mouseleave.slick",e.proxy(t.interrupt,t,!1))},t.prototype.initSlideEvents=function(){var t=this;t.options.pauseOnHover&&(t.$list.on("mouseenter.slick",e.proxy(t.interrupt,t,!0)),t.$list.on("mouseleave.slick",e.proxy(t.interrupt,t,!1)))},t.prototype.initializeEvents=function(){var t=this;t.initArrowEvents(),t.initDotEvents(),t.initSlideEvents(),t.$list.on("touchstart.slick mousedown.slick",{action:"start"},t.swipeHandler),t.$list.on("touchmove.slick mousemove.slick",{action:"move"},t.swipeHandler),t.$list.on("touchend.slick mouseup.slick",{action:"end"},t.swipeHandler),t.$list.on("touchcancel.slick mouseleave.slick",{action:"end"},t.swipeHandler),t.$list.on("click.slick",t.clickHandler),e(document).on(t.visibilityChange,e.proxy(t.visibility,t)),!0===t.options.accessibility&&t.$list.on("keydown.slick",t.keyHandler),!0===t.options.focusOnSelect&&e(t.$slideTrack).children().on("click.slick",t.selectHandler),e(window).on("orientationchange.slick.slick-"+t.instanceUid,e.proxy(t.orientationChange,t)),e(window).on("resize.slick.slick-"+t.instanceUid,e.proxy(t.resize,t)),e("[draggable!=true]",t.$slideTrack).on("dragstart",t.preventDefault),e(window).on("load.slick.slick-"+t.instanceUid,t.setPosition),e(t.setPosition)},t.prototype.initUI=function(){var e=this;!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&(e.$prevArrow.show(),e.$nextArrow.show()),!0===e.options.dots&&e.slideCount>e.options.slidesToShow&&e.$dots.show()},t.prototype.keyHandler=function(e){var t=this;e.target.tagName.match("TEXTAREA|INPUT|SELECT")||(37===e.keyCode&&!0===t.options.accessibility?t.changeSlide({data:{message:!0===t.options.rtl?"next":"previous"}}):39===e.keyCode&&!0===t.options.accessibility&&t.changeSlide({data:{message:!0===t.options.rtl?"previous":"next"}}))},t.prototype.lazyLoad=function(){function t(t){e("img[data-lazy]",t).each(function(){var t=e(this),n=e(this).attr("data-lazy"),i=e(this).attr("data-srcset"),o=e(this).attr("data-sizes")||s.$slider.attr("data-sizes"),r=document.createElement("img");r.onload=function(){t.animate({opacity:0},100,function(){i&&(t.attr("srcset",i),o&&t.attr("sizes",o)),t.attr("src",n).animate({opacity:1},200,function(){t.removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading")}),s.$slider.trigger("lazyLoaded",[s,t,n])})},r.onerror=function(){t.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"),s.$slider.trigger("lazyLoadError",[s,t,n])},r.src=n})}var n,i,o,r,s=this;if(!0===s.options.centerMode?!0===s.options.infinite?(o=s.currentSlide+(s.options.slidesToShow/2+1),r=o+s.options.slidesToShow+2):(o=Math.max(0,s.currentSlide-(s.options.slidesToShow/2+1)),r=s.options.slidesToShow/2+1+2+s.currentSlide):(o=s.options.infinite?s.options.slidesToShow+s.currentSlide:s.currentSlide,r=Math.ceil(o+s.options.slidesToShow),!0===s.options.fade&&(o>0&&o--,r<=s.slideCount&&r++)),n=s.$slider.find(".slick-slide").slice(o,r),"anticipated"===s.options.lazyLoad)for(var a=o-1,l=r,c=s.$slider.find(".slick-slide"),d=0;d<s.options.slidesToScroll;d++)a<0&&(a=s.slideCount-1),n=n.add(c.eq(a)),n=n.add(c.eq(l)),a--,l++;t(n),s.slideCount<=s.options.slidesToShow?(i=s.$slider.find(".slick-slide"),t(i)):s.currentSlide>=s.slideCount-s.options.slidesToShow?(i=s.$slider.find(".slick-cloned").slice(0,s.options.slidesToShow),t(i)):0===s.currentSlide&&(i=s.$slider.find(".slick-cloned").slice(-1*s.options.slidesToShow),t(i))},t.prototype.loadSlider=function(){var e=this;e.setPosition(),e.$slideTrack.css({opacity:1}),e.$slider.removeClass("slick-loading"),e.initUI(),"progressive"===e.options.lazyLoad&&e.progressiveLazyLoad()},t.prototype.next=t.prototype.slickNext=function(){this.changeSlide({data:{message:"next"}})},t.prototype.orientationChange=function(){var e=this;e.checkResponsive(),e.setPosition()},t.prototype.pause=t.prototype.slickPause=function(){var e=this;e.autoPlayClear(),e.paused=!0},t.prototype.play=t.prototype.slickPlay=function(){var e=this;e.autoPlay(),e.options.autoplay=!0,e.paused=!1,e.focussed=!1,e.interrupted=!1},t.prototype.postSlide=function(t){var n=this;if(!n.unslicked&&(n.$slider.trigger("afterChange",[n,t]),n.animating=!1,n.slideCount>n.options.slidesToShow&&n.setPosition(),n.swipeLeft=null,n.options.autoplay&&n.autoPlay(),!0===n.options.accessibility&&(n.initADA(),n.options.focusOnChange))){e(n.$slides.get(n.currentSlide)).attr("tabindex",0).focus()}},t.prototype.prev=t.prototype.slickPrev=function(){this.changeSlide({data:{message:"previous"}})},t.prototype.preventDefault=function(e){e.preventDefault()},t.prototype.progressiveLazyLoad=function(t){t=t||1;var n,i,o,r,s,a=this,l=e("img[data-lazy]",a.$slider);l.length?(n=l.first(),i=n.attr("data-lazy"),o=n.attr("data-srcset"),r=n.attr("data-sizes")||a.$slider.attr("data-sizes"),s=document.createElement("img"),s.onload=function(){o&&(n.attr("srcset",o),r&&n.attr("sizes",r)),n.attr("src",i).removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading"),!0===a.options.adaptiveHeight&&a.setPosition(),a.$slider.trigger("lazyLoaded",[a,n,i]),a.progressiveLazyLoad()},s.onerror=function(){t<3?setTimeout(function(){a.progressiveLazyLoad(t+1)},500):(n.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"),a.$slider.trigger("lazyLoadError",[a,n,i]),a.progressiveLazyLoad())},s.src=i):a.$slider.trigger("allImagesLoaded",[a])},t.prototype.refresh=function(t){var n,i,o=this;i=o.slideCount-o.options.slidesToShow,!o.options.infinite&&o.currentSlide>i&&(o.currentSlide=i),o.slideCount<=o.options.slidesToShow&&(o.currentSlide=0),n=o.currentSlide,o.destroy(!0),e.extend(o,o.initials,{currentSlide:n}),o.init(),t||o.changeSlide({data:{message:"index",index:n}},!1)},t.prototype.registerBreakpoints=function(){var t,n,i,o=this,r=o.options.responsive||null;if("array"===e.type(r)&&r.length){o.respondTo=o.options.respondTo||"window";for(t in r)if(i=o.breakpoints.length-1,r.hasOwnProperty(t)){for(n=r[t].breakpoint;i>=0;)o.breakpoints[i]&&o.breakpoints[i]===n&&o.breakpoints.splice(i,1),i--;o.breakpoints.push(n),o.breakpointSettings[n]=r[t].settings}o.breakpoints.sort(function(e,t){return o.options.mobileFirst?e-t:t-e})}},t.prototype.reinit=function(){var t=this;t.$slides=t.$slideTrack.children(t.options.slide).addClass("slick-slide"),t.slideCount=t.$slides.length,t.currentSlide>=t.slideCount&&0!==t.currentSlide&&(t.currentSlide=t.currentSlide-t.options.slidesToScroll),t.slideCount<=t.options.slidesToShow&&(t.currentSlide=0),t.registerBreakpoints(),t.setProps(),t.setupInfinite(),t.buildArrows(),t.updateArrows(),t.initArrowEvents(),t.buildDots(),t.updateDots(),t.initDotEvents(),t.cleanUpSlideEvents(),t.initSlideEvents(),t.checkResponsive(!1,!0),!0===t.options.focusOnSelect&&e(t.$slideTrack).children().on("click.slick",t.selectHandler),t.setSlideClasses("number"==typeof t.currentSlide?t.currentSlide:0),t.setPosition(),t.focusHandler(),t.paused=!t.options.autoplay,t.autoPlay(),t.$slider.trigger("reInit",[t])},t.prototype.resize=function(){var t=this;e(window).width()!==t.windowWidth&&(clearTimeout(t.windowDelay),t.windowDelay=window.setTimeout(function(){t.windowWidth=e(window).width(),t.checkResponsive(),t.unslicked||t.setPosition()},50))},t.prototype.removeSlide=t.prototype.slickRemove=function(e,t,n){var i=this;if("boolean"==typeof e?(t=e,e=!0===t?0:i.slideCount-1):e=!0===t?--e:e,i.slideCount<1||e<0||e>i.slideCount-1)return!1;i.unload(),!0===n?i.$slideTrack.children().remove():i.$slideTrack.children(this.options.slide).eq(e).remove(),i.$slides=i.$slideTrack.children(this.options.slide),i.$slideTrack.children(this.options.slide).detach(),i.$slideTrack.append(i.$slides),i.$slidesCache=i.$slides,i.reinit()},t.prototype.setCSS=function(e){var t,n,i=this,o={};!0===i.options.rtl&&(e=-e),t="left"==i.positionProp?Math.ceil(e)+"px":"0px",n="top"==i.positionProp?Math.ceil(e)+"px":"0px",o[i.positionProp]=e,!1===i.transformsEnabled?i.$slideTrack.css(o):(o={},!1===i.cssTransitions?(o[i.animType]="translate("+t+", "+n+")",i.$slideTrack.css(o)):(o[i.animType]="translate3d("+t+", "+n+", 0px)",i.$slideTrack.css(o)))},t.prototype.setDimensions=function(){var e=this;!1===e.options.vertical?!0===e.options.centerMode&&e.$list.css({padding:"0px "+e.options.centerPadding}):(e.$list.height(e.$slides.first().outerHeight(!0)*e.options.slidesToShow),!0===e.options.centerMode&&e.$list.css({padding:e.options.centerPadding+" 0px"})),e.listWidth=e.$list.width(),e.listHeight=e.$list.height(),!1===e.options.vertical&&!1===e.options.variableWidth?(e.slideWidth=Math.ceil(e.listWidth/e.options.slidesToShow),e.$slideTrack.width(Math.ceil(e.slideWidth*e.$slideTrack.children(".slick-slide").length))):!0===e.options.variableWidth?e.$slideTrack.width(5e3*e.slideCount):(e.slideWidth=Math.ceil(e.listWidth),e.$slideTrack.height(Math.ceil(e.$slides.first().outerHeight(!0)*e.$slideTrack.children(".slick-slide").length)));var t=e.$slides.first().outerWidth(!0)-e.$slides.first().width();!1===e.options.variableWidth&&e.$slideTrack.children(".slick-slide").width(e.slideWidth-t)},t.prototype.setFade=function(){var t,n=this;n.$slides.each(function(i,o){t=n.slideWidth*i*-1,!0===n.options.rtl?e(o).css({position:"relative",right:t,top:0,zIndex:n.options.zIndex-2,opacity:0}):e(o).css({position:"relative",left:t,top:0,zIndex:n.options.zIndex-2,opacity:0})}),n.$slides.eq(n.currentSlide).css({zIndex:n.options.zIndex-1,opacity:1})},t.prototype.setHeight=function(){var e=this;if(1===e.options.slidesToShow&&!0===e.options.adaptiveHeight&&!1===e.options.vertical){var t=e.$slides.eq(e.currentSlide).outerHeight(!0);e.$list.css("height",t)}},t.prototype.setOption=t.prototype.slickSetOption=function(){var t,n,i,o,r,s=this,a=!1;if("object"===e.type(arguments[0])?(i=arguments[0],a=arguments[1],r="multiple"):"string"===e.type(arguments[0])&&(i=arguments[0],o=arguments[1],a=arguments[2],"responsive"===arguments[0]&&"array"===e.type(arguments[1])?r="responsive":void 0!==arguments[1]&&(r="single")),"single"===r)s.options[i]=o;else if("multiple"===r)e.each(i,function(e,t){s.options[e]=t});else if("responsive"===r)for(n in o)if("array"!==e.type(s.options.responsive))s.options.responsive=[o[n]];else{for(t=s.options.responsive.length-1;t>=0;)s.options.responsive[t].breakpoint===o[n].breakpoint&&s.options.responsive.splice(t,1),t--;s.options.responsive.push(o[n])}a&&(s.unload(),s.reinit())},t.prototype.setPosition=function(){var e=this;e.setDimensions(),e.setHeight(),!1===e.options.fade?e.setCSS(e.getLeft(e.currentSlide)):e.setFade(),e.$slider.trigger("setPosition",[e])},t.prototype.setProps=function(){var e=this,t=document.body.style;e.positionProp=!0===e.options.vertical?"top":"left","top"===e.positionProp?e.$slider.addClass("slick-vertical"):e.$slider.removeClass("slick-vertical"),void 0===t.WebkitTransition&&void 0===t.MozTransition&&void 0===t.msTransition||!0===e.options.useCSS&&(e.cssTransitions=!0),e.options.fade&&("number"==typeof e.options.zIndex?e.options.zIndex<3&&(e.options.zIndex=3):e.options.zIndex=e.defaults.zIndex),void 0!==t.OTransform&&(e.animType="OTransform",e.transformType="-o-transform",e.transitionType="OTransition",void 0===t.perspectiveProperty&&void 0===t.webkitPerspective&&(e.animType=!1)),void 0!==t.MozTransform&&(e.animType="MozTransform",e.transformType="-moz-transform",e.transitionType="MozTransition",void 0===t.perspectiveProperty&&void 0===t.MozPerspective&&(e.animType=!1)),void 0!==t.webkitTransform&&(e.animType="webkitTransform",e.transformType="-webkit-transform",e.transitionType="webkitTransition",void 0===t.perspectiveProperty&&void 0===t.webkitPerspective&&(e.animType=!1)),void 0!==t.msTransform&&(e.animType="msTransform",e.transformType="-ms-transform",e.transitionType="msTransition",void 0===t.msTransform&&(e.animType=!1)),void 0!==t.transform&&!1!==e.animType&&(e.animType="transform",e.transformType="transform",e.transitionType="transition"),e.transformsEnabled=e.options.useTransform&&null!==e.animType&&!1!==e.animType},t.prototype.setSlideClasses=function(e){var t,n,i,o,r=this;if(n=r.$slider.find(".slick-slide").removeClass("slick-active slick-center slick-current").attr("aria-hidden","true"),r.$slides.eq(e).addClass("slick-current"),!0===r.options.centerMode){var s=r.options.slidesToShow%2==0?1:0;t=Math.floor(r.options.slidesToShow/2),!0===r.options.infinite&&(e>=t&&e<=r.slideCount-1-t?r.$slides.slice(e-t+s,e+t+1).addClass("slick-active").attr("aria-hidden","false"):(i=r.options.slidesToShow+e,n.slice(i-t+1+s,i+t+2).addClass("slick-active").attr("aria-hidden","false")),0===e?n.eq(n.length-1-r.options.slidesToShow).addClass("slick-center"):e===r.slideCount-1&&n.eq(r.options.slidesToShow).addClass("slick-center")),r.$slides.eq(e).addClass("slick-center")}else e>=0&&e<=r.slideCount-r.options.slidesToShow?r.$slides.slice(e,e+r.options.slidesToShow).addClass("slick-active").attr("aria-hidden","false"):n.length<=r.options.slidesToShow?n.addClass("slick-active").attr("aria-hidden","false"):(o=r.slideCount%r.options.slidesToShow,i=!0===r.options.infinite?r.options.slidesToShow+e:e,r.options.slidesToShow==r.options.slidesToScroll&&r.slideCount-e<r.options.slidesToShow?n.slice(i-(r.options.slidesToShow-o),i+o).addClass("slick-active").attr("aria-hidden","false"):n.slice(i,i+r.options.slidesToShow).addClass("slick-active").attr("aria-hidden","false"));"ondemand"!==r.options.lazyLoad&&"anticipated"!==r.options.lazyLoad||r.lazyLoad()},t.prototype.setupInfinite=function(){var t,n,i,o=this;if(!0===o.options.fade&&(o.options.centerMode=!1),!0===o.options.infinite&&!1===o.options.fade&&(n=null,o.slideCount>o.options.slidesToShow)){for(i=!0===o.options.centerMode?o.options.slidesToShow+1:o.options.slidesToShow,t=o.slideCount;t>o.slideCount-i;t-=1)n=t-1,e(o.$slides[n]).clone(!0).attr("id","").attr("data-slick-index",n-o.slideCount).prependTo(o.$slideTrack).addClass("slick-cloned");for(t=0;t<i+o.slideCount;t+=1)n=t,e(o.$slides[n]).clone(!0).attr("id","").attr("data-slick-index",n+o.slideCount).appendTo(o.$slideTrack).addClass("slick-cloned");o.$slideTrack.find(".slick-cloned").find("[id]").each(function(){e(this).attr("id","")})}},t.prototype.interrupt=function(e){var t=this;e||t.autoPlay(),t.interrupted=e},t.prototype.selectHandler=function(t){var n=this,i=e(t.target).is(".slick-slide")?e(t.target):e(t.target).parents(".slick-slide"),o=parseInt(i.attr("data-slick-index"));if(o||(o=0),n.slideCount<=n.options.slidesToShow)return void n.slideHandler(o,!1,!0);n.slideHandler(o)},t.prototype.slideHandler=function(e,t,n){var i,o,r,s,a,l=null,c=this;if(t=t||!1,!(!0===c.animating&&!0===c.options.waitForAnimate||!0===c.options.fade&&c.currentSlide===e)){if(!1===t&&c.asNavFor(e),i=e,l=c.getLeft(i),s=c.getLeft(c.currentSlide),c.currentLeft=null===c.swipeLeft?s:c.swipeLeft,!1===c.options.infinite&&!1===c.options.centerMode&&(e<0||e>c.getDotCount()*c.options.slidesToScroll))return void(!1===c.options.fade&&(i=c.currentSlide,!0!==n&&c.slideCount>c.options.slidesToShow?c.animateSlide(s,function(){c.postSlide(i)}):c.postSlide(i)));if(!1===c.options.infinite&&!0===c.options.centerMode&&(e<0||e>c.slideCount-c.options.slidesToScroll))return void(!1===c.options.fade&&(i=c.currentSlide,!0!==n&&c.slideCount>c.options.slidesToShow?c.animateSlide(s,function(){c.postSlide(i)}):c.postSlide(i)));if(c.options.autoplay&&clearInterval(c.autoPlayTimer),o=i<0?c.slideCount%c.options.slidesToScroll!=0?c.slideCount-c.slideCount%c.options.slidesToScroll:c.slideCount+i:i>=c.slideCount?c.slideCount%c.options.slidesToScroll!=0?0:i-c.slideCount:i,c.animating=!0,c.$slider.trigger("beforeChange",[c,c.currentSlide,o]),r=c.currentSlide,c.currentSlide=o,c.setSlideClasses(c.currentSlide),c.options.asNavFor&&(a=c.getNavTarget(),a=a.slick("getSlick"),a.slideCount<=a.options.slidesToShow&&a.setSlideClasses(c.currentSlide)),c.updateDots(),c.updateArrows(),!0===c.options.fade)return!0!==n?(c.fadeSlideOut(r),c.fadeSlide(o,function(){c.postSlide(o)})):c.postSlide(o),void c.animateHeight();!0!==n&&c.slideCount>c.options.slidesToShow?c.animateSlide(l,function(){c.postSlide(o)}):c.postSlide(o)}},t.prototype.startLoad=function(){var e=this;!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&(e.$prevArrow.hide(),e.$nextArrow.hide()),!0===e.options.dots&&e.slideCount>e.options.slidesToShow&&e.$dots.hide(),e.$slider.addClass("slick-loading")},t.prototype.swipeDirection=function(){var e,t,n,i,o=this;return e=o.touchObject.startX-o.touchObject.curX,t=o.touchObject.startY-o.touchObject.curY,n=Math.atan2(t,e),i=Math.round(180*n/Math.PI),i<0&&(i=360-Math.abs(i)),i<=45&&i>=0?!1===o.options.rtl?"left":"right":i<=360&&i>=315?!1===o.options.rtl?"left":"right":i>=135&&i<=225?!1===o.options.rtl?"right":"left":!0===o.options.verticalSwiping?i>=35&&i<=135?"down":"up":"vertical"},t.prototype.swipeEnd=function(e){var t,n,i=this;if(i.dragging=!1,i.swiping=!1,i.scrolling)return i.scrolling=!1,!1;if(i.interrupted=!1,i.shouldClick=!(i.touchObject.swipeLength>10),void 0===i.touchObject.curX)return!1;if(!0===i.touchObject.edgeHit&&i.$slider.trigger("edge",[i,i.swipeDirection()]),i.touchObject.swipeLength>=i.touchObject.minSwipe){switch(n=i.swipeDirection()){case"left":case"down":t=i.options.swipeToSlide?i.checkNavigable(i.currentSlide+i.getSlideCount()):i.currentSlide+i.getSlideCount(),i.currentDirection=0;break;case"right":case"up":t=i.options.swipeToSlide?i.checkNavigable(i.currentSlide-i.getSlideCount()):i.currentSlide-i.getSlideCount(),i.currentDirection=1}"vertical"!=n&&(i.slideHandler(t),i.touchObject={},i.$slider.trigger("swipe",[i,n]))}else i.touchObject.startX!==i.touchObject.curX&&(i.slideHandler(i.currentSlide),i.touchObject={})},t.prototype.swipeHandler=function(e){var t=this;if(!(!1===t.options.swipe||"ontouchend"in document&&!1===t.options.swipe||!1===t.options.draggable&&-1!==e.type.indexOf("mouse")))switch(t.touchObject.fingerCount=e.originalEvent&&void 0!==e.originalEvent.touches?e.originalEvent.touches.length:1,t.touchObject.minSwipe=t.listWidth/t.options.touchThreshold,!0===t.options.verticalSwiping&&(t.touchObject.minSwipe=t.listHeight/t.options.touchThreshold),e.data.action){case"start":t.swipeStart(e);break;case"move":t.swipeMove(e);break;case"end":t.swipeEnd(e)}},t.prototype.swipeMove=function(e){var t,n,i,o,r,s,a=this;return r=void 0!==e.originalEvent?e.originalEvent.touches:null,!(!a.dragging||a.scrolling||r&&1!==r.length)&&(t=a.getLeft(a.currentSlide),a.touchObject.curX=void 0!==r?r[0].pageX:e.clientX,a.touchObject.curY=void 0!==r?r[0].pageY:e.clientY,a.touchObject.swipeLength=Math.round(Math.sqrt(Math.pow(a.touchObject.curX-a.touchObject.startX,2))),s=Math.round(Math.sqrt(Math.pow(a.touchObject.curY-a.touchObject.startY,2))),!a.options.verticalSwiping&&!a.swiping&&s>4?(a.scrolling=!0,!1):(!0===a.options.verticalSwiping&&(a.touchObject.swipeLength=s),n=a.swipeDirection(),void 0!==e.originalEvent&&a.touchObject.swipeLength>4&&(a.swiping=!0,e.preventDefault()),o=(!1===a.options.rtl?1:-1)*(a.touchObject.curX>a.touchObject.startX?1:-1),!0===a.options.verticalSwiping&&(o=a.touchObject.curY>a.touchObject.startY?1:-1),i=a.touchObject.swipeLength,a.touchObject.edgeHit=!1,!1===a.options.infinite&&(0===a.currentSlide&&"right"===n||a.currentSlide>=a.getDotCount()&&"left"===n)&&(i=a.touchObject.swipeLength*a.options.edgeFriction,a.touchObject.edgeHit=!0),!1===a.options.vertical?a.swipeLeft=t+i*o:a.swipeLeft=t+i*(a.$list.height()/a.listWidth)*o,!0===a.options.verticalSwiping&&(a.swipeLeft=t+i*o),!0!==a.options.fade&&!1!==a.options.touchMove&&(!0===a.animating?(a.swipeLeft=null,!1):void a.setCSS(a.swipeLeft))))},t.prototype.swipeStart=function(e){var t,n=this;if(n.interrupted=!0,1!==n.touchObject.fingerCount||n.slideCount<=n.options.slidesToShow)return n.touchObject={},!1;void 0!==e.originalEvent&&void 0!==e.originalEvent.touches&&(t=e.originalEvent.touches[0]),n.touchObject.startX=n.touchObject.curX=void 0!==t?t.pageX:e.clientX,n.touchObject.startY=n.touchObject.curY=void 0!==t?t.pageY:e.clientY,n.dragging=!0},t.prototype.unfilterSlides=t.prototype.slickUnfilter=function(){var e=this;null!==e.$slidesCache&&(e.unload(),e.$slideTrack.children(this.options.slide).detach(),e.$slidesCache.appendTo(e.$slideTrack),e.reinit())},t.prototype.unload=function(){var t=this;e(".slick-cloned",t.$slider).remove(),t.$dots&&t.$dots.remove(),t.$prevArrow&&t.htmlExpr.test(t.options.prevArrow)&&t.$prevArrow.remove(),t.$nextArrow&&t.htmlExpr.test(t.options.nextArrow)&&t.$nextArrow.remove(),t.$slides.removeClass("slick-slide slick-active slick-visible slick-current").attr("aria-hidden","true").css("width","")},t.prototype.unslick=function(e){var t=this;t.$slider.trigger("unslick",[t,e]),t.destroy()},t.prototype.updateArrows=function(){var e=this;Math.floor(e.options.slidesToShow/2),!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&!e.options.infinite&&(e.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false"),e.$nextArrow.removeClass("slick-disabled").attr("aria-disabled","false"),0===e.currentSlide?(e.$prevArrow.addClass("slick-disabled").attr("aria-disabled","true"),e.$nextArrow.removeClass("slick-disabled").attr("aria-disabled","false")):e.currentSlide>=e.slideCount-e.options.slidesToShow&&!1===e.options.centerMode?(e.$nextArrow.addClass("slick-disabled").attr("aria-disabled","true"),e.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false")):e.currentSlide>=e.slideCount-1&&!0===e.options.centerMode&&(e.$nextArrow.addClass("slick-disabled").attr("aria-disabled","true"),e.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false")))},t.prototype.updateDots=function(){var e=this;null!==e.$dots&&(e.$dots.find("li").removeClass("slick-active").end(),e.$dots.find("li").eq(Math.floor(e.currentSlide/e.options.slidesToScroll)).addClass("slick-active"))},t.prototype.visibility=function(){var e=this;e.options.autoplay&&(document[e.hidden]?e.interrupted=!0:e.interrupted=!1)},e.fn.slick=function(){var e,n,i=this,o=arguments[0],r=Array.prototype.slice.call(arguments,1),s=i.length;for(e=0;e<s;e++)if("object"==typeof o||void 0===o?i[e].slick=new t(i[e],o):n=i[e].slick[o].apply(i[e].slick,r),void 0!==n)return n;return i}}),function(e,t,n,i){"use strict";function o(e){var t=e.currentTarget,i=e.data?e.data.options:{},o=i.selector?n(i.selector):e.data?e.data.items:[],r=n(t).attr("data-fancybox")||"",s=0,a=n.fancybox.getInstance();e.preventDefault(),e.stopPropagation(),a&&a.current.opts.$orig.is(t)||(r?(o=o.length?o.filter('[data-fancybox="'+r+'"]'):n('[data-fancybox="'+r+'"]'),(s=o.index(t))<0&&(s=0)):o=[t],n.fancybox.open(o,i,s))}if(n){if(n.fn.fancybox)return void n.error("fancyBox already initialized");var r={loop:!1,margin:[44,0],gutter:50,keyboard:!0,arrows:!0,infobar:!1,toolbar:!0,buttons:["slideShow","fullScreen","thumbs","close"],idleTime:4,smallBtn:"auto",protect:!1,modal:!1,image:{preload:"auto"},ajax:{settings:{data:{fancybox:!0}}},iframe:{tpl:'<iframe id="fancybox-frame{rnd}" name="fancybox-frame{rnd}" class="fancybox-iframe" frameborder="0" vspace="0" hspace="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen allowtransparency="true" src=""></iframe>',preload:!0,css:{},attr:{scrolling:"auto"}},animationEffect:"zoom",animationDuration:366,zoomOpacity:"auto",transitionEffect:"fade",transitionDuration:366,slideClass:"",baseClass:"",baseTpl:'<div class="fancybox-container" role="dialog" tabindex="-1"><div class="fancybox-bg"></div><div class="fancybox-inner"><div class="fancybox-infobar"><button data-fancybox-prev title="{{PREV}}" class="fancybox-button fancybox-button--left"></button><div class="fancybox-infobar__body"><span data-fancybox-index></span>&nbsp;/&nbsp;<span data-fancybox-count></span></div><button data-fancybox-next title="{{NEXT}}" class="fancybox-button fancybox-button--right"></button></div><div class="fancybox-toolbar">{{BUTTONS}}</div><div class="fancybox-navigation"><button data-fancybox-prev title="{{PREV}}" class="fancybox-arrow fancybox-arrow--left" /><button data-fancybox-next title="{{NEXT}}" class="fancybox-arrow fancybox-arrow--right" /></div><div class="fancybox-stage"></div><div class="fancybox-caption-wrap"><div class="fancybox-caption"></div></div></div></div>',spinnerTpl:'<div class="fancybox-loading"></div>',errorTpl:'<div class="fancybox-error"><p>{{ERROR}}<p></div>',btnTpl:{slideShow:'<button data-fancybox-play class="fancybox-button fancybox-button--play" title="{{PLAY_START}}"></button>',fullScreen:'<button data-fancybox-fullscreen class="fancybox-button fancybox-button--fullscreen" title="{{FULL_SCREEN}}"></button>',thumbs:'<button data-fancybox-thumbs class="fancybox-button fancybox-button--thumbs" title="{{THUMBS}}"></button>',close:'<button data-fancybox-close class="fancybox-button fancybox-button--close" title="{{CLOSE}}"></button>',smallBtn:'<button data-fancybox-close class="fancybox-close-small" title="{{CLOSE}}"></button>'},parentEl:"body",autoFocus:!0,backFocus:!0,trapFocus:!0,fullScreen:{autoStart:!1},touch:{vertical:!0,momentum:!0},hash:null,media:{},slideShow:{autoStart:!1,speed:4e3},thumbs:{autoStart:!1,hideOnClose:!0},onInit:n.noop,beforeLoad:n.noop,afterLoad:n.noop,beforeShow:n.noop,afterShow:n.noop,beforeClose:n.noop,afterClose:n.noop,onActivate:n.noop,onDeactivate:n.noop,clickContent:function(e,t){return"image"===e.type&&"zoom"},clickSlide:"close",clickOutside:"close",dblclickContent:!1,dblclickSlide:!1,dblclickOutside:!1,mobile:{clickContent:function(e,t){return"image"===e.type&&"toggleControls"},clickSlide:function(e,t){return"image"===e.type?"toggleControls":"close"},dblclickContent:function(e,t){return"image"===e.type&&"zoom"},dblclickSlide:function(e,t){return"image"===e.type&&"zoom"}},lang:"en",i18n:{en:{CLOSE:"Close",NEXT:"Next",PREV:"Previous",ERROR:"The requested content cannot be loaded. <br/> Please try again later.",PLAY_START:"Start slideshow",PLAY_STOP:"Pause slideshow",FULL_SCREEN:"Full screen",THUMBS:"Thumbnails"},de:{CLOSE:"Schliessen",NEXT:"Weiter",PREV:"Zurück",ERROR:"Die angeforderten Daten konnten nicht geladen werden. <br/> Bitte versuchen Sie es später nochmal.",PLAY_START:"Diaschau starten",PLAY_STOP:"Diaschau beenden",FULL_SCREEN:"Vollbild",THUMBS:"Vorschaubilder"}}},s=n(e),a=n(t),l=0,c=function(e){return e&&e.hasOwnProperty&&e instanceof n},d=function(){return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||function(t){return e.setTimeout(t,1e3/60)}}(),u=function(){var e,n=t.createElement("fakeelement"),i={transition:"transitionend",OTransition:"oTransitionEnd",MozTransition:"transitionend",WebkitTransition:"webkitTransitionEnd"};for(e in i)if(void 0!==n.style[e])return i[e]}(),p=function(e){return e&&e.length&&e[0].offsetHeight},f=function(e,i,o){var s=this;s.opts=n.extend(!0,{index:o},r,i||{}),i&&n.isArray(i.buttons)&&(s.opts.buttons=i.buttons),s.id=s.opts.id||++l,s.group=[],s.currIndex=parseInt(s.opts.index,10)||0,s.prevIndex=null,s.prevPos=null,s.currPos=0,s.firstRun=null,s.createGroup(e),s.group.length&&(s.$lastFocus=n(t.activeElement).blur(),s.slides={},s.init(e))};n.extend(f.prototype,{init:function(){var e,t,i,o=this,r=o.group[o.currIndex].opts;o.scrollTop=a.scrollTop(),o.scrollLeft=a.scrollLeft(),n.fancybox.getInstance()||n.fancybox.isMobile||"hidden"===n("body").css("overflow")||(e=n("body").width(),n("html").addClass("fancybox-enabled"),(e=n("body").width()-e)>1&&n("head").append('<style id="fancybox-style-noscroll" type="text/css">.compensate-for-scrollbar, .fancybox-enabled body { margin-right: '+e+"px; }</style>")),i="",n.each(r.buttons,function(e,t){i+=r.btnTpl[t]||""}),t=n(o.translate(o,r.baseTpl.replace("{{BUTTONS}}",i))).addClass("fancybox-is-hidden").attr("id","fancybox-container-"+o.id).addClass(r.baseClass).data("FancyBox",o).prependTo(r.parentEl),o.$refs={container:t},["bg","inner","infobar","toolbar","stage","caption"].forEach(function(e){o.$refs[e]=t.find(".fancybox-"+e)}),(!r.arrows||o.group.length<2)&&t.find(".fancybox-navigation").remove(),r.infobar||o.$refs.infobar.remove(),r.toolbar||o.$refs.toolbar.remove(),o.trigger("onInit"),o.activate(),o.jumpTo(o.currIndex)},translate:function(e,t){var n=e.opts.i18n[e.opts.lang];return t.replace(/\{\{(\w+)\}\}/g,function(e,t){var i=n[t];return void 0===i?e:i})},createGroup:function(e){var t=this,i=n.makeArray(e);n.each(i,function(e,i){var o,r,s,a,l={},c={},d=[];n.isPlainObject(i)?(l=i,
c=i.opts||i):"object"===n.type(i)&&n(i).length?(o=n(i),d=o.data(),c="options"in d?d.options:{},c="object"===n.type(c)?c:{},l.src="src"in d?d.src:c.src||o.attr("href"),["width","height","thumb","type","filter"].forEach(function(e){e in d&&(c[e]=d[e])}),"srcset"in d&&(c.image={srcset:d.srcset}),c.$orig=o,l.type||l.src||(l.type="inline",l.src=i)):l={type:"html",src:i+""},l.opts=n.extend(!0,{},t.opts,c),n.fancybox.isMobile&&(l.opts=n.extend(!0,{},l.opts,l.opts.mobile)),r=l.type||l.opts.type,s=l.src||"",!r&&s&&(s.match(/(^data:image\/[a-z0-9+\/=]*,)|(\.(jp(e|g|eg)|gif|png|bmp|webp|svg|ico)((\?|#).*)?$)/i)?r="image":s.match(/\.(pdf)((\?|#).*)?$/i)?r="pdf":"#"===s.charAt(0)&&(r="inline")),l.type=r,l.index=t.group.length,l.opts.$orig&&!l.opts.$orig.length&&delete l.opts.$orig,!l.opts.$thumb&&l.opts.$orig&&(l.opts.$thumb=l.opts.$orig.find("img:first")),l.opts.$thumb&&!l.opts.$thumb.length&&delete l.opts.$thumb,"function"===n.type(l.opts.caption)?l.opts.caption=l.opts.caption.apply(i,[t,l]):"caption"in d&&(l.opts.caption=d.caption),l.opts.caption=void 0===l.opts.caption?"":l.opts.caption+"","ajax"===r&&(a=s.split(/\s+/,2),a.length>1&&(l.src=a.shift(),l.opts.filter=a.shift())),"auto"==l.opts.smallBtn&&(n.inArray(r,["html","inline","ajax"])>-1?(l.opts.toolbar=!1,l.opts.smallBtn=!0):l.opts.smallBtn=!1),"pdf"===r&&(l.type="iframe",l.opts.iframe.preload=!1),l.opts.modal&&(l.opts=n.extend(!0,l.opts,{infobar:0,toolbar:0,smallBtn:0,keyboard:0,slideShow:0,fullScreen:0,thumbs:0,touch:0,clickContent:!1,clickSlide:!1,clickOutside:!1,dblclickContent:!1,dblclickSlide:!1,dblclickOutside:!1})),t.group.push(l)})},addEvents:function(){var i=this;i.removeEvents(),i.$refs.container.on("click.fb-close","[data-fancybox-close]",function(e){e.stopPropagation(),e.preventDefault(),i.close(e)}).on("click.fb-prev touchend.fb-prev","[data-fancybox-prev]",function(e){e.stopPropagation(),e.preventDefault(),i.previous()}).on("click.fb-next touchend.fb-next","[data-fancybox-next]",function(e){e.stopPropagation(),e.preventDefault(),i.next()}),s.on("orientationchange.fb resize.fb",function(e){e&&e.originalEvent&&"resize"===e.originalEvent.type?d(function(){i.update()}):(i.$refs.stage.hide(),setTimeout(function(){i.$refs.stage.show(),i.update()},500))}),a.on("focusin.fb",function(e){var o=n.fancybox?n.fancybox.getInstance():null;o.isClosing||!o.current||!o.current.opts.trapFocus||n(e.target).hasClass("fancybox-container")||n(e.target).is(t)||o&&"fixed"!==n(e.target).css("position")&&!o.$refs.container.has(e.target).length&&(e.stopPropagation(),o.focus(),s.scrollTop(i.scrollTop).scrollLeft(i.scrollLeft))}),a.on("keydown.fb",function(e){var t=i.current,o=e.keyCode||e.which;if(t&&t.opts.keyboard&&!n(e.target).is("input")&&!n(e.target).is("textarea"))return 8===o||27===o?(e.preventDefault(),void i.close(e)):37===o||38===o?(e.preventDefault(),void i.previous()):39===o||40===o?(e.preventDefault(),void i.next()):void i.trigger("afterKeydown",e,o)}),i.group[i.currIndex].opts.idleTime&&(i.idleSecondsCounter=0,a.on("mousemove.fb-idle mouseenter.fb-idle mouseleave.fb-idle mousedown.fb-idle touchstart.fb-idle touchmove.fb-idle scroll.fb-idle keydown.fb-idle",function(){i.idleSecondsCounter=0,i.isIdle&&i.showControls(),i.isIdle=!1}),i.idleInterval=e.setInterval(function(){++i.idleSecondsCounter>=i.group[i.currIndex].opts.idleTime&&(i.isIdle=!0,i.idleSecondsCounter=0,i.hideControls())},1e3))},removeEvents:function(){var t=this;s.off("orientationchange.fb resize.fb"),a.off("focusin.fb keydown.fb .fb-idle"),this.$refs.container.off(".fb-close .fb-prev .fb-next"),t.idleInterval&&(e.clearInterval(t.idleInterval),t.idleInterval=null)},previous:function(e){return this.jumpTo(this.currPos-1,e)},next:function(e){return this.jumpTo(this.currPos+1,e)},jumpTo:function(e,t,i){var o,r,s,a,l,c,d,u=this,f=u.group.length;if(!(u.isSliding||u.isClosing||u.isAnimating&&u.firstRun)){if(e=parseInt(e,10),!(r=u.current?u.current.opts.loop:u.opts.loop)&&(e<0||e>=f))return!1;if(o=u.firstRun=null===u.firstRun,!(f<2&&!o&&u.isSliding)){if(a=u.current,u.prevIndex=u.currIndex,u.prevPos=u.currPos,s=u.createSlide(e),f>1&&((r||s.index>0)&&u.createSlide(e-1),(r||s.index<f-1)&&u.createSlide(e+1)),u.current=s,u.currIndex=s.index,u.currPos=s.pos,u.trigger("beforeShow",o),u.updateControls(),c=n.fancybox.getTranslate(s.$slide),s.isMoved=(0!==c.left||0!==c.top)&&!s.$slide.hasClass("fancybox-animated"),s.forcedDuration=void 0,n.isNumeric(t)?s.forcedDuration=t:t=s.opts[o?"animationDuration":"transitionDuration"],t=parseInt(t,10),o)return s.opts.animationEffect&&t&&u.$refs.container.css("transition-duration",t+"ms"),u.$refs.container.removeClass("fancybox-is-hidden"),p(u.$refs.container),u.$refs.container.addClass("fancybox-is-open"),s.$slide.addClass("fancybox-slide--current"),u.loadSlide(s),void u.preload();n.each(u.slides,function(e,t){n.fancybox.stop(t.$slide)}),s.$slide.removeClass("fancybox-slide--next fancybox-slide--previous").addClass("fancybox-slide--current"),s.isMoved?(l=Math.round(s.$slide.width()),n.each(u.slides,function(e,i){var o=i.pos-s.pos;n.fancybox.animate(i.$slide,{top:0,left:o*l+o*i.opts.gutter},t,function(){i.$slide.removeAttr("style").removeClass("fancybox-slide--next fancybox-slide--previous"),i.pos===u.currPos&&(s.isMoved=!1,u.complete())})})):u.$refs.stage.children().removeAttr("style"),s.isLoaded?u.revealContent(s):u.loadSlide(s),u.preload(),a.pos!==s.pos&&(d="fancybox-slide--"+(a.pos>s.pos?"next":"previous"),a.$slide.removeClass("fancybox-slide--complete fancybox-slide--current fancybox-slide--next fancybox-slide--previous"),a.isComplete=!1,t&&(s.isMoved||s.opts.transitionEffect)&&(s.isMoved?a.$slide.addClass(d):(d="fancybox-animated "+d+" fancybox-fx-"+s.opts.transitionEffect,n.fancybox.animate(a.$slide,d,t,function(){a.$slide.removeClass(d).removeAttr("style")}))))}}},createSlide:function(e){var t,i,o=this;return i=e%o.group.length,i=i<0?o.group.length+i:i,!o.slides[e]&&o.group[i]&&(t=n('<div class="fancybox-slide"></div>').appendTo(o.$refs.stage),o.slides[e]=n.extend(!0,{},o.group[i],{pos:e,$slide:t,isLoaded:!1}),o.updateSlide(o.slides[e])),o.slides[e]},scaleToActual:function(e,t,i){var o,r,s,a,l,c=this,d=c.current,u=d.$content,p=parseInt(d.$slide.width(),10),f=parseInt(d.$slide.height(),10),h=d.width,g=d.height;"image"!=d.type||d.hasError||!u||c.isAnimating||(n.fancybox.stop(u),c.isAnimating=!0,e=void 0===e?.5*p:e,t=void 0===t?.5*f:t,o=n.fancybox.getTranslate(u),a=h/o.width,l=g/o.height,r=.5*p-.5*h,s=.5*f-.5*g,h>p&&(r=o.left*a-(e*a-e),r>0&&(r=0),r<p-h&&(r=p-h)),g>f&&(s=o.top*l-(t*l-t),s>0&&(s=0),s<f-g&&(s=f-g)),c.updateCursor(h,g),n.fancybox.animate(u,{top:s,left:r,scaleX:a,scaleY:l},i||330,function(){c.isAnimating=!1}),c.SlideShow&&c.SlideShow.isActive&&c.SlideShow.stop())},scaleToFit:function(e){var t,i=this,o=i.current,r=o.$content;"image"!=o.type||o.hasError||!r||i.isAnimating||(n.fancybox.stop(r),i.isAnimating=!0,t=i.getFitPos(o),i.updateCursor(t.width,t.height),n.fancybox.animate(r,{top:t.top,left:t.left,scaleX:t.width/r.width(),scaleY:t.height/r.height()},e||330,function(){i.isAnimating=!1}))},getFitPos:function(e){var t,i,o,r,a,l=this,c=e.$content,d=e.width,u=e.height,p=e.opts.margin;return!(!c||!c.length||!d&&!u)&&("number"===n.type(p)&&(p=[p,p]),2==p.length&&(p=[p[0],p[1],p[0],p[1]]),s.width()<800&&(p=[0,0,0,0]),t=parseInt(l.$refs.stage.width(),10)-(p[1]+p[3]),i=parseInt(l.$refs.stage.height(),10)-(p[0]+p[2]),o=Math.min(1,t/d,i/u),r=Math.floor(o*d),a=Math.floor(o*u),{top:Math.floor(.5*(i-a))+p[0],left:Math.floor(.5*(t-r))+p[3],width:r,height:a})},update:function(){var e=this;n.each(e.slides,function(t,n){e.updateSlide(n)})},updateSlide:function(e){var t=this,i=e.$content;i&&(e.width||e.height)&&(n.fancybox.stop(i),n.fancybox.setTranslate(i,t.getFitPos(e)),e.pos===t.currPos&&t.updateCursor()),e.$slide.trigger("refresh"),t.trigger("onUpdate",e)},updateCursor:function(e,t){var n,i=this,o=i.$refs.container.removeClass("fancybox-is-zoomable fancybox-can-zoomIn fancybox-can-drag fancybox-can-zoomOut");i.current&&!i.isClosing&&(i.isZoomable()?(o.addClass("fancybox-is-zoomable"),n=void 0!==e&&void 0!==t?e<i.current.width&&t<i.current.height:i.isScaledDown(),n?o.addClass("fancybox-can-zoomIn"):i.current.opts.touch?o.addClass("fancybox-can-drag"):o.addClass("fancybox-can-zoomOut")):i.current.opts.touch&&o.addClass("fancybox-can-drag"))},isZoomable:function(){var e,t=this,i=t.current;if(i&&!t.isClosing)return!!("image"===i.type&&i.isLoaded&&!i.hasError&&("zoom"===i.opts.clickContent||n.isFunction(i.opts.clickContent)&&"zoom"===i.opts.clickContent(i))&&(e=t.getFitPos(i),i.width>e.width||i.height>e.height))},isScaledDown:function(){var e=this,t=e.current,i=t.$content,o=!1;return i&&(o=n.fancybox.getTranslate(i),o=o.width<t.width||o.height<t.height),o},canPan:function(){var e=this,t=e.current,n=t.$content,i=!1;return n&&(i=e.getFitPos(t),i=Math.abs(n.width()-i.width)>1||Math.abs(n.height()-i.height)>1),i},loadSlide:function(e){var t,i,o,r=this;if(!e.isLoading&&!e.isLoaded){switch(e.isLoading=!0,r.trigger("beforeLoad",e),t=e.type,i=e.$slide,i.off("refresh").trigger("onReset").addClass("fancybox-slide--"+(t||"unknown")).addClass(e.opts.slideClass),t){case"image":r.setImage(e);break;case"iframe":r.setIframe(e);break;case"html":r.setContent(e,e.src||e.content);break;case"inline":n(e.src).length?r.setContent(e,n(e.src)):r.setError(e);break;case"ajax":r.showLoading(e),o=n.ajax(n.extend({},e.opts.ajax.settings,{url:e.src,success:function(t,n){"success"===n&&r.setContent(e,t)},error:function(t,n){t&&"abort"!==n&&r.setError(e)}})),i.one("onReset",function(){o.abort()});break;default:r.setError(e)}return!0}},setImage:function(t){var i,o,r,s,a=this,l=t.opts.image.srcset;if(l){r=e.devicePixelRatio||1,s=e.innerWidth*r,o=l.split(",").map(function(e){var t={};return e.trim().split(/\s+/).forEach(function(e,n){var i=parseInt(e.substring(0,e.length-1),10);if(0===n)return t.url=e;i&&(t.value=i,t.postfix=e[e.length-1])}),t}),o.sort(function(e,t){return e.value-t.value});for(var c=0;c<o.length;c++){var d=o[c];if("w"===d.postfix&&d.value>=s||"x"===d.postfix&&d.value>=r){i=d;break}}!i&&o.length&&(i=o[o.length-1]),i&&(t.src=i.url,t.width&&t.height&&"w"==i.postfix&&(t.height=t.width/t.height*i.value,t.width=i.value))}t.$content=n('<div class="fancybox-image-wrap"></div>').addClass("fancybox-is-hidden").appendTo(t.$slide),!1!==t.opts.preload&&t.opts.width&&t.opts.height&&(t.opts.thumb||t.opts.$thumb)?(t.width=t.opts.width,t.height=t.opts.height,t.$ghost=n("<img />").one("error",function(){n(this).remove(),t.$ghost=null,a.setBigImage(t)}).one("load",function(){a.afterLoad(t),a.setBigImage(t)}).addClass("fancybox-image").appendTo(t.$content).attr("src",t.opts.thumb||t.opts.$thumb.attr("src"))):a.setBigImage(t)},setBigImage:function(e){var t=this,i=n("<img />");e.$image=i.one("error",function(){t.setError(e)}).one("load",function(){clearTimeout(e.timouts),e.timouts=null,t.isClosing||(e.width=this.naturalWidth,e.height=this.naturalHeight,e.opts.image.srcset&&i.attr("sizes","100vw").attr("srcset",e.opts.image.srcset),t.hideLoading(e),e.$ghost?e.timouts=setTimeout(function(){e.timouts=null,e.$ghost.hide()},Math.min(300,Math.max(1e3,e.height/1600))):t.afterLoad(e))}).addClass("fancybox-image").attr("src",e.src).appendTo(e.$content),i[0].complete?i.trigger("load"):i[0].error?i.trigger("error"):e.timouts=setTimeout(function(){i[0].complete||e.hasError||t.showLoading(e)},100)},setIframe:function(e){var t,i=this,o=e.opts.iframe,r=e.$slide;e.$content=n('<div class="fancybox-content'+(o.preload?" fancybox-is-hidden":"")+'"></div>').css(o.css).appendTo(r),t=n(o.tpl.replace(/\{rnd\}/g,(new Date).getTime())).attr(o.attr).appendTo(e.$content),o.preload?(i.showLoading(e),t.on("load.fb error.fb",function(t){this.isReady=1,e.$slide.trigger("refresh"),i.afterLoad(e)}),r.on("refresh.fb",function(){var n,i,r,s,a,l=e.$content;if(1===t[0].isReady){try{n=t.contents(),i=n.find("body")}catch(e){}i&&i.length&&(void 0===o.css.width||void 0===o.css.height)&&(r=t[0].contentWindow.document.documentElement.scrollWidth,s=Math.ceil(i.outerWidth(!0)+(l.width()-r)),a=Math.ceil(i.outerHeight(!0)),l.css({width:void 0===o.css.width?s+(l.outerWidth()-l.innerWidth()):o.css.width,height:void 0===o.css.height?a+(l.outerHeight()-l.innerHeight()):o.css.height})),l.removeClass("fancybox-is-hidden")}})):this.afterLoad(e),t.attr("src",e.src),!0===e.opts.smallBtn&&e.$content.prepend(i.translate(e,e.opts.btnTpl.smallBtn)),r.one("onReset",function(){try{n(this).find("iframe").hide().attr("src","//about:blank")}catch(e){}n(this).empty(),e.isLoaded=!1})},setContent:function(e,t){var i=this;i.isClosing||(i.hideLoading(e),e.$slide.empty(),c(t)&&t.parent().length?(t.parent(".fancybox-slide--inline").trigger("onReset"),e.$placeholder=n("<div></div>").hide().insertAfter(t),t.css("display","inline-block")):e.hasError||("string"===n.type(t)&&(t=n("<div>").append(n.trim(t)).contents(),3===t[0].nodeType&&(t=n("<div>").html(t))),e.opts.filter&&(t=n("<div>").html(t).find(e.opts.filter))),e.$slide.one("onReset",function(){e.$placeholder&&(e.$placeholder.after(t.hide()).remove(),e.$placeholder=null),e.$smallBtn&&(e.$smallBtn.remove(),e.$smallBtn=null),e.hasError||(n(this).empty(),e.isLoaded=!1)}),e.$content=n(t).appendTo(e.$slide),e.opts.smallBtn&&!e.$smallBtn&&(e.$smallBtn=n(i.translate(e,e.opts.btnTpl.smallBtn)).appendTo(e.$content.filter("div").first())),this.afterLoad(e))},setError:function(e){e.hasError=!0,e.$slide.removeClass("fancybox-slide--"+e.type),this.setContent(e,this.translate(e,e.opts.errorTpl))},showLoading:function(e){var t=this;(e=e||t.current)&&!e.$spinner&&(e.$spinner=n(t.opts.spinnerTpl).appendTo(e.$slide))},hideLoading:function(e){var t=this;(e=e||t.current)&&e.$spinner&&(e.$spinner.remove(),delete e.$spinner)},afterLoad:function(e){var t=this;t.isClosing||(e.isLoading=!1,e.isLoaded=!0,t.trigger("afterLoad",e),t.hideLoading(e),e.opts.protect&&e.$content&&!e.hasError&&(e.$content.on("contextmenu.fb",function(e){return 2==e.button&&e.preventDefault(),!0}),"image"===e.type&&n('<div class="fancybox-spaceball"></div>').appendTo(e.$content)),t.revealContent(e))},revealContent:function(e){var t,i,o,r,s,a=this,l=e.$slide,c=!1;return t=e.opts[a.firstRun?"animationEffect":"transitionEffect"],o=e.opts[a.firstRun?"animationDuration":"transitionDuration"],o=parseInt(void 0===e.forcedDuration?o:e.forcedDuration,10),!e.isMoved&&e.pos===a.currPos&&o||(t=!1),"zoom"!==t||e.pos===a.currPos&&o&&"image"===e.type&&!e.hasError&&(c=a.getThumbPos(e))||(t="fade"),"zoom"===t?(s=a.getFitPos(e),s.scaleX=s.width/c.width,s.scaleY=s.height/c.height,delete s.width,delete s.height,r=e.opts.zoomOpacity,"auto"==r&&(r=Math.abs(e.width/e.height-c.width/c.height)>.1),r&&(c.opacity=.1,s.opacity=1),n.fancybox.setTranslate(e.$content.removeClass("fancybox-is-hidden"),c),p(e.$content),void n.fancybox.animate(e.$content,s,o,function(){a.complete()})):(a.updateSlide(e),t?(n.fancybox.stop(l),i="fancybox-animated fancybox-slide--"+(e.pos>a.prevPos?"next":"previous")+" fancybox-fx-"+t,l.removeAttr("style").removeClass("fancybox-slide--current fancybox-slide--next fancybox-slide--previous").addClass(i),e.$content.removeClass("fancybox-is-hidden"),p(l),void n.fancybox.animate(l,"fancybox-slide--current",o,function(t){l.removeClass(i).removeAttr("style"),e.pos===a.currPos&&a.complete()},!0)):(p(l),e.$content.removeClass("fancybox-is-hidden"),void(e.pos===a.currPos&&a.complete())))},getThumbPos:function(i){var o,r=this,s=!1,a=i.opts.$thumb,l=a?a.offset():0;return l&&a[0].ownerDocument===t&&function(t){for(var i=t[0],o=i.getBoundingClientRect(),r=[];null!==i.parentElement;)"hidden"!==n(i.parentElement).css("overflow")&&"auto"!==n(i.parentElement).css("overflow")||r.push(i.parentElement.getBoundingClientRect()),i=i.parentElement;return r.every(function(e){var t=Math.min(o.right,e.right)-Math.max(o.left,e.left),n=Math.min(o.bottom,e.bottom)-Math.max(o.top,e.top);return t>0&&n>0})&&o.bottom>0&&o.right>0&&o.left<n(e).width()&&o.top<n(e).height()}(a)&&(o=r.$refs.stage.offset(),s={top:l.top-o.top+parseFloat(a.css("border-top-width")||0),left:l.left-o.left+parseFloat(a.css("border-left-width")||0),width:a.width(),height:a.height(),scaleX:1,scaleY:1}),s},complete:function(){var e=this,i=e.current,o={};i.isMoved||!i.isLoaded||i.isComplete||(i.isComplete=!0,i.$slide.siblings().trigger("onReset"),p(i.$slide),i.$slide.addClass("fancybox-slide--complete"),n.each(e.slides,function(t,i){i.pos>=e.currPos-1&&i.pos<=e.currPos+1?o[i.pos]=i:i&&(n.fancybox.stop(i.$slide),i.$slide.unbind().remove())}),e.slides=o,e.updateCursor(),e.trigger("afterShow"),(n(t.activeElement).is("[disabled]")||i.opts.autoFocus&&"image"!=i.type&&"iframe"!==i.type)&&e.focus())},preload:function(){var e,t,n=this;n.group.length<2||(e=n.slides[n.currPos+1],t=n.slides[n.currPos-1],e&&"image"===e.type&&n.loadSlide(e),t&&"image"===t.type&&n.loadSlide(t))},focus:function(){var e,t=this.current;this.isClosing||(e=t&&t.isComplete?t.$slide.find("button,:input,[tabindex],a").filter(":not([disabled]):visible:first"):null,e=e&&e.length?e:this.$refs.container,e.focus())},activate:function(){var e=this;n(".fancybox-container").each(function(){var t=n(this).data("FancyBox");t&&t.uid!==e.uid&&!t.isClosing&&t.trigger("onDeactivate")}),e.current&&(e.$refs.container.index()>0&&e.$refs.container.prependTo(t.body),e.updateControls()),e.trigger("onActivate"),e.addEvents()},close:function(e,t){var i,o,r,s,a,l,c=this,p=c.current,f=function(){c.cleanUp(e)};return!c.isClosing&&(c.isClosing=!0,!1===c.trigger("beforeClose",e)?(c.isClosing=!1,d(function(){c.update()}),!1):(c.removeEvents(),p.timouts&&clearTimeout(p.timouts),r=p.$content,i=p.opts.animationEffect,o=n.isNumeric(t)?t:i?p.opts.animationDuration:0,p.$slide.off(u).removeClass("fancybox-slide--complete fancybox-slide--next fancybox-slide--previous fancybox-animated"),p.$slide.siblings().trigger("onReset").remove(),o&&c.$refs.container.removeClass("fancybox-is-open").addClass("fancybox-is-closing"),c.hideLoading(p),c.hideControls(),c.updateCursor(),"zoom"!==i||!0!==e&&r&&o&&"image"===p.type&&!p.hasError&&(l=c.getThumbPos(p))||(i="fade"),"zoom"===i?(n.fancybox.stop(r),a=n.fancybox.getTranslate(r),a.width=a.width*a.scaleX,a.height=a.height*a.scaleY,s=p.opts.zoomOpacity,"auto"==s&&(s=Math.abs(p.width/p.height-l.width/l.height)>.1),s&&(l.opacity=0),a.scaleX=a.width/l.width,a.scaleY=a.height/l.height,a.width=l.width,a.height=l.height,n.fancybox.setTranslate(p.$content,a),n.fancybox.animate(p.$content,l,o,f),!0):(i&&o?!0===e?setTimeout(f,o):n.fancybox.animate(p.$slide.removeClass("fancybox-slide--current"),"fancybox-animated fancybox-slide--previous fancybox-fx-"+i,o,f):f(),!0)))},cleanUp:function(e){var t,i=this;i.current.$slide.trigger("onReset"),i.$refs.container.empty().remove(),i.trigger("afterClose",e),i.$lastFocus&&i.current.opts.backFocus&&i.$lastFocus.focus(),i.current=null,t=n.fancybox.getInstance(),t?t.activate():(s.scrollTop(i.scrollTop).scrollLeft(i.scrollLeft),n("html").removeClass("fancybox-enabled"),n("#fancybox-style-noscroll").remove())},trigger:function(e,t){var i,o=Array.prototype.slice.call(arguments,1),r=this,s=t&&t.opts?t:r.current;if(s?o.unshift(s):s=r,o.unshift(r),n.isFunction(s.opts[e])&&(i=s.opts[e].apply(s,o)),!1===i)return i;"afterClose"===e?a.trigger(e+".fb",o):r.$refs.container.trigger(e+".fb",o)},updateControls:function(e){var t=this,i=t.current,o=i.index,r=i.opts,s=r.caption,a=t.$refs.caption;i.$slide.trigger("refresh"),t.$caption=s&&s.length?a.html(s):null,t.isHiddenControls||t.showControls(),n("[data-fancybox-count]").html(t.group.length),n("[data-fancybox-index]").html(o+1),n("[data-fancybox-prev]").prop("disabled",!r.loop&&o<=0),n("[data-fancybox-next]").prop("disabled",!r.loop&&o>=t.group.length-1)},hideControls:function(){this.isHiddenControls=!0,this.$refs.container.removeClass("fancybox-show-infobar fancybox-show-toolbar fancybox-show-caption fancybox-show-nav")},showControls:function(){var e=this,t=e.current?e.current.opts:e.opts,n=e.$refs.container;e.isHiddenControls=!1,e.idleSecondsCounter=0,n.toggleClass("fancybox-show-toolbar",!(!t.toolbar||!t.buttons)).toggleClass("fancybox-show-infobar",!!(t.infobar&&e.group.length>1)).toggleClass("fancybox-show-nav",!!(t.arrows&&e.group.length>1)).toggleClass("fancybox-is-modal",!!t.modal),e.$caption?n.addClass("fancybox-show-caption "):n.removeClass("fancybox-show-caption")},toggleControls:function(){this.isHiddenControls?this.showControls():this.hideControls()}}),n.fancybox={version:"3.1.25",defaults:r,getInstance:function(e){var t=n('.fancybox-container:not(".fancybox-is-closing"):first').data("FancyBox"),i=Array.prototype.slice.call(arguments,1);return t instanceof f&&("string"===n.type(e)?t[e].apply(t,i):"function"===n.type(e)&&e.apply(t,i),t)},open:function(e,t,n){return new f(e,t,n)},close:function(e){var t=this.getInstance();t&&(t.close(),!0===e&&this.close())},destroy:function(){this.close(!0),a.off("click.fb-start")},isMobile:void 0!==t.createTouch&&/Android|webOS|iPhone|iPad|iPod|BlackBerry/i.test(navigator.userAgent),use3d:function(){var n=t.createElement("div");return e.getComputedStyle&&e.getComputedStyle(n).getPropertyValue("transform")&&!(t.documentMode&&t.documentMode<11)}(),getTranslate:function(e){var t;if(!e||!e.length)return!1;if(t=e.eq(0).css("transform"),t&&-1!==t.indexOf("matrix")?(t=t.split("(")[1],t=t.split(")")[0],t=t.split(",")):t=[],t.length)t=t.length>10?[t[13],t[12],t[0],t[5]]:[t[5],t[4],t[0],t[3]],t=t.map(parseFloat);else{t=[0,0,1,1];var n=/\.*translate\((.*)px,(.*)px\)/i,i=n.exec(e.eq(0).attr("style"));i&&(t[0]=parseFloat(i[2]),t[1]=parseFloat(i[1]))}return{top:t[0],left:t[1],scaleX:t[2],scaleY:t[3],opacity:parseFloat(e.css("opacity")),width:e.width(),height:e.height()}},setTranslate:function(e,t){var n="",i={};if(e&&t)return void 0===t.left&&void 0===t.top||(n=(void 0===t.left?e.position().left:t.left)+"px, "+(void 0===t.top?e.position().top:t.top)+"px",n=this.use3d?"translate3d("+n+", 0px)":"translate("+n+")"),void 0!==t.scaleX&&void 0!==t.scaleY&&(n=(n.length?n+" ":"")+"scale("+t.scaleX+", "+t.scaleY+")"),n.length&&(i.transform=n),void 0!==t.opacity&&(i.opacity=t.opacity),void 0!==t.width&&(i.width=t.width),void 0!==t.height&&(i.height=t.height),e.css(i)},animate:function(e,t,i,o,r){var s=u||"transitionend";n.isFunction(i)&&(o=i,i=null),n.isPlainObject(t)||e.removeAttr("style"),e.on(s,function(i){(!i||!i.originalEvent||e.is(i.originalEvent.target)&&"z-index"!=i.originalEvent.propertyName)&&(e.off(s),n.isPlainObject(t)?void 0!==t.scaleX&&void 0!==t.scaleY&&(e.css("transition-duration","0ms"),t.width=Math.round(e.width()*t.scaleX),t.height=Math.round(e.height()*t.scaleY),t.scaleX=1,t.scaleY=1,n.fancybox.setTranslate(e,t)):!0!==r&&e.removeClass(t),n.isFunction(o)&&o(i))}),n.isNumeric(i)&&e.css("transition-duration",i+"ms"),n.isPlainObject(t)?n.fancybox.setTranslate(e,t):e.addClass(t),e.data("timer",setTimeout(function(){e.trigger("transitionend")},i+16))},stop:function(e){clearTimeout(e.data("timer")),e.off(u)}},n.fn.fancybox=function(e){var t;return e=e||{},t=e.selector||!1,t?n("body").off("click.fb-start",t).on("click.fb-start",t,{options:e},o):this.off("click.fb-start").on("click.fb-start",{items:this,options:e},o),this},a.on("click.fb-start","[data-fancybox]",o)}}(window,document,window.jQuery||jQuery),function(e){"use strict";var t=function(t,n,i){if(t)return i=i||"","object"===e.type(i)&&(i=e.param(i,!0)),e.each(n,function(e,n){t=t.replace("$"+e,n||"")}),i.length&&(t+=(t.indexOf("?")>0?"&":"?")+i),t},n={youtube:{matcher:/(youtube\.com|youtu\.be|youtube\-nocookie\.com)\/(watch\?(.*&)?v=|v\/|u\/|embed\/?)?(videoseries\?list=(.*)|[\w-]{11}|\?listType=(.*)&list=(.*))(.*)/i,params:{autoplay:1,autohide:1,fs:1,rel:0,hd:1,wmode:"transparent",enablejsapi:1,html5:1},paramPlace:8,type:"iframe",url:"//www.youtube.com/embed/$4",thumb:"//img.youtube.com/vi/$4/hqdefault.jpg"},vimeo:{matcher:/^.+vimeo.com\/(.*\/)?([\d]+)(.*)?/,params:{autoplay:1,hd:1,show_title:1,show_byline:1,show_portrait:0,fullscreen:1,api:1},paramPlace:3,type:"iframe",url:"//player.vimeo.com/video/$2"},metacafe:{matcher:/metacafe.com\/watch\/(\d+)\/(.*)?/,type:"iframe",url:"//www.metacafe.com/embed/$1/?ap=1"},dailymotion:{matcher:/dailymotion.com\/video\/(.*)\/?(.*)/,params:{additionalInfos:0,autoStart:1},type:"iframe",url:"//www.dailymotion.com/embed/video/$1"},vine:{matcher:/vine.co\/v\/([a-zA-Z0-9\?\=\-]+)/,type:"iframe",url:"//vine.co/v/$1/embed/simple"},instagram:{matcher:/(instagr\.am|instagram\.com)\/p\/([a-zA-Z0-9_\-]+)\/?/i,type:"image",url:"//$1/p/$2/media/?size=l"},gmap_place:{matcher:/(maps\.)?google\.([a-z]{2,3}(\.[a-z]{2})?)\/(((maps\/(place\/(.*)\/)?\@(.*),(\d+.?\d+?)z))|(\?ll=))(.*)?/i,type:"iframe",url:function(e){return"//maps.google."+e[2]+"/?ll="+(e[9]?e[9]+"&z="+Math.floor(e[10])+(e[12]?e[12].replace(/^\//,"&"):""):e[12])+"&output="+(e[12]&&e[12].indexOf("layer=c")>0?"svembed":"embed")}},gmap_search:{matcher:/(maps\.)?google\.([a-z]{2,3}(\.[a-z]{2})?)\/(maps\/search\/)(.*)/i,type:"iframe",url:function(e){return"//maps.google."+e[2]+"/maps?q="+e[5].replace("query=","q=").replace("api=1","")+"&output=embed"}}};e(document).on("onInit.fb",function(i,o){e.each(o.group,function(i,o){var r,s,a,l,c,d,u,p=o.src||"",f=!1;o.type||(r=e.extend(!0,{},n,o.opts.media),e.each(r,function(n,i){if(a=p.match(i.matcher),d={},u=n,a){if(f=i.type,i.paramPlace&&a[i.paramPlace]){c=a[i.paramPlace],"?"==c[0]&&(c=c.substring(1)),c=c.split("&");for(var r=0;r<c.length;++r){var h=c[r].split("=",2);2==h.length&&(d[h[0]]=decodeURIComponent(h[1].replace(/\+/g," ")))}}return l=e.extend(!0,{},i.params,o.opts[n],d),p="function"===e.type(i.url)?i.url.call(this,a,l,o):t(i.url,a,l),s="function"===e.type(i.thumb)?i.thumb.call(this,a,l,o):t(i.thumb,a),"vimeo"===u&&(p=p.replace("&%23","#")),!1}}),f?(o.src=p,o.type=f,o.opts.thumb||o.opts.$thumb&&o.opts.$thumb.length||(o.opts.thumb=s),"iframe"===f&&(e.extend(!0,o.opts,{iframe:{preload:!1,attr:{scrolling:"no"}}}),o.contentProvider=u,o.opts.slideClass+=" fancybox-slide--"+("gmap_place"==u||"gmap_search"==u?"map":"video"))):o.type="image")})})}(window.jQuery),function(e,t,n){"use strict";var i=function(){return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||function(t){return e.setTimeout(t,1e3/60)}}(),o=function(){return e.cancelAnimationFrame||e.webkitCancelAnimationFrame||e.mozCancelAnimationFrame||e.oCancelAnimationFrame||function(t){e.clearTimeout(t)}}(),r=function(t){var n=[];t=t.originalEvent||t||e.e,t=t.touches&&t.touches.length?t.touches:t.changedTouches&&t.changedTouches.length?t.changedTouches:[t];for(var i in t)t[i].pageX?n.push({x:t[i].pageX,y:t[i].pageY}):t[i].clientX&&n.push({x:t[i].clientX,y:t[i].clientY});return n},s=function(e,t,n){return t&&e?"x"===n?e.x-t.x:"y"===n?e.y-t.y:Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2)):0},a=function(e){if(e.is("a,button,input,select,textarea")||n.isFunction(e.get(0).onclick)||e.data("selectable"))return!0;for(var t=0,i=e[0].attributes,o=i.length;t<o;t++)if("data-fancybox-"===i[t].nodeName.substr(0,14))return!0;return!1},l=function(t){var n=e.getComputedStyle(t)["overflow-y"],i=e.getComputedStyle(t)["overflow-x"],o=("scroll"===n||"auto"===n)&&t.scrollHeight>t.clientHeight,r=("scroll"===i||"auto"===i)&&t.scrollWidth>t.clientWidth;return o||r},c=function(e){for(var t=!1;;){if(t=l(e.get(0)))break;if(e=e.parent(),!e.length||e.hasClass("fancybox-stage")||e.is("body"))break}return t},d=function(e){var t=this;t.instance=e,t.$bg=e.$refs.bg,t.$stage=e.$refs.stage,t.$container=e.$refs.container,t.destroy(),t.$container.on("touchstart.fb.touch mousedown.fb.touch",n.proxy(t,"ontouchstart"))};d.prototype.destroy=function(){this.$container.off(".fb.touch")},d.prototype.ontouchstart=function(i){var o=this,l=n(i.target),d=o.instance,u=d.current,p=u.$content,f="touchstart"==i.type;if(f&&o.$container.off("mousedown.fb.touch"),!u||o.instance.isAnimating||o.instance.isClosing)return i.stopPropagation(),void i.preventDefault();if((!i.originalEvent||2!=i.originalEvent.button)&&l.length&&!a(l)&&!a(l.parent())&&!(i.originalEvent.clientX>l[0].clientWidth+l.offset().left)&&(o.startPoints=r(i),o.startPoints&&!(o.startPoints.length>1&&d.isSliding))){if(o.$target=l,o.$content=p,o.canTap=!0,n(t).off(".fb.touch"),n(t).on(f?"touchend.fb.touch touchcancel.fb.touch":"mouseup.fb.touch mouseleave.fb.touch",n.proxy(o,"ontouchend")),n(t).on(f?"touchmove.fb.touch":"mousemove.fb.touch",n.proxy(o,"ontouchmove")),!d.current.opts.touch&&!d.canPan()||!l.is(o.$stage)&&!o.$stage.find(l).length)return void(l.is("img")&&i.preventDefault());i.stopPropagation(),n.fancybox.isMobile&&(c(o.$target)||c(o.$target.parent()))||i.preventDefault(),o.canvasWidth=Math.round(u.$slide[0].clientWidth),o.canvasHeight=Math.round(u.$slide[0].clientHeight),o.startTime=(new Date).getTime(),o.distanceX=o.distanceY=o.distance=0,o.isPanning=!1,o.isSwiping=!1,o.isZooming=!1,o.sliderStartPos=o.sliderLastPos||{top:0,left:0},o.contentStartPos=n.fancybox.getTranslate(o.$content),o.contentLastPos=null,1!==o.startPoints.length||o.isZooming||(o.canTap=!d.isSliding,"image"===u.type&&(o.contentStartPos.width>o.canvasWidth+1||o.contentStartPos.height>o.canvasHeight+1)?(n.fancybox.stop(o.$content),o.$content.css("transition-duration","0ms"),o.isPanning=!0):o.isSwiping=!0,o.$container.addClass("fancybox-controls--isGrabbing")),2!==o.startPoints.length||d.isAnimating||u.hasError||"image"!==u.type||!u.isLoaded&&!u.$ghost||(o.isZooming=!0,o.isSwiping=!1,o.isPanning=!1,n.fancybox.stop(o.$content),o.$content.css("transition-duration","0ms"),o.centerPointStartX=.5*(o.startPoints[0].x+o.startPoints[1].x)-n(e).scrollLeft(),o.centerPointStartY=.5*(o.startPoints[0].y+o.startPoints[1].y)-n(e).scrollTop(),o.percentageOfImageAtPinchPointX=(o.centerPointStartX-o.contentStartPos.left)/o.contentStartPos.width,o.percentageOfImageAtPinchPointY=(o.centerPointStartY-o.contentStartPos.top)/o.contentStartPos.height,o.startDistanceBetweenFingers=s(o.startPoints[0],o.startPoints[1]))}},d.prototype.ontouchmove=function(e){var t=this;if(t.newPoints=r(e),n.fancybox.isMobile&&(c(t.$target)||c(t.$target.parent())))return e.stopPropagation(),void(t.canTap=!1);if((t.instance.current.opts.touch||t.instance.canPan())&&t.newPoints&&t.newPoints.length&&(t.distanceX=s(t.newPoints[0],t.startPoints[0],"x"),t.distanceY=s(t.newPoints[0],t.startPoints[0],"y"),t.distance=s(t.newPoints[0],t.startPoints[0]),t.distance>0)){if(!t.$target.is(t.$stage)&&!t.$stage.find(t.$target).length)return;e.stopPropagation(),e.preventDefault(),t.isSwiping?t.onSwipe():t.isPanning?t.onPan():t.isZooming&&t.onZoom()}},d.prototype.onSwipe=function(){var t,r=this,s=r.isSwiping,a=r.sliderStartPos.left||0;!0===s?Math.abs(r.distance)>10&&(r.canTap=!1,r.instance.group.length<2&&r.instance.opts.touch.vertical?r.isSwiping="y":r.instance.isSliding||!1===r.instance.opts.touch.vertical||"auto"===r.instance.opts.touch.vertical&&n(e).width()>800?r.isSwiping="x":(t=Math.abs(180*Math.atan2(r.distanceY,r.distanceX)/Math.PI),r.isSwiping=t>45&&t<135?"y":"x"),r.instance.isSliding=r.isSwiping,r.startPoints=r.newPoints,n.each(r.instance.slides,function(e,t){n.fancybox.stop(t.$slide),t.$slide.css("transition-duration","0ms"),t.inTransition=!1,t.pos===r.instance.current.pos&&(r.sliderStartPos.left=n.fancybox.getTranslate(t.$slide).left)}),r.instance.SlideShow&&r.instance.SlideShow.isActive&&r.instance.SlideShow.stop()):("x"==s&&(r.distanceX>0&&(r.instance.group.length<2||0===r.instance.current.index&&!r.instance.current.opts.loop)?a+=Math.pow(r.distanceX,.8):r.distanceX<0&&(r.instance.group.length<2||r.instance.current.index===r.instance.group.length-1&&!r.instance.current.opts.loop)?a-=Math.pow(-r.distanceX,.8):a+=r.distanceX),r.sliderLastPos={top:"x"==s?0:r.sliderStartPos.top+r.distanceY,left:a},r.requestId&&(o(r.requestId),r.requestId=null),r.requestId=i(function(){r.sliderLastPos&&(n.each(r.instance.slides,function(e,t){var i=t.pos-r.instance.currPos;n.fancybox.setTranslate(t.$slide,{top:r.sliderLastPos.top,
left:r.sliderLastPos.left+i*r.canvasWidth+i*t.opts.gutter})}),r.$container.addClass("fancybox-is-sliding"))}))},d.prototype.onPan=function(){var e,t,r,s=this;s.canTap=!1,e=s.contentStartPos.width>s.canvasWidth?s.contentStartPos.left+s.distanceX:s.contentStartPos.left,t=s.contentStartPos.top+s.distanceY,r=s.limitMovement(e,t,s.contentStartPos.width,s.contentStartPos.height),r.scaleX=s.contentStartPos.scaleX,r.scaleY=s.contentStartPos.scaleY,s.contentLastPos=r,s.requestId&&(o(s.requestId),s.requestId=null),s.requestId=i(function(){n.fancybox.setTranslate(s.$content,s.contentLastPos)})},d.prototype.limitMovement=function(e,t,n,i){var o,r,s,a,l=this,c=l.canvasWidth,d=l.canvasHeight,u=l.contentStartPos.left,p=l.contentStartPos.top,f=l.distanceX,h=l.distanceY;return o=Math.max(0,.5*c-.5*n),r=Math.max(0,.5*d-.5*i),s=Math.min(c-n,.5*c-.5*n),a=Math.min(d-i,.5*d-.5*i),n>c&&(f>0&&e>o&&(e=o-1+Math.pow(-o+u+f,.8)||0),f<0&&e<s&&(e=s+1-Math.pow(s-u-f,.8)||0)),i>d&&(h>0&&t>r&&(t=r-1+Math.pow(-r+p+h,.8)||0),h<0&&t<a&&(t=a+1-Math.pow(a-p-h,.8)||0)),{top:t,left:e}},d.prototype.limitPosition=function(e,t,n,i){var o=this,r=o.canvasWidth,s=o.canvasHeight;return n>r?(e=e>0?0:e,e=e<r-n?r-n:e):e=Math.max(0,r/2-n/2),i>s?(t=t>0?0:t,t=t<s-i?s-i:t):t=Math.max(0,s/2-i/2),{top:t,left:e}},d.prototype.onZoom=function(){var t=this,r=t.contentStartPos.width,a=t.contentStartPos.height,l=t.contentStartPos.left,c=t.contentStartPos.top,d=s(t.newPoints[0],t.newPoints[1]),u=d/t.startDistanceBetweenFingers,p=Math.floor(r*u),f=Math.floor(a*u),h=(r-p)*t.percentageOfImageAtPinchPointX,g=(a-f)*t.percentageOfImageAtPinchPointY,m=(t.newPoints[0].x+t.newPoints[1].x)/2-n(e).scrollLeft(),v=(t.newPoints[0].y+t.newPoints[1].y)/2-n(e).scrollTop(),y=m-t.centerPointStartX,b=v-t.centerPointStartY,w=l+(h+y),x=c+(g+b),C={top:x,left:w,scaleX:t.contentStartPos.scaleX*u,scaleY:t.contentStartPos.scaleY*u};t.canTap=!1,t.newWidth=p,t.newHeight=f,t.contentLastPos=C,t.requestId&&(o(t.requestId),t.requestId=null),t.requestId=i(function(){n.fancybox.setTranslate(t.$content,t.contentLastPos)})},d.prototype.ontouchend=function(e){var i=this,s=Math.max((new Date).getTime()-i.startTime,1),a=i.isSwiping,l=i.isPanning,c=i.isZooming;if(i.endPoints=r(e),i.$container.removeClass("fancybox-controls--isGrabbing"),n(t).off(".fb.touch"),i.requestId&&(o(i.requestId),i.requestId=null),i.isSwiping=!1,i.isPanning=!1,i.isZooming=!1,i.canTap)return i.onTap(e);i.speed=366,i.velocityX=i.distanceX/s*.5,i.velocityY=i.distanceY/s*.5,i.speedX=Math.max(.5*i.speed,Math.min(1.5*i.speed,1/Math.abs(i.velocityX)*i.speed)),l?i.endPanning():c?i.endZooming():i.endSwiping(a)},d.prototype.endSwiping=function(e){var t=this,i=!1;t.instance.isSliding=!1,t.sliderLastPos=null,"y"==e&&Math.abs(t.distanceY)>50?(n.fancybox.animate(t.instance.current.$slide,{top:t.sliderStartPos.top+t.distanceY+150*t.velocityY,opacity:0},150),i=t.instance.close(!0,300)):"x"==e&&t.distanceX>50&&t.instance.group.length>1?i=t.instance.previous(t.speedX):"x"==e&&t.distanceX<-50&&t.instance.group.length>1&&(i=t.instance.next(t.speedX)),!1!==i||"x"!=e&&"y"!=e||t.instance.jumpTo(t.instance.current.index,150),t.$container.removeClass("fancybox-is-sliding")},d.prototype.endPanning=function(){var e,t,i,o=this;o.contentLastPos&&(!1===o.instance.current.opts.touch.momentum?(e=o.contentLastPos.left,t=o.contentLastPos.top):(e=o.contentLastPos.left+o.velocityX*o.speed,t=o.contentLastPos.top+o.velocityY*o.speed),i=o.limitPosition(e,t,o.contentStartPos.width,o.contentStartPos.height),i.width=o.contentStartPos.width,i.height=o.contentStartPos.height,n.fancybox.animate(o.$content,i,330))},d.prototype.endZooming=function(){var e,t,i,o,r=this,s=r.instance.current,a=r.newWidth,l=r.newHeight;r.contentLastPos&&(e=r.contentLastPos.left,t=r.contentLastPos.top,o={top:t,left:e,width:a,height:l,scaleX:1,scaleY:1},n.fancybox.setTranslate(r.$content,o),a<r.canvasWidth&&l<r.canvasHeight?r.instance.scaleToFit(150):a>s.width||l>s.height?r.instance.scaleToActual(r.centerPointStartX,r.centerPointStartY,150):(i=r.limitPosition(e,t,a,l),n.fancybox.setTranslate(r.content,n.fancybox.getTranslate(r.$content)),n.fancybox.animate(r.$content,i,150)))},d.prototype.onTap=function(e){var t,i=this,o=n(e.target),s=i.instance,a=s.current,l=e&&r(e)||i.startPoints,c=l[0]?l[0].x-i.$stage.offset().left:0,d=l[0]?l[0].y-i.$stage.offset().top:0,u=function(t){var o=a.opts[t];if(n.isFunction(o)&&(o=o.apply(s,[a,e])),o)switch(o){case"close":s.close(i.startEvent);break;case"toggleControls":s.toggleControls(!0);break;case"next":s.next();break;case"nextOrClose":s.group.length>1?s.next():s.close(i.startEvent);break;case"zoom":"image"==a.type&&(a.isLoaded||a.$ghost)&&(s.canPan()?s.scaleToFit():s.isScaledDown()?s.scaleToActual(c,d):s.group.length<2&&s.close(i.startEvent))}};if(!(e.originalEvent&&2==e.originalEvent.button||s.isSliding||c>o[0].clientWidth+o.offset().left)){if(o.is(".fancybox-bg,.fancybox-inner,.fancybox-outer,.fancybox-container"))t="Outside";else if(o.is(".fancybox-slide"))t="Slide";else{if(!s.current.$content||!s.current.$content.has(e.target).length)return;t="Content"}if(i.tapped){if(clearTimeout(i.tapped),i.tapped=null,Math.abs(c-i.tapX)>50||Math.abs(d-i.tapY)>50||s.isSliding)return this;u("dblclick"+t)}else i.tapX=c,i.tapY=d,a.opts["dblclick"+t]&&a.opts["dblclick"+t]!==a.opts["click"+t]?i.tapped=setTimeout(function(){i.tapped=null,u("click"+t)},300):u("click"+t);return this}},n(t).on("onActivate.fb",function(e,t){t&&!t.Guestures&&(t.Guestures=new d(t))}),n(t).on("beforeClose.fb",function(e,t){t&&t.Guestures&&t.Guestures.destroy()})}(window,document,window.jQuery),function(e,t){"use strict";var n=function(e){this.instance=e,this.init()};t.extend(n.prototype,{timer:null,isActive:!1,$button:null,speed:3e3,init:function(){var e=this;e.$button=e.instance.$refs.toolbar.find("[data-fancybox-play]").on("click",function(){e.toggle()}),(e.instance.group.length<2||!e.instance.group[e.instance.currIndex].opts.slideShow)&&e.$button.hide()},set:function(){var e=this;e.instance&&e.instance.current&&(e.instance.current.opts.loop||e.instance.currIndex<e.instance.group.length-1)?e.timer=setTimeout(function(){e.instance.next()},e.instance.current.opts.slideShow.speed||e.speed):(e.stop(),e.instance.idleSecondsCounter=0,e.instance.showControls())},clear:function(){var e=this;clearTimeout(e.timer),e.timer=null},start:function(){var e=this,t=e.instance.current;e.instance&&t&&(t.opts.loop||t.index<e.instance.group.length-1)&&(e.isActive=!0,e.$button.attr("title",t.opts.i18n[t.opts.lang].PLAY_STOP).addClass("fancybox-button--pause"),t.isComplete&&e.set())},stop:function(){var e=this,t=e.instance.current;e.clear(),e.$button.attr("title",t.opts.i18n[t.opts.lang].PLAY_START).removeClass("fancybox-button--pause"),e.isActive=!1},toggle:function(){var e=this;e.isActive?e.stop():e.start()}}),t(e).on({"onInit.fb":function(e,t){t&&!t.SlideShow&&(t.SlideShow=new n(t))},"beforeShow.fb":function(e,t,n,i){var o=t&&t.SlideShow;i?o&&n.opts.slideShow.autoStart&&o.start():o&&o.isActive&&o.clear()},"afterShow.fb":function(e,t,n){var i=t&&t.SlideShow;i&&i.isActive&&i.set()},"afterKeydown.fb":function(n,i,o,r,s){var a=i&&i.SlideShow;!a||!o.opts.slideShow||80!==s&&32!==s||t(e.activeElement).is("button,a,input")||(r.preventDefault(),a.toggle())},"beforeClose.fb onDeactivate.fb":function(e,t){var n=t&&t.SlideShow;n&&n.stop()}}),t(e).on("visibilitychange",function(){var n=t.fancybox.getInstance(),i=n&&n.SlideShow;i&&i.isActive&&(e.hidden?i.clear():i.set())})}(document,window.jQuery),function(e,t){"use strict";var n=function(){var t,n,i,o=[["requestFullscreen","exitFullscreen","fullscreenElement","fullscreenEnabled","fullscreenchange","fullscreenerror"],["webkitRequestFullscreen","webkitExitFullscreen","webkitFullscreenElement","webkitFullscreenEnabled","webkitfullscreenchange","webkitfullscreenerror"],["webkitRequestFullScreen","webkitCancelFullScreen","webkitCurrentFullScreenElement","webkitCancelFullScreen","webkitfullscreenchange","webkitfullscreenerror"],["mozRequestFullScreen","mozCancelFullScreen","mozFullScreenElement","mozFullScreenEnabled","mozfullscreenchange","mozfullscreenerror"],["msRequestFullscreen","msExitFullscreen","msFullscreenElement","msFullscreenEnabled","MSFullscreenChange","MSFullscreenError"]],r={};for(n=0;n<o.length;n++)if((t=o[n])&&t[1]in e){for(i=0;i<t.length;i++)r[o[0][i]]=t[i];return r}return!1}();if(!n)return void(t&&t.fancybox&&(t.fancybox.defaults.btnTpl.fullScreen=!1));var i={request:function(t){t=t||e.documentElement,t[n.requestFullscreen](t.ALLOW_KEYBOARD_INPUT)},exit:function(){e[n.exitFullscreen]()},toggle:function(t){t=t||e.documentElement,this.isFullscreen()?this.exit():this.request(t)},isFullscreen:function(){return Boolean(e[n.fullscreenElement])},enabled:function(){return Boolean(e[n.fullscreenEnabled])}};t(e).on({"onInit.fb":function(e,t){var n,o=t.$refs.toolbar.find("[data-fancybox-fullscreen]");t&&!t.FullScreen&&t.group[t.currIndex].opts.fullScreen?(n=t.$refs.container,n.on("click.fb-fullscreen","[data-fancybox-fullscreen]",function(e){e.stopPropagation(),e.preventDefault(),i.toggle(n[0])}),t.opts.fullScreen&&!0===t.opts.fullScreen.autoStart&&i.request(n[0]),t.FullScreen=i):o.hide()},"afterKeydown.fb":function(e,t,n,i,o){t&&t.FullScreen&&70===o&&(i.preventDefault(),t.FullScreen.toggle(t.$refs.container[0]))},"beforeClose.fb":function(e){e&&e.FullScreen&&i.exit()}}),t(e).on(n.fullscreenchange,function(){var e=t.fancybox.getInstance();e.current&&"image"===e.current.type&&e.isAnimating&&(e.current.$content.css("transition","none"),e.isAnimating=!1,e.update(!0,!0,0)),e.trigger("onFullscreenChange",i.isFullscreen())})}(document,window.jQuery),function(e,t){"use strict";var n=function(e){this.instance=e,this.init()};t.extend(n.prototype,{$button:null,$grid:null,$list:null,isVisible:!1,init:function(){var e=this,t=e.instance.group[0],n=e.instance.group[1];e.$button=e.instance.$refs.toolbar.find("[data-fancybox-thumbs]"),e.instance.group.length>1&&e.instance.group[e.instance.currIndex].opts.thumbs&&("image"==t.type||t.opts.thumb||t.opts.$thumb)&&("image"==n.type||n.opts.thumb||n.opts.$thumb)?(e.$button.on("click",function(){e.toggle()}),e.isActive=!0):(e.$button.hide(),e.isActive=!1)},create:function(){var e,n,i=this.instance;this.$grid=t('<div class="fancybox-thumbs"></div>').appendTo(i.$refs.container),e="<ul>",t.each(i.group,function(t,i){n=i.opts.thumb||(i.opts.$thumb?i.opts.$thumb.attr("src"):null),n||"image"!==i.type||(n=i.src),n&&n.length&&(e+='<li data-index="'+t+'"  tabindex="0" class="fancybox-thumbs-loading"><img data-src="'+n+'" /></li>')}),e+="</ul>",this.$list=t(e).appendTo(this.$grid).on("click","li",function(){i.jumpTo(t(this).data("index"))}),this.$list.find("img").hide().one("load",function(){var e,n,i,o,r=t(this).parent().removeClass("fancybox-thumbs-loading"),s=r.outerWidth(),a=r.outerHeight();e=this.naturalWidth||this.width,n=this.naturalHeight||this.height,i=e/s,o=n/a,i>=1&&o>=1&&(i>o?(e/=o,n=a):(e=s,n/=i)),t(this).css({width:Math.floor(e),height:Math.floor(n),"margin-top":Math.min(0,Math.floor(.3*a-.3*n)),"margin-left":Math.min(0,Math.floor(.5*s-.5*e))}).show()}).each(function(){this.src=t(this).data("src")})},focus:function(){this.instance.current&&this.$list.children().removeClass("fancybox-thumbs-active").filter('[data-index="'+this.instance.current.index+'"]').addClass("fancybox-thumbs-active").focus()},close:function(){this.$grid.hide()},update:function(){this.instance.$refs.container.toggleClass("fancybox-show-thumbs",this.isVisible),this.isVisible?(this.$grid||this.create(),this.instance.trigger("onThumbsShow"),this.focus()):this.$grid&&this.instance.trigger("onThumbsHide"),this.instance.update()},hide:function(){this.isVisible=!1,this.update()},show:function(){this.isVisible=!0,this.update()},toggle:function(){this.isVisible=!this.isVisible,this.update()}}),t(e).on({"onInit.fb":function(e,t){t&&!t.Thumbs&&(t.Thumbs=new n(t))},"beforeShow.fb":function(e,t,n,i){var o=t&&t.Thumbs;if(o&&o.isActive){if(n.modal)return o.$button.hide(),void o.hide();i&&!0===t.opts.thumbs.autoStart&&o.show(),o.isVisible&&o.focus()}},"afterKeydown.fb":function(e,t,n,i,o){var r=t&&t.Thumbs;r&&r.isActive&&71===o&&(i.preventDefault(),r.toggle())},"beforeClose.fb":function(e,t){var n=t&&t.Thumbs;n&&n.isVisible&&!1!==t.opts.thumbs.hideOnClose&&n.close()}})}(document,window.jQuery),function(e,t,n){"use strict";function i(){var e=t.location.hash.substr(1),n=e.split("-"),i=n.length>1&&/^\+?\d+$/.test(n[n.length-1])?parseInt(n.pop(-1),10)||1:1,o=n.join("-");return i<1&&(i=1),{hash:e,index:i,gallery:o}}function o(e){var t;""!==e.gallery&&(t=n("[data-fancybox='"+n.escapeSelector(e.gallery)+"']").eq(e.index-1),t.length||(t=n("#"+n.escapeSelector(e.gallery))),t.length&&(s=!1,t.trigger("click")))}function r(e){var t;return!!e&&(t=e.current?e.current.opts:e.opts,t.hash||(t.$orig?t.$orig.data("fancybox"):""))}n.escapeSelector||(n.escapeSelector=function(e){return(e+"").replace(/([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g,function(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e})});var s=!0,a=null,l=null;n(function(){setTimeout(function(){!1!==n.fancybox.defaults.hash&&(n(e).on({"onInit.fb":function(e,t){var n,o;!1!==t.group[t.currIndex].opts.hash&&(n=i(),(o=r(t))&&n.gallery&&o==n.gallery&&(t.currIndex=n.index-1))},"beforeShow.fb":function(n,i,o){var c;o&&!1!==o.opts.hash&&(c=r(i))&&""!==c&&(t.location.hash.indexOf(c)<0&&(i.opts.origHash=t.location.hash),a=c+(i.group.length>1?"-"+(o.index+1):""),"replaceState"in t.history?(l&&clearTimeout(l),l=setTimeout(function(){t.history[s?"pushState":"replaceState"]({},e.title,t.location.pathname+t.location.search+"#"+a),l=null,s=!1},300)):t.location.hash=a)},"beforeClose.fb":function(i,o,s){var c,d;l&&clearTimeout(l),!1!==s.opts.hash&&(c=r(o),d=o&&o.opts.origHash?o.opts.origHash:"",c&&""!==c&&("replaceState"in history?t.history.replaceState({},e.title,t.location.pathname+t.location.search+d):(t.location.hash=d,n(t).scrollTop(o.scrollTop).scrollLeft(o.scrollLeft))),a=null)}}),n(t).on("hashchange.fb",function(){var e=i();n.fancybox.getInstance()?!a||a===e.gallery+"-"+e.index||1===e.index&&a==e.gallery||(a=null,n.fancybox.close()):""!==e.gallery&&o(e)}),o(i()))},50)})}(document,window,window.jQuery),function(e,t,n){"function"==typeof define&&define.amd?define(["jquery"],e):"object"==typeof exports?module.exports=e(require("jquery")):e(t||n)}(function(e){"use strict";var t=function(t,n,i){var o={invalid:[],getCaret:function(){try{var e,n=0,i=t.get(0),r=document.selection,s=i.selectionStart;return r&&-1===navigator.appVersion.indexOf("MSIE 10")?(e=r.createRange(),e.moveStart("character",-o.val().length),n=e.text.length):(s||"0"===s)&&(n=s),n}catch(e){}},setCaret:function(e){try{if(t.is(":focus")){var n,i=t.get(0);i.setSelectionRange?i.setSelectionRange(e,e):(n=i.createTextRange(),n.collapse(!0),n.moveEnd("character",e),n.moveStart("character",e),n.select())}}catch(e){}},events:function(){t.on("keydown.mask",function(e){t.data("mask-keycode",e.keyCode||e.which),t.data("mask-previus-value",t.val()),t.data("mask-previus-caret-pos",o.getCaret()),o.maskDigitPosMapOld=o.maskDigitPosMap}).on(e.jMaskGlobals.useInput?"input.mask":"keyup.mask",o.behaviour).on("paste.mask drop.mask",function(){setTimeout(function(){t.keydown().keyup()},100)}).on("change.mask",function(){t.data("changed",!0)}).on("blur.mask",function(){a===o.val()||t.data("changed")||t.trigger("change"),t.data("changed",!1)}).on("blur.mask",function(){a=o.val()}).on("focus.mask",function(t){!0===i.selectOnFocus&&e(t.target).select()}).on("focusout.mask",function(){i.clearIfNotMatch&&!r.test(o.val())&&o.val("")})},getRegexMask:function(){for(var e,t,i,o,r,a,l=[],c=0;c<n.length;c++)e=s.translation[n.charAt(c)],e?(t=e.pattern.toString().replace(/.{1}$|^.{1}/g,""),i=e.optional,o=e.recursive,o?(l.push(n.charAt(c)),r={digit:n.charAt(c),pattern:t}):l.push(i||o?t+"?":t)):l.push(n.charAt(c).replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&"));return a=l.join(""),r&&(a=a.replace(new RegExp("("+r.digit+"(.*"+r.digit+")?)"),"($1)?").replace(new RegExp(r.digit,"g"),r.pattern)),new RegExp(a)},destroyEvents:function(){t.off(["input","keydown","keyup","paste","drop","blur","focusout",""].join(".mask "))},val:function(e){var n,i=t.is("input"),o=i?"val":"text";return arguments.length>0?(t[o]()!==e&&t[o](e),n=t):n=t[o](),n},calculateCaretPosition:function(){var e=t.data("mask-previus-value")||"",n=o.getMasked(),i=o.getCaret();if(e!==n){var r=t.data("mask-previus-caret-pos")||0,s=n.length,a=e.length,l=0,c=0,d=0,u=0,p=0;for(p=i;p<s&&o.maskDigitPosMap[p];p++)c++;for(p=i-1;p>=0&&o.maskDigitPosMap[p];p--)l++;for(p=i-1;p>=0;p--)o.maskDigitPosMap[p]&&d++;for(p=r-1;p>=0;p--)o.maskDigitPosMapOld[p]&&u++;if(i>a)i=10*s;else if(r>=i&&r!==a){if(!o.maskDigitPosMapOld[i]){var f=i;i-=u-d,i-=l,o.maskDigitPosMap[i]&&(i=f)}}else i>r&&(i+=d-u,i+=c)}return i},behaviour:function(n){n=n||window.event,o.invalid=[];var i=t.data("mask-keycode");if(-1===e.inArray(i,s.byPassKeys)){var r=o.getMasked(),a=o.getCaret();return setTimeout(function(){o.setCaret(o.calculateCaretPosition())},10),o.val(r),o.setCaret(a),o.callbacks(n)}},getMasked:function(e,t){var r,a,l=[],c=void 0===t?o.val():t+"",d=0,u=n.length,p=0,f=c.length,h=1,g="push",m=-1,v=0,y=[];i.reverse?(g="unshift",h=-1,r=0,d=u-1,p=f-1,a=function(){return d>-1&&p>-1}):(r=u-1,a=function(){return d<u&&p<f});for(var b;a();){var w=n.charAt(d),x=c.charAt(p),C=s.translation[w];C?(x.match(C.pattern)?(l[g](x),C.recursive&&(-1===m?m=d:d===r&&d!==m&&(d=m-h),r===m&&(d-=h)),d+=h):x===b?(v--,b=void 0):C.optional?(d+=h,p-=h):C.fallback?(l[g](C.fallback),d+=h,p-=h):o.invalid.push({p:p,v:x,e:C.pattern}),p+=h):(e||l[g](w),x===w?(y.push(p),p+=h):(b=w,y.push(p+v),v++),d+=h)}var k=n.charAt(r);u!==f+1||s.translation[k]||l.push(k);var S=l.join("");return o.mapMaskdigitPositions(S,y,f),S},mapMaskdigitPositions:function(e,t,n){var r=i.reverse?e.length-n:0;o.maskDigitPosMap={};for(var s=0;s<t.length;s++)o.maskDigitPosMap[t[s]+r]=1},callbacks:function(e){var r=o.val(),s=r!==a,l=[r,e,t,i],c=function(e,t,n){"function"==typeof i[e]&&t&&i[e].apply(this,n)};c("onChange",!0===s,l),c("onKeyPress",!0===s,l),c("onComplete",r.length===n.length,l),c("onInvalid",o.invalid.length>0,[r,e,t,o.invalid,i])}};t=e(t);var r,s=this,a=o.val();n="function"==typeof n?n(o.val(),void 0,t,i):n,s.mask=n,s.options=i,s.remove=function(){var e=o.getCaret();return o.destroyEvents(),o.val(s.getCleanVal()),o.setCaret(e),t},s.getCleanVal=function(){return o.getMasked(!0)},s.getMaskedVal=function(e){return o.getMasked(!1,e)},s.init=function(a){if(a=a||!1,i=i||{},s.clearIfNotMatch=e.jMaskGlobals.clearIfNotMatch,s.byPassKeys=e.jMaskGlobals.byPassKeys,s.translation=e.extend({},e.jMaskGlobals.translation,i.translation),s=e.extend(!0,{},s,i),r=o.getRegexMask(),a)o.events(),o.val(o.getMasked());else{i.placeholder&&t.attr("placeholder",i.placeholder),t.data("mask")&&t.attr("autocomplete","off");for(var l=0,c=!0;l<n.length;l++){var d=s.translation[n.charAt(l)];if(d&&d.recursive){c=!1;break}}c&&t.attr("maxlength",n.length),o.destroyEvents(),o.events();var u=o.getCaret();o.val(o.getMasked()),o.setCaret(u)}},s.init(!t.is("input"))};e.maskWatchers={};var n=function(){var n=e(this),o={},r=n.attr("data-mask");if(n.attr("data-mask-reverse")&&(o.reverse=!0),n.attr("data-mask-clearifnotmatch")&&(o.clearIfNotMatch=!0),"true"===n.attr("data-mask-selectonfocus")&&(o.selectOnFocus=!0),i(n,r,o))return n.data("mask",new t(this,r,o))},i=function(t,n,i){i=i||{};var o=e(t).data("mask"),r=JSON.stringify,s=e(t).val()||e(t).text();try{return"function"==typeof n&&(n=n(s)),"object"!=typeof o||r(o.options)!==r(i)||o.mask!==n}catch(e){}};e.fn.mask=function(n,o){o=o||{};var r=this.selector,s=e.jMaskGlobals,a=s.watchInterval,l=o.watchInputs||s.watchInputs,c=function(){if(i(this,n,o))return e(this).data("mask",new t(this,n,o))};return e(this).each(c),r&&""!==r&&l&&(clearInterval(e.maskWatchers[r]),e.maskWatchers[r]=setInterval(function(){e(document).find(r).each(c)},a)),this},e.fn.masked=function(e){return this.data("mask").getMaskedVal(e)},e.fn.unmask=function(){return clearInterval(e.maskWatchers[this.selector]),delete e.maskWatchers[this.selector],this.each(function(){var t=e(this).data("mask");t&&t.remove().removeData("mask")})},e.fn.cleanVal=function(){return this.data("mask").getCleanVal()},e.applyDataMask=function(t){t=t||e.jMaskGlobals.maskElements,(t instanceof e?t:e(t)).filter(e.jMaskGlobals.dataMaskAttr).each(n)};var o={maskElements:"input,td,span,div",dataMaskAttr:"*[data-mask]",dataMask:!0,watchInterval:300,watchInputs:!0,useInput:!/Chrome\/[2-4][0-9]|SamsungBrowser/.test(window.navigator.userAgent)&&function(e){var t,n=document.createElement("div");return e="on"+e,t=e in n,t||(n.setAttribute(e,"return;"),t="function"==typeof n[e]),n=null,t}("input"),watchDataMask:!1,byPassKeys:[9,16,17,18,36,37,38,39,40,91],translation:{0:{pattern:/\d/},9:{pattern:/\d/,optional:!0},"#":{pattern:/\d/,recursive:!0},A:{pattern:/[a-zA-Z0-9]/},S:{pattern:/[a-zA-Z]/}}};e.jMaskGlobals=e.jMaskGlobals||{},o=e.jMaskGlobals=e.extend(!0,{},o,e.jMaskGlobals),o.dataMask&&e.applyDataMask(),setInterval(function(){e.jMaskGlobals.watchDataMask&&e.applyDataMask()},o.watchInterval)},window.jQuery,window.Zepto),function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):e.flatpickr=t()}(this,function(){"use strict";function e(e,t,n){return!1!==n?new Date(e.getTime()).setHours(0,0,0,0)-new Date(t.getTime()).setHours(0,0,0,0):e.getTime()-t.getTime()}function t(e,t,n){void 0===n&&(n=!1);var i;return function(){var o=this,r=arguments;null!==i&&clearTimeout(i),i=window.setTimeout(function(){i=null,n||e.apply(o,r)},t),n&&!i&&e.apply(o,r)}}function n(e){return(e.wheelDelta||-e.deltaY)>=0?1:-1}function i(e,t,n){if(!0===n)return e.classList.add(t);e.classList.remove(t)}function o(e,t,n){var i=window.document.createElement(e);return t=t||"",n=n||"",i.className=t,void 0!==n&&(i.textContent=n),i}function r(e){for(;e.firstChild;)e.removeChild(e.firstChild)}function s(e,t){return t(e)?e:e.parentNode?s(e.parentNode,t):void 0}function a(e){var t=o("div","numInputWrapper"),n=o("input","numInput "+e),i=o("span","arrowUp"),r=o("span","arrowDown");return n.type="text",n.pattern="\\d*",t.appendChild(n),t.appendChild(i),t.appendChild(r),t}function l(l,c){function p(){Ae.utils={getDaysInMonth:function(e,t){return void 0===e&&(e=Ae.currentMonth),void 0===t&&(t=Ae.currentYear),1===e&&(t%4==0&&t%100!=0||t%400==0)?29:Ae.l10n.daysInMonth[e]}}}function h(e){return e.bind(Ae)}function g(e){Ae.config.noCalendar&&!Ae.selectedDates.length&&(Ae.setDate((new Date).setHours(Ae.config.defaultHour,Ae.config.defaultMinute,Ae.config.defaultSeconds),!1),T(),De()),Pe(e),0!==Ae.selectedDates.length&&(!Ae.minDateHasTime||"input"!==e.type||e.target.value.length>=2?(T(),De()):setTimeout(function(){T(),De()},1e3))}function b(e,t){return e%12+12*v("PM"===t)}function S(e){switch(e%24){case 0:case 12:return 12;default:return e%12}}function T(){if(void 0!==Ae.hourElement&&void 0!==Ae.minuteElement){var t=(parseInt(Ae.hourElement.value.slice(-2),10)||0)%24,n=(parseInt(Ae.minuteElement.value,10)||0)%60,i=void 0!==Ae.secondElement?(parseInt(Ae.secondElement.value,10)||0)%60:0;void 0!==Ae.amPM&&(t=b(t,Ae.amPM.textContent)),Ae.config.minDate&&Ae.minDateHasTime&&Ae.latestSelectedDateObj&&0===e(Ae.latestSelectedDateObj,Ae.config.minDate)&&(t=Math.max(t,Ae.config.minDate.getHours()))===Ae.config.minDate.getHours()&&(n=Math.max(n,Ae.config.minDate.getMinutes())),Ae.config.maxDate&&Ae.maxDateHasTime&&Ae.latestSelectedDateObj&&0===e(Ae.latestSelectedDateObj,Ae.config.maxDate)&&(t=Math.min(t,Ae.config.maxDate.getHours()))===Ae.config.maxDate.getHours()&&(n=Math.min(n,Ae.config.maxDate.getMinutes())),D(t,n,i)}}function E(e){var t=e||Ae.latestSelectedDateObj;t&&D(t.getHours(),t.getMinutes(),t.getSeconds())}function D(e,t,n){void 0!==Ae.latestSelectedDateObj&&Ae.latestSelectedDateObj.setHours(e%24,t,n||0,0),Ae.hourElement&&Ae.minuteElement&&!Ae.isMobile&&(Ae.hourElement.value=m(Ae.config.time_24hr?e:(12+e)%12+12*v(e%12==0)),Ae.minuteElement.value=m(t),void 0!==Ae.amPM&&(Ae.amPM.textContent=e>=12?"PM":"AM"),void 0!==Ae.secondElement&&(Ae.secondElement.value=m(n)))}function $(e){var t=parseInt(e.target.value)+(e.delta||0);4!==t.toString().length&&"Enter"!==e.key||(Ae.currentYearElement.blur(),/[^\d]/.test(t.toString())||ee(t))}function M(e,t,n){return t instanceof Array?t.forEach(function(t){return M(e,t,n)}):e instanceof Array?e.forEach(function(e){return M(e,t,n)}):(e.addEventListener(t,n),void Ae._handlers.push({element:e,event:t,handler:n}))}function P(e){return function(t){return 1===t.which&&e(t)}}function A(){Ce("onChange")}function O(){if(Ae.config.wrap&&["open","close","toggle","clear"].forEach(function(e){Array.prototype.forEach.call(Ae.element.querySelectorAll("[data-"+e+"]"),function(t){return M(t,"click",Ae[e])})}),Ae.isMobile)return void we();var e=t(oe,50);if(Ae._debouncedChange=t(A,300),"range"===Ae.config.mode&&Ae.daysContainer&&M(Ae.daysContainer,"mouseover",function(e){return ie(e.target)}),M(window.document.body,"keydown",ne),Ae.config.static||M(Ae._input,"keydown",ne),Ae.config.inline||Ae.config.static||M(window,"resize",e),void 0!==window.ontouchstart&&M(window.document.body,"touchstart",J),M(window.document.body,"mousedown",P(J)),M(Ae._input,"blur",J),!0===Ae.config.clickOpens&&(M(Ae._input,"focus",Ae.open),M(Ae._input,"mousedown",P(Ae.open))),void 0!==Ae.daysContainer&&(Ae.monthNav.addEventListener("wheel",function(e){return e.preventDefault()}),M(Ae.monthNav,"wheel",t($e,10)),M(Ae.monthNav,"mousedown",P(Me)),M(Ae.monthNav,["keyup","increment"],$),M(Ae.daysContainer,"mousedown",P(ue)),Ae.config.animate&&(M(Ae.daysContainer,["webkitAnimationEnd","animationend"],I),M(Ae.monthNav,["webkitAnimationEnd","animationend"],N))),void 0!==Ae.timeContainer&&void 0!==Ae.minuteElement&&void 0!==Ae.hourElement){var n=function(e){return e.target.select()};M(Ae.timeContainer,["wheel","input","increment"],g),M(Ae.timeContainer,"mousedown",P(H)),M(Ae.timeContainer,["wheel","increment"],Ae._debouncedChange),M(Ae.timeContainer,"input",A),M([Ae.hourElement,Ae.minuteElement],["focus","click"],n),void 0!==Ae.secondElement&&M(Ae.secondElement,"focus",function(){return Ae.secondElement&&Ae.secondElement.select()}),void 0!==Ae.amPM&&M(Ae.amPM,"mousedown",P(function(e){g(e),A()}))}}function L(){Ae._animationLoop.forEach(function(e){return e()}),Ae._animationLoop=[]}function I(e){if(Ae.daysContainer&&Ae.daysContainer.childNodes.length>1)switch(e.animationName){case"fpSlideLeft":Ae.daysContainer.lastChild&&Ae.daysContainer.lastChild.classList.remove("slideLeftNew"),Ae.daysContainer.removeChild(Ae.daysContainer.firstChild),Ae.days=Ae.daysContainer.firstChild,L();break;case"fpSlideRight":Ae.daysContainer.firstChild&&Ae.daysContainer.firstChild.classList.remove("slideRightNew"),Ae.daysContainer.removeChild(Ae.daysContainer.lastChild),Ae.days=Ae.daysContainer.firstChild,L()}}function N(e){switch(e.animationName){case"fpSlideLeftNew":case"fpSlideRightNew":Ae.navigationCurrentMonth.classList.remove("slideLeftNew"),Ae.navigationCurrentMonth.classList.remove("slideRightNew");for(var t=Ae.navigationCurrentMonth;t.nextSibling&&/curr/.test(t.nextSibling.className);)Ae.monthNav.removeChild(t.nextSibling);for(;t.previousSibling&&/curr/.test(t.previousSibling.className);)Ae.monthNav.removeChild(t.previousSibling);Ae.oldCurMonth=void 0}}function j(e){var t=void 0!==e?ye(e):Ae.latestSelectedDateObj||(Ae.config.minDate&&Ae.config.minDate>Ae.now?Ae.config.minDate:Ae.config.maxDate&&Ae.config.maxDate<Ae.now?Ae.config.maxDate:Ae.now);try{void 0!==t&&(Ae.currentYear=t.getFullYear(),Ae.currentMonth=t.getMonth())}catch(e){console.error(e.stack),console.warn("Invalid date supplied: "+t)}Ae.redraw()}function H(e){~e.target.className.indexOf("arrow")&&F(e,e.target.classList.contains("arrowUp")?1:-1)}function F(e,t,n){var i=e&&e.target,o=n||i&&i.parentNode&&i.parentNode.firstChild,r=ke("increment");r.delta=t,o&&o.dispatchEvent(r)}function R(){var e=window.document.createDocumentFragment();if(Ae.calendarContainer=o("div","flatpickr-calendar"),Ae.calendarContainer.tabIndex=-1,!Ae.config.noCalendar){if(e.appendChild(_()),Ae.innerContainer=o("div","flatpickr-innerContainer"),Ae.config.weekNumbers){var t=U(),n=t.weekWrapper,r=t.weekNumbers;Ae.innerContainer.appendChild(n),Ae.weekNumbers=r,Ae.weekWrapper=n}Ae.rContainer=o("div","flatpickr-rContainer"),Ae.rContainer.appendChild(X()),Ae.daysContainer||(Ae.daysContainer=o("div","flatpickr-days"),Ae.daysContainer.tabIndex=-1),Y(),Ae.rContainer.appendChild(Ae.daysContainer),Ae.innerContainer.appendChild(Ae.rContainer),e.appendChild(Ae.innerContainer)}Ae.config.enableTime&&e.appendChild(B()),i(Ae.calendarContainer,"rangeMode","range"===Ae.config.mode),i(Ae.calendarContainer,"animate",Ae.config.animate),Ae.calendarContainer.appendChild(e);var s=void 0!==Ae.config.appendTo&&Ae.config.appendTo.nodeType;if((Ae.config.inline||Ae.config.static)&&(Ae.calendarContainer.classList.add(Ae.config.inline?"inline":"static"),Ae.config.inline&&(!s&&Ae.element.parentNode?Ae.element.parentNode.insertBefore(Ae.calendarContainer,Ae._input.nextSibling):void 0!==Ae.config.appendTo&&Ae.config.appendTo.appendChild(Ae.calendarContainer)),Ae.config.static)){var a=o("div","flatpickr-wrapper");Ae.element.parentNode&&Ae.element.parentNode.insertBefore(a,Ae.element),a.appendChild(Ae.element),Ae.altInput&&a.appendChild(Ae.altInput),a.appendChild(Ae.calendarContainer)}Ae.config.static||Ae.config.inline||(void 0!==Ae.config.appendTo?Ae.config.appendTo:window.document.body).appendChild(Ae.calendarContainer)}function q(t,n,r,s){var a=te(n,!0),l=o("span","flatpickr-day "+t,n.getDate().toString());return l.dateObj=n,l.$i=s,l.setAttribute("aria-label",Ae.formatDate(n,Ae.config.ariaDateFormat)),0===e(n,Ae.now)&&(Ae.todayDateElem=l,l.classList.add("today")),a?(l.tabIndex=-1,Se(n)&&(l.classList.add("selected"),Ae.selectedDateElem=l,"range"===Ae.config.mode&&(i(l,"startRange",Ae.selectedDates[0]&&0===e(n,Ae.selectedDates[0])),i(l,"endRange",Ae.selectedDates[1]&&0===e(n,Ae.selectedDates[1]))))):(l.classList.add("disabled"),Ae.selectedDates[0]&&Ae.minRangeDate&&n>Ae.minRangeDate&&n<Ae.selectedDates[0]?Ae.minRangeDate=n:Ae.selectedDates[0]&&Ae.maxRangeDate&&n<Ae.maxRangeDate&&n>Ae.selectedDates[0]&&(Ae.maxRangeDate=n)),"range"===Ae.config.mode&&(Te(n)&&!Se(n)&&l.classList.add("inRange"),1===Ae.selectedDates.length&&void 0!==Ae.minRangeDate&&void 0!==Ae.maxRangeDate&&(n<Ae.minRangeDate||n>Ae.maxRangeDate)&&l.classList.add("notAllowed")),Ae.weekNumbers&&"prevMonthDay"!==t&&r%7==1&&Ae.weekNumbers.insertAdjacentHTML("beforeend","<span class='disabled flatpickr-day'>"+Ae.config.getWeek(n)+"</span>"),Ce("onDayCreate",l),l}function W(e,t){var n=e+t||0,i=void 0!==e?Ae.days.childNodes[n]:Ae.selectedDateElem||Ae.todayDateElem||Ae.days.childNodes[0],o=function(){i=i||Ae.days.childNodes[n],i.focus(),"range"===Ae.config.mode&&ie(i)};if(void 0===i&&0!==t)return t>0?(Ae.changeMonth(1,!0,void 0,!0),n%=42):t<0&&(Ae.changeMonth(-1,!0,void 0,!0),n+=42),z(o);o()}function z(e){!0===Ae.config.animate?Ae._animationLoop.push(e):e()}function Y(e){if(void 0!==Ae.daysContainer){var t=(new Date(Ae.currentYear,Ae.currentMonth,1).getDay()-Ae.l10n.firstDayOfWeek+7)%7,n="range"===Ae.config.mode,i=Ae.utils.getDaysInMonth((Ae.currentMonth-1+12)%12),s=Ae.utils.getDaysInMonth(),a=window.document.createDocumentFragment(),l=i+1-t,c=0;for(Ae.weekNumbers&&Ae.weekNumbers.firstChild&&(Ae.weekNumbers.textContent=""),n&&(Ae.minRangeDate=new Date(Ae.currentYear,Ae.currentMonth-1,l),Ae.maxRangeDate=new Date(Ae.currentYear,Ae.currentMonth+1,(42-t)%s));l<=i;l++,c++)a.appendChild(q("prevMonthDay",new Date(Ae.currentYear,Ae.currentMonth-1,l),l,c));for(l=1;l<=s;l++,c++)a.appendChild(q("",new Date(Ae.currentYear,Ae.currentMonth,l),l,c));for(var d=s+1;d<=42-t;d++,
c++)a.appendChild(q("nextMonthDay",new Date(Ae.currentYear,Ae.currentMonth+1,d%s),d,c));n&&1===Ae.selectedDates.length&&a.childNodes[0]?(Ae._hidePrevMonthArrow=Ae._hidePrevMonthArrow||!!Ae.minRangeDate&&Ae.minRangeDate>a.childNodes[0].dateObj,Ae._hideNextMonthArrow=Ae._hideNextMonthArrow||!!Ae.maxRangeDate&&Ae.maxRangeDate<new Date(Ae.currentYear,Ae.currentMonth+1,1)):Ee();var u=o("div","dayContainer");if(u.appendChild(a),Ae.config.animate&&void 0!==e)for(;Ae.daysContainer.childNodes.length>1;)Ae.daysContainer.removeChild(Ae.daysContainer.firstChild);else r(Ae.daysContainer);e&&e>=0?Ae.daysContainer.appendChild(u):Ae.daysContainer.insertBefore(u,Ae.daysContainer.firstChild),Ae.days=Ae.daysContainer.childNodes[0]}}function _(){var e=window.document.createDocumentFragment();Ae.monthNav=o("div","flatpickr-month"),Ae.prevMonthNav=o("span","flatpickr-prev-month"),Ae.prevMonthNav.innerHTML=Ae.config.prevArrow,Ae.currentMonthElement=o("span","cur-month"),Ae.currentMonthElement.title=Ae.l10n.scrollTitle;var t=a("cur-year");return Ae.currentYearElement=t.childNodes[0],Ae.currentYearElement.title=Ae.l10n.scrollTitle,Ae.config.minDate&&(Ae.currentYearElement.min=Ae.config.minDate.getFullYear().toString()),Ae.config.maxDate&&(Ae.currentYearElement.max=Ae.config.maxDate.getFullYear().toString(),Ae.currentYearElement.disabled=!!Ae.config.minDate&&Ae.config.minDate.getFullYear()===Ae.config.maxDate.getFullYear()),Ae.nextMonthNav=o("span","flatpickr-next-month"),Ae.nextMonthNav.innerHTML=Ae.config.nextArrow,Ae.navigationCurrentMonth=o("span","flatpickr-current-month"),Ae.navigationCurrentMonth.appendChild(Ae.currentMonthElement),Ae.navigationCurrentMonth.appendChild(t),e.appendChild(Ae.prevMonthNav),e.appendChild(Ae.navigationCurrentMonth),e.appendChild(Ae.nextMonthNav),Ae.monthNav.appendChild(e),Object.defineProperty(Ae,"_hidePrevMonthArrow",{get:function(){return Ae.__hidePrevMonthArrow},set:function(e){Ae.__hidePrevMonthArrow!==e&&(Ae.prevMonthNav.style.display=e?"none":"block"),Ae.__hidePrevMonthArrow=e}}),Object.defineProperty(Ae,"_hideNextMonthArrow",{get:function(){return Ae.__hideNextMonthArrow},set:function(e){Ae.__hideNextMonthArrow!==e&&(Ae.nextMonthNav.style.display=e?"none":"block"),Ae.__hideNextMonthArrow=e}}),Ee(),Ae.monthNav}function B(){Ae.calendarContainer.classList.add("hasTime"),Ae.config.noCalendar&&Ae.calendarContainer.classList.add("noCalendar"),Ae.timeContainer=o("div","flatpickr-time"),Ae.timeContainer.tabIndex=-1;var e=o("span","flatpickr-time-separator",":"),t=a("flatpickr-hour");Ae.hourElement=t.childNodes[0];var n=a("flatpickr-minute");if(Ae.minuteElement=n.childNodes[0],Ae.hourElement.tabIndex=Ae.minuteElement.tabIndex=-1,Ae.hourElement.value=m(Ae.latestSelectedDateObj?Ae.latestSelectedDateObj.getHours():Ae.config.time_24hr?Ae.config.defaultHour:S(Ae.config.defaultHour)),Ae.minuteElement.value=m(Ae.latestSelectedDateObj?Ae.latestSelectedDateObj.getMinutes():Ae.config.defaultMinute),Ae.hourElement.step=Ae.config.hourIncrement.toString(),Ae.minuteElement.step=Ae.config.minuteIncrement.toString(),Ae.hourElement.min=Ae.config.time_24hr?"0":"1",Ae.hourElement.max=Ae.config.time_24hr?"23":"12",Ae.minuteElement.min="0",Ae.minuteElement.max="59",Ae.hourElement.title=Ae.minuteElement.title=Ae.l10n.scrollTitle,Ae.timeContainer.appendChild(t),Ae.timeContainer.appendChild(e),Ae.timeContainer.appendChild(n),Ae.config.time_24hr&&Ae.timeContainer.classList.add("time24hr"),Ae.config.enableSeconds){Ae.timeContainer.classList.add("hasSeconds");var i=a("flatpickr-second");Ae.secondElement=i.childNodes[0],Ae.secondElement.value=m(Ae.latestSelectedDateObj?Ae.latestSelectedDateObj.getSeconds():Ae.config.defaultSeconds),Ae.secondElement.step=Ae.minuteElement.step,Ae.secondElement.min=Ae.minuteElement.min,Ae.secondElement.max=Ae.minuteElement.max,Ae.timeContainer.appendChild(o("span","flatpickr-time-separator",":")),Ae.timeContainer.appendChild(i)}return Ae.config.time_24hr||(Ae.amPM=o("span","flatpickr-am-pm",Ae.l10n.amPM[v((Ae.latestSelectedDateObj?Ae.hourElement.value:Ae.config.defaultHour)>11)]),Ae.amPM.title=Ae.l10n.toggleTitle,Ae.amPM.tabIndex=-1,Ae.timeContainer.appendChild(Ae.amPM)),Ae.timeContainer}function X(){Ae.weekdayContainer||(Ae.weekdayContainer=o("div","flatpickr-weekdays"));var e=Ae.l10n.firstDayOfWeek,t=Ae.l10n.weekdays.shorthand.slice();return e>0&&e<t.length&&(t=t.splice(e,t.length).concat(t.splice(0,e))),Ae.weekdayContainer.innerHTML="\n    <span class=flatpickr-weekday>\n      "+t.join("</span><span class=flatpickr-weekday>")+"\n    </span>\n    ",Ae.weekdayContainer}function U(){Ae.calendarContainer.classList.add("hasWeeks");var e=o("div","flatpickr-weekwrapper");e.appendChild(o("span","flatpickr-weekday",Ae.l10n.weekAbbreviation));var t=o("div","flatpickr-weeks");return e.appendChild(t),{weekWrapper:e,weekNumbers:t}}function V(e,t,n,i){void 0===t&&(t=!0),void 0===n&&(n=Ae.config.animate),void 0===i&&(i=!1);var o=t?e:e-Ae.currentMonth;if(!(o<0&&Ae._hidePrevMonthArrow||o>0&&Ae._hideNextMonthArrow)){if(Ae.currentMonth+=o,(Ae.currentMonth<0||Ae.currentMonth>11)&&(Ae.currentYear+=Ae.currentMonth>11?1:-1,Ae.currentMonth=(Ae.currentMonth+12)%12,Ce("onYearChange")),Y(n?o:void 0),!n)return Ce("onMonthChange"),Ee();var r=Ae.navigationCurrentMonth;if(o<0)for(;r.nextSibling&&/curr/.test(r.nextSibling.className);)Ae.monthNav.removeChild(r.nextSibling);else if(o>0)for(;r.previousSibling&&/curr/.test(r.previousSibling.className);)Ae.monthNav.removeChild(r.previousSibling);Ae.oldCurMonth=Ae.navigationCurrentMonth,Ae.navigationCurrentMonth=Ae.monthNav.insertBefore(Ae.oldCurMonth.cloneNode(!0),o>0?Ae.oldCurMonth.nextSibling:Ae.oldCurMonth);var s=Ae.daysContainer;if(s.firstChild&&s.lastChild&&(o>0?(s.firstChild.classList.add("slideLeft"),s.lastChild.classList.add("slideLeftNew"),Ae.oldCurMonth.classList.add("slideLeft"),Ae.navigationCurrentMonth.classList.add("slideLeftNew")):o<0&&(s.firstChild.classList.add("slideRightNew"),s.lastChild.classList.add("slideRight"),Ae.oldCurMonth.classList.add("slideRight"),Ae.navigationCurrentMonth.classList.add("slideRightNew"))),Ae.currentMonthElement=Ae.navigationCurrentMonth.firstChild,Ae.currentYearElement=Ae.navigationCurrentMonth.lastChild.childNodes[0],Ee(),Ae.oldCurMonth.firstChild&&(Ae.oldCurMonth.firstChild.textContent=u(Ae.currentMonth-o,Ae.config.shorthandCurrentMonth,Ae.l10n)),Ce("onMonthChange"),i&&document.activeElement&&document.activeElement.$i){var a=document.activeElement.$i;z(function(){W(a,0)})}}}function G(e){void 0===e&&(e=!0),Ae.input.value="",Ae.altInput&&(Ae.altInput.value=""),Ae.mobileInput&&(Ae.mobileInput.value=""),Ae.selectedDates=[],Ae.latestSelectedDateObj=void 0,Ae.showTimeInput=!1,Ae.redraw(),e&&Ce("onChange")}function K(){Ae.isOpen=!1,Ae.isMobile||(Ae.calendarContainer.classList.remove("open"),Ae._input.classList.remove("active")),Ce("onClose")}function Z(){void 0!==Ae.config&&Ce("onDestroy");for(var e=Ae._handlers.length;e--;){var t=Ae._handlers[e];t.element.removeEventListener(t.event,t.handler)}Ae._handlers=[],Ae.mobileInput?(Ae.mobileInput.parentNode&&Ae.mobileInput.parentNode.removeChild(Ae.mobileInput),Ae.mobileInput=void 0):Ae.calendarContainer&&Ae.calendarContainer.parentNode&&Ae.calendarContainer.parentNode.removeChild(Ae.calendarContainer),Ae.altInput&&(Ae.input.type="text",Ae.altInput.parentNode&&Ae.altInput.parentNode.removeChild(Ae.altInput),delete Ae.altInput),Ae.input&&(Ae.input.type=Ae.input._type,Ae.input.classList.remove("flatpickr-input"),Ae.input.removeAttribute("readonly"),Ae.input.value=""),["_showTimeInput","latestSelectedDateObj","_hideNextMonthArrow","_hidePrevMonthArrow","__hideNextMonthArrow","__hidePrevMonthArrow","isMobile","isOpen","selectedDateElem","minDateHasTime","maxDateHasTime","days","daysContainer","_input","_positionElement","innerContainer","rContainer","monthNav","todayDateElem","calendarContainer","weekdayContainer","prevMonthNav","nextMonthNav","currentMonthElement","currentYearElement","navigationCurrentMonth","selectedDateElem","config"].forEach(function(e){try{delete Ae[e]}catch(e){}})}function Q(e){return!(!Ae.config.appendTo||!Ae.config.appendTo.contains(e))||Ae.calendarContainer.contains(e)}function J(e){if(Ae.isOpen&&!Ae.config.inline){var t=Q(e.target),n=e.target===Ae.input||e.target===Ae.altInput||Ae.element.contains(e.target)||e.path&&e.path.indexOf&&(~e.path.indexOf(Ae.input)||~e.path.indexOf(Ae.altInput));("blur"===e.type?n&&e.relatedTarget&&!Q(e.relatedTarget):!n&&!t)&&-1===Ae.config.ignoredFocusElements.indexOf(e.target)&&(Ae.close(),"range"===Ae.config.mode&&1===Ae.selectedDates.length&&(Ae.clear(!1),Ae.redraw()))}}function ee(e){if(!(!e||Ae.currentYearElement.min&&e<parseInt(Ae.currentYearElement.min)||Ae.currentYearElement.max&&e>parseInt(Ae.currentYearElement.max))){var t=e,n=Ae.currentYear!==t;Ae.currentYear=t||Ae.currentYear,Ae.config.maxDate&&Ae.currentYear===Ae.config.maxDate.getFullYear()?Ae.currentMonth=Math.min(Ae.config.maxDate.getMonth(),Ae.currentMonth):Ae.config.minDate&&Ae.currentYear===Ae.config.minDate.getFullYear()&&(Ae.currentMonth=Math.max(Ae.config.minDate.getMonth(),Ae.currentMonth)),n&&(Ae.redraw(),Ce("onYearChange"))}}function te(t,n){void 0===n&&(n=!0);var i=Ae.parseDate(t,void 0,n);if(Ae.config.minDate&&i&&e(i,Ae.config.minDate,void 0!==n?n:!Ae.minDateHasTime)<0||Ae.config.maxDate&&i&&e(i,Ae.config.maxDate,void 0!==n?n:!Ae.maxDateHasTime)>0)return!1;if(!Ae.config.enable.length&&!Ae.config.disable.length)return!0;if(void 0===i)return!1;for(var o=Ae.config.enable.length>0,r=o?Ae.config.enable:Ae.config.disable,s=0,a=void 0;s<r.length;s++){if("function"==typeof(a=r[s])&&a(i))return o;if(a instanceof Date&&void 0!==i&&a.getTime()===i.getTime())return o;if("string"==typeof a&&void 0!==i){var l=Ae.parseDate(a,void 0,!0);return l&&l.getTime()===i.getTime()?o:!o}if("object"==typeof a&&void 0!==i&&a.from&&a.to&&i.getTime()>=a.from.getTime()&&i.getTime()<=a.to.getTime())return o}return!o}function ne(e){var t=e.target===Ae._input,n=Q(e.target),i=Ae.config.allowInput,o=Ae.isOpen&&(!i||!t),r=Ae.config.inline&&t&&!i;if("Enter"===e.key&&t){if(i)return Ae.setDate(Ae._input.value,!0,e.target===Ae.altInput?Ae.config.altFormat:Ae.config.dateFormat),e.target.blur();Ae.open()}else if(n||o||r){var s=!!Ae.timeContainer&&Ae.timeContainer.contains(e.target);switch(e.key){case"Enter":s?De():ue(e);break;case"Escape":e.preventDefault(),Ae.close();break;case"Backspace":case"Delete":t&&!Ae.config.allowInput&&Ae.clear();break;case"ArrowLeft":case"ArrowRight":if(s)Ae.hourElement&&Ae.hourElement.focus();else if(e.preventDefault(),Ae.daysContainer){var a="ArrowRight"===e.key?1:-1;e.ctrlKey?V(a,!0,void 0,!0):W(e.target.$i,a)}break;case"ArrowUp":case"ArrowDown":e.preventDefault();var l="ArrowDown"===e.key?1:-1;Ae.daysContainer&&void 0!==e.target.$i?e.ctrlKey?(ee(Ae.currentYear-l),W(e.target.$i,0)):s||W(e.target.$i,7*l):Ae.config.enableTime&&(!s&&Ae.hourElement&&Ae.hourElement.focus(),g(e),Ae._debouncedChange());break;case"Tab":e.target===Ae.hourElement?(e.preventDefault(),Ae.minuteElement.select()):e.target===Ae.minuteElement&&(Ae.secondElement||Ae.amPM)?(e.preventDefault(),void 0!==Ae.secondElement?Ae.secondElement.focus():void 0!==Ae.amPM&&Ae.amPM.focus()):e.target===Ae.secondElement&&Ae.amPM&&(e.preventDefault(),Ae.amPM.focus());break;case"a":void 0!==Ae.amPM&&e.target===Ae.amPM&&(Ae.amPM.textContent="AM",T(),De());break;case"p":void 0!==Ae.amPM&&e.target===Ae.amPM&&(Ae.amPM.textContent="PM",T(),De())}Ce("onKeyDown",e)}}function ie(e){if(1===Ae.selectedDates.length&&e.classList.contains("flatpickr-day")&&void 0!==Ae.minRangeDate&&void 0!==Ae.maxRangeDate){for(var t=e.dateObj,n=Ae.parseDate(Ae.selectedDates[0],void 0,!0),i=Math.min(t.getTime(),Ae.selectedDates[0].getTime()),o=Math.max(t.getTime(),Ae.selectedDates[0].getTime()),r=!1,s=i;s<o;s+=f.DAY)if(!te(new Date(s))){r=!0;break}for(var a=Ae.days.childNodes[0].dateObj.getTime(),l=0;l<42;l++,a+=f.DAY)!function(s,a){var l=s<Ae.minRangeDate.getTime()||s>Ae.maxRangeDate.getTime(),c=Ae.days.childNodes[a];if(l)return c.classList.add("notAllowed"),["inRange","startRange","endRange"].forEach(function(e){c.classList.remove(e)}),"continue";if(r&&!l)return"continue";["startRange","inRange","endRange","notAllowed"].forEach(function(e){c.classList.remove(e)});var d=Math.max(Ae.minRangeDate.getTime(),i),u=Math.min(Ae.maxRangeDate.getTime(),o);e.classList.add(t<Ae.selectedDates[0]?"startRange":"endRange"),n<t&&s===n.getTime()?c.classList.add("startRange"):n>t&&s===n.getTime()&&c.classList.add("endRange"),s>=d&&s<=u&&c.classList.add("inRange")}(a,l)}}function oe(){!Ae.isOpen||Ae.config.static||Ae.config.inline||ce()}function re(e,t){if(void 0===t&&(t=Ae._input),Ae.isMobile)return e&&(e.preventDefault(),e.target&&e.target.blur()),setTimeout(function(){void 0!==Ae.mobileInput&&Ae.mobileInput.click()},0),void Ce("onOpen");Ae._input.disabled||Ae.config.inline||(Ae.isOpen=!0,Ae.calendarContainer.classList.add("open"),ce(t),Ae._input.classList.add("active"),Ce("onOpen"))}function se(e){return function(t){var n=Ae.config["_"+e+"Date"]=Ae.parseDate(t),i=Ae.config["_"+("min"===e?"max":"min")+"Date"];void 0!==n&&(Ae["min"===e?"minDateHasTime":"maxDateHasTime"]=n.getHours()>0||n.getMinutes()>0||n.getSeconds()>0),Ae.selectedDates&&(Ae.selectedDates=Ae.selectedDates.filter(function(e){return te(e)}),Ae.selectedDates.length||"min"!==e||E(n),De()),Ae.daysContainer&&(de(),void 0!==n?Ae.currentYearElement[e]=n.getFullYear().toString():Ae.currentYearElement.removeAttribute(e),Ae.currentYearElement.disabled=!!i&&void 0!==n&&i.getFullYear()===n.getFullYear())}}function ae(){var e=["wrap","weekNumbers","allowInput","clickOpens","time_24hr","enableTime","noCalendar","altInput","shorthandCurrentMonth","inline","static","enableSeconds","disableMobile"],t=["onChange","onClose","onDayCreate","onDestroy","onKeyDown","onMonthChange","onOpen","onParseConfig","onReady","onValueUpdate","onYearChange"];Ae.config=d({},k.defaultConfig);var n=d({},c,JSON.parse(JSON.stringify(l.dataset||{}))),i={};Object.defineProperty(Ae.config,"enable",{get:function(){return Ae.config._enable||[]},set:function(e){Ae.config._enable=ge(e)}}),Object.defineProperty(Ae.config,"disable",{get:function(){return Ae.config._disable||[]},set:function(e){Ae.config._disable=ge(e)}}),!n.dateFormat&&n.enableTime&&(i.dateFormat=n.noCalendar?"H:i"+(n.enableSeconds?":S":""):k.defaultConfig.dateFormat+" H:i"+(n.enableSeconds?":S":"")),n.altInput&&n.enableTime&&!n.altFormat&&(i.altFormat=n.noCalendar?"h:i"+(n.enableSeconds?":S K":" K"):k.defaultConfig.altFormat+" h:i"+(n.enableSeconds?":S":"")+" K"),Object.defineProperty(Ae.config,"minDate",{get:function(){return Ae.config._minDate},set:se("min")}),Object.defineProperty(Ae.config,"maxDate",{get:function(){return Ae.config._maxDate},set:se("max")}),Object.assign(Ae.config,i,n);for(var o=0;o<e.length;o++)Ae.config[e[o]]=!0===Ae.config[e[o]]||"true"===Ae.config[e[o]];for(var o=t.length;o--;)void 0!==Ae.config[t[o]]&&(Ae.config[t[o]]=y(Ae.config[t[o]]||[]).map(h));for(var o=0;o<Ae.config.plugins.length;o++){var r=Ae.config.plugins[o](Ae)||{};for(var s in r)~t.indexOf(s)?Ae.config[s]=y(r[s]).map(h).concat(Ae.config[s]):void 0===n[s]&&(Ae.config[s]=r[s])}Ae.isMobile=!Ae.config.disableMobile&&!Ae.config.inline&&"single"===Ae.config.mode&&!Ae.config.disable.length&&!Ae.config.enable.length&&!Ae.config.weekNumbers&&/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),Ce("onParseConfig")}function le(){"object"!=typeof Ae.config.locale&&void 0===k.l10ns[Ae.config.locale]&&console.warn("flatpickr: invalid locale "+Ae.config.locale),Ae.l10n=d({},k.l10ns.default,"object"==typeof Ae.config.locale?Ae.config.locale:"default"!==Ae.config.locale?k.l10ns[Ae.config.locale]:void 0)}function ce(e){if(void 0===e&&(e=Ae._positionElement),void 0!==Ae.calendarContainer){var t=Ae.calendarContainer.offsetHeight,n=Ae.calendarContainer.offsetWidth,o=Ae.config.position,r=e.getBoundingClientRect(),s=window.innerHeight-r.bottom,a="above"===o||"below"!==o&&s<t&&r.top>t,l=window.pageYOffset+r.top+(a?-t-2:e.offsetHeight+2);if(i(Ae.calendarContainer,"arrowTop",!a),i(Ae.calendarContainer,"arrowBottom",a),!Ae.config.inline){var c=window.pageXOffset+r.left,d=window.document.body.offsetWidth-r.right,u=c+n>window.document.body.offsetWidth;i(Ae.calendarContainer,"rightMost",u),Ae.config.static||(Ae.calendarContainer.style.top=l+"px",u?(Ae.calendarContainer.style.left="auto",Ae.calendarContainer.style.right=d+"px"):(Ae.calendarContainer.style.left=c+"px",Ae.calendarContainer.style.right="auto"))}}}function de(){Ae.config.noCalendar||Ae.isMobile||(X(),Ee(),Y())}function ue(t){t.preventDefault(),t.stopPropagation();var n=function(e){return e.classList&&e.classList.contains("flatpickr-day")&&!e.classList.contains("disabled")&&!e.classList.contains("notAllowed")},i=s(t.target,n);if(void 0!==i){var o=i,r=Ae.latestSelectedDateObj=new Date(o.dateObj.getTime()),a=r.getMonth()!==Ae.currentMonth&&"range"!==Ae.config.mode;if(Ae.selectedDateElem=o,"single"===Ae.config.mode)Ae.selectedDates=[r];else if("multiple"===Ae.config.mode){var l=Se(r);l?Ae.selectedDates.splice(parseInt(l),1):Ae.selectedDates.push(r)}else"range"===Ae.config.mode&&(2===Ae.selectedDates.length&&Ae.clear(),Ae.selectedDates.push(r),0!==e(r,Ae.selectedDates[0],!0)&&Ae.selectedDates.sort(function(e,t){return e.getTime()-t.getTime()}));if(T(),a){var c=Ae.currentYear!==r.getFullYear();Ae.currentYear=r.getFullYear(),Ae.currentMonth=r.getMonth(),c&&Ce("onYearChange"),Ce("onMonthChange")}if(Y(),Ae.config.minDate&&Ae.minDateHasTime&&Ae.config.enableTime&&0===e(r,Ae.config.minDate)&&E(Ae.config.minDate),De(),Ae.config.enableTime&&setTimeout(function(){return Ae.showTimeInput=!0},50),"range"===Ae.config.mode&&(1===Ae.selectedDates.length?(ie(o),Ae._hidePrevMonthArrow=Ae._hidePrevMonthArrow||void 0!==Ae.minRangeDate&&Ae.minRangeDate>Ae.days.childNodes[0].dateObj,Ae._hideNextMonthArrow=Ae._hideNextMonthArrow||void 0!==Ae.maxRangeDate&&Ae.maxRangeDate<new Date(Ae.currentYear,Ae.currentMonth+1,1)):Ee()),Ce("onChange"),a?z(function(){return Ae.selectedDateElem&&Ae.selectedDateElem.focus()}):W(o.$i,0),void 0!==Ae.hourElement&&setTimeout(function(){return void 0!==Ae.hourElement&&Ae.hourElement.select()},451),Ae.config.closeOnSelect){var d="single"===Ae.config.mode&&!Ae.config.enableTime,u="range"===Ae.config.mode&&2===Ae.selectedDates.length&&!Ae.config.enableTime;(d||u)&&Ae.close()}}}function pe(e,t){null!==e&&"object"==typeof e?Object.assign(Ae.config,e):Ae.config[e]=t,Ae.redraw(),j()}function fe(e,t){var n=[];if(e instanceof Array)n=e.map(function(e){return Ae.parseDate(e,t)});else if(e instanceof Date||"number"==typeof e)n=[Ae.parseDate(e,t)];else if("string"==typeof e)switch(Ae.config.mode){case"single":n=[Ae.parseDate(e,t)];break;case"multiple":n=e.split("; ").map(function(e){return Ae.parseDate(e,t)});break;case"range":n=e.split(Ae.l10n.rangeSeparator).map(function(e){return Ae.parseDate(e,t)})}Ae.selectedDates=n.filter(function(e){return e instanceof Date&&te(e,!1)}),Ae.selectedDates.sort(function(e,t){return e.getTime()-t.getTime()})}function he(e,t,n){if(void 0===t&&(t=!1),void 0===n&&(n=void 0),0!==e&&!e)return Ae.clear(t);fe(e,n),Ae.showTimeInput=Ae.selectedDates.length>0,Ae.latestSelectedDateObj=Ae.selectedDates[0],Ae.redraw(),j(),E(),De(t),t&&Ce("onChange")}function ge(e){return e.map(function(e){return"string"==typeof e||"number"==typeof e||e instanceof Date?Ae.parseDate(e,void 0,!0):e&&"object"==typeof e&&e.from&&e.to?{from:Ae.parseDate(e.from,void 0),to:Ae.parseDate(e.to,void 0)}:e}).filter(function(e){return e})}function me(){Ae.selectedDates=[],Ae.now=new Date;var e=Ae.config.defaultDate||Ae.input.value;e&&fe(e,Ae.config.dateFormat);var t=Ae.selectedDates.length?Ae.selectedDates[0]:Ae.config.minDate&&Ae.config.minDate.getTime()>Ae.now.getTime()?Ae.config.minDate:Ae.config.maxDate&&Ae.config.maxDate.getTime()<Ae.now.getTime()?Ae.config.maxDate:Ae.now;Ae.currentYear=t.getFullYear(),Ae.currentMonth=t.getMonth(),Ae.selectedDates.length&&(Ae.latestSelectedDateObj=Ae.selectedDates[0]),Ae.minDateHasTime=!!Ae.config.minDate&&(Ae.config.minDate.getHours()>0||Ae.config.minDate.getMinutes()>0||Ae.config.minDate.getSeconds()>0),Ae.maxDateHasTime=!!Ae.config.maxDate&&(Ae.config.maxDate.getHours()>0||Ae.config.maxDate.getMinutes()>0||Ae.config.maxDate.getSeconds()>0),Object.defineProperty(Ae,"showTimeInput",{get:function(){return Ae._showTimeInput},set:function(e){Ae._showTimeInput=e,Ae.calendarContainer&&i(Ae.calendarContainer,"showTimeInput",e),ce()}})}function ve(e,t){return void 0!==Ae.config&&void 0!==Ae.config.formatDate?Ae.config.formatDate(e,t):t.split("").map(function(t,n,i){return C[t]&&"\\"!==i[n-1]?C[t](e,Ae.l10n,Ae.config):"\\"!==t?t:""}).join("")}function ye(e,t,n){if(0===e||e){var i,o=e;if(e instanceof Date)i=new Date(e.getTime());else if("string"!=typeof e&&void 0!==e.toFixed)i=new Date(e);else if("string"==typeof e){var r=t||(Ae.config||k.defaultConfig).dateFormat,s=String(e).trim();if("today"===s)i=new Date,n=!0;else if(/Z$/.test(s)||/GMT$/.test(s))i=new Date(e);else if(Ae.config&&Ae.config.parseDate)i=Ae.config.parseDate(e,r);else{i=Ae.config&&Ae.config.noCalendar?new Date((new Date).setHours(0,0,0,0)):new Date((new Date).getFullYear(),0,1,0,0,0,0);for(var a=void 0,l=[],c=0,d=0,u="";c<r.length;c++){var p=r[c],f="\\"===p,h="\\"===r[c-1]||f;if(x[p]&&!h){u+=x[p];var g=new RegExp(u).exec(e);g&&(a=!0)&&l["Y"!==p?"push":"unshift"]({fn:w[p],val:g[++d]})}else f||(u+=".");l.forEach(function(e){var t=e.fn,n=e.val;return i=t(i,n,Ae.l10n)||i})}i=a?i:void 0}}return i instanceof Date?(!0===n&&i.setHours(0,0,0,0),i):(console.warn("flatpickr: invalid date "+o),void console.info(Ae.element))}}function be(){if(Ae.input=Ae.config.wrap?l.querySelector("[data-input]"):l,!Ae.input)return void console.warn("Error: invalid input element specified",Ae.input);Ae.input._type=Ae.input.type,Ae.input.type="text",Ae.input.classList.add("flatpickr-input"),Ae._input=Ae.input,Ae.config.altInput&&(Ae.altInput=o(Ae.input.nodeName,Ae.input.className+" "+Ae.config.altInputClass),Ae._input=Ae.altInput,Ae.altInput.placeholder=Ae.input.placeholder,Ae.altInput.disabled=Ae.input.disabled,Ae.altInput.required=Ae.input.required,Ae.altInput.type="text",Ae.input.type="hidden",!Ae.config.static&&Ae.input.parentNode&&Ae.input.parentNode.insertBefore(Ae.altInput,Ae.input.nextSibling)),Ae.config.allowInput||Ae._input.setAttribute("readonly","readonly"),Ae._positionElement=Ae.config.positionElement||Ae._input}function we(){var e=Ae.config.enableTime?Ae.config.noCalendar?"time":"datetime-local":"date";Ae.mobileInput=o("input",Ae.input.className+" flatpickr-mobile"),Ae.mobileInput.step=Ae.input.getAttribute("step")||"any",Ae.mobileInput.tabIndex=1,Ae.mobileInput.type=e,Ae.mobileInput.disabled=Ae.input.disabled,Ae.mobileInput.placeholder=Ae.input.placeholder,Ae.mobileFormatStr="datetime-local"===e?"Y-m-d\\TH:i:S":"date"===e?"Y-m-d":"H:i:S",Ae.selectedDates.length&&(Ae.mobileInput.defaultValue=Ae.mobileInput.value=Ae.formatDate(Ae.selectedDates[0],Ae.mobileFormatStr)),Ae.config.minDate&&(Ae.mobileInput.min=Ae.formatDate(Ae.config.minDate,"Y-m-d")),Ae.config.maxDate&&(Ae.mobileInput.max=Ae.formatDate(Ae.config.maxDate,"Y-m-d")),Ae.input.type="hidden",void 0!==Ae.altInput&&(Ae.altInput.type="hidden");try{Ae.input.parentNode&&Ae.input.parentNode.insertBefore(Ae.mobileInput,Ae.input.nextSibling)}catch(e){}Ae.mobileInput.addEventListener("change",function(e){Ae.setDate(e.target.value,!1,Ae.mobileFormatStr),Ce("onChange"),Ce("onClose")})}function xe(){if(Ae.isOpen)return Ae.close();Ae.open()}function Ce(e,t){var n=Ae.config[e];if(void 0!==n&&n.length>0)for(var i=0;n[i]&&i<n.length;i++)n[i](Ae.selectedDates,Ae.input.value,Ae,t);"onChange"===e&&(Ae.input.dispatchEvent(ke("change")),Ae.input.dispatchEvent(ke("input")))}function ke(e){var t=document.createEvent("Event");return t.initEvent(e,!0,!0),t}function Se(t){for(var n=0;n<Ae.selectedDates.length;n++)if(0===e(Ae.selectedDates[n],t))return""+n;return!1}function Te(t){return!("range"!==Ae.config.mode||Ae.selectedDates.length<2)&&(e(t,Ae.selectedDates[0])>=0&&e(t,Ae.selectedDates[1])<=0)}function Ee(){Ae.config.noCalendar||Ae.isMobile||!Ae.monthNav||(Ae.currentMonthElement.textContent=u(Ae.currentMonth,Ae.config.shorthandCurrentMonth,Ae.l10n)+" ",Ae.currentYearElement.value=Ae.currentYear.toString(),Ae._hidePrevMonthArrow=void 0!==Ae.config.minDate&&(Ae.currentYear===Ae.config.minDate.getFullYear()?Ae.currentMonth<=Ae.config.minDate.getMonth():Ae.currentYear<Ae.config.minDate.getFullYear()),Ae._hideNextMonthArrow=void 0!==Ae.config.maxDate&&(Ae.currentYear===Ae.config.maxDate.getFullYear()?Ae.currentMonth+1>Ae.config.maxDate.getMonth():Ae.currentYear>Ae.config.maxDate.getFullYear()))}function De(e){if(void 0===e&&(e=!0),!Ae.selectedDates.length)return Ae.clear(e);void 0!==Ae.mobileInput&&Ae.mobileFormatStr&&(Ae.mobileInput.value=void 0!==Ae.latestSelectedDateObj?Ae.formatDate(Ae.latestSelectedDateObj,Ae.mobileFormatStr):"");var t="range"!==Ae.config.mode?Ae.config.conjunction:Ae.l10n.rangeSeparator;Ae.input.value=Ae.selectedDates.map(function(e){return Ae.formatDate(e,Ae.config.dateFormat)}).join(t),void 0!==Ae.altInput&&(Ae.altInput.value=Ae.selectedDates.map(function(e){return Ae.formatDate(e,Ae.config.altFormat)}).join(t)),!1!==e&&Ce("onValueUpdate")}function $e(e){e.preventDefault();var t=Ae.currentYearElement.parentNode&&Ae.currentYearElement.parentNode.contains(e.target);if(e.target===Ae.currentMonthElement||t){var i=n(e);t?(ee(Ae.currentYear+i),e.target.value=Ae.currentYear.toString()):Ae.changeMonth(i,!0,!1)}}function Me(e){var t=Ae.prevMonthNav.contains(e.target),n=Ae.nextMonthNav.contains(e.target);t||n?V(t?-1:1):e.target===Ae.currentYearElement?(e.preventDefault(),Ae.currentYearElement.select()):"arrowUp"===e.target.className?Ae.changeYear(Ae.currentYear+1):"arrowDown"===e.target.className&&Ae.changeYear(Ae.currentYear-1)}function Pe(e){e.preventDefault();var t="keydown"===e.type,n=e.target;void 0!==Ae.amPM&&e.target===Ae.amPM&&(Ae.amPM.textContent=Ae.l10n.amPM["AM"===Ae.amPM.textContent?1:0]);var i=Number(n.min),o=Number(n.max),r=Number(n.step),s=parseInt(n.value,10),a=e.delta||(t?38===e.which?1:-1:Math.max(-1,Math.min(1,e.wheelDelta||-e.deltaY))||0),l=s+r*a;if(void 0!==n.value&&2===n.value.length){var c=n===Ae.hourElement,d=n===Ae.minuteElement;l<i?(l=o+l+v(!c)+(v(c)&&v(!Ae.amPM)),d&&F(void 0,-1,Ae.hourElement)):l>o&&(l=n===Ae.hourElement?l-o-v(!Ae.amPM):i,d&&F(void 0,1,Ae.hourElement)),Ae.amPM&&c&&(1===r?l+s===23:Math.abs(l-s)>r)&&(Ae.amPM.textContent="PM"===Ae.amPM.textContent?"AM":"PM"),n.value=m(l)}}var Ae={};return Ae.parseDate=ye,Ae.formatDate=ve,Ae._animationLoop=[],Ae._handlers=[],Ae._bind=M,Ae._setHoursFromDate=E,Ae.changeMonth=V,Ae.changeYear=ee,Ae.clear=G,Ae.close=K,Ae._createElement=o,Ae.destroy=Z,Ae.isEnabled=te,Ae.jumpToDate=j,Ae.open=re,Ae.redraw=de,Ae.set=pe,Ae.setDate=he,Ae.toggle=xe,function(){Ae.element=Ae.input=l,Ae.isOpen=!1,ae(),le(),be(),me(),p(),Ae.isMobile||R(),O(),(Ae.selectedDates.length||Ae.config.noCalendar)&&(Ae.config.enableTime&&E(Ae.config.noCalendar?Ae.latestSelectedDateObj||Ae.config.minDate:void 0),De(!1)),Ae.showTimeInput=Ae.selectedDates.length>0||Ae.config.noCalendar,void 0!==Ae.weekWrapper&&void 0!==Ae.daysContainer&&(Ae.calendarContainer.style.width=Ae.daysContainer.offsetWidth+Ae.weekWrapper.offsetWidth+"px"),Ae.isMobile||ce(),Ce("onReady")}(),Ae}function c(e,t){for(var n=Array.prototype.slice.call(e),i=[],o=0;o<n.length;o++){var r=n[o];try{if(null!==r.getAttribute("data-fp-omit"))continue;void 0!==r._flatpickr&&(r._flatpickr.destroy(),r._flatpickr=void 0),r._flatpickr=l(r,t||{}),i.push(r._flatpickr)}catch(e){console.warn(e,e.stack)}}return 1===i.length?i[0]:i}var d=Object.assign||function(e){for(var t,n=1,i=arguments.length;n<i;n++){t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e},u=function(e,t,n){return n.months[t?"shorthand":"longhand"][e]},p=function(e){var t=new Date(e.getFullYear(),0,1);return Math.ceil(((e.getTime()-t.getTime())/864e5+t.getDay()+1)/7)},f={DAY:864e5},h={_disable:[],_enable:[],allowInput:!1,altFormat:"F j, Y",altInput:!1,altInputClass:"form-control input",animate:"object"==typeof window&&-1===window.navigator.userAgent.indexOf("MSIE"),ariaDateFormat:"F j, Y",clickOpens:!0,closeOnSelect:!0,conjunction:", ",dateFormat:"Y-m-d",defaultHour:12,defaultMinute:0,defaultSeconds:0,disable:[],disableMobile:!1,enable:[],enableSeconds:!1,enableTime:!1,getWeek:p,hourIncrement:1,ignoredFocusElements:[],inline:!1,locale:"default",minuteIncrement:5,mode:"single",nextArrow:"<svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 17 17'><g></g><path d='M13.207 8.472l-7.854 7.854-0.707-0.707 7.146-7.146-7.146-7.148 0.707-0.707 7.854 7.854z' /></svg>",noCalendar:!1,onChange:[],onClose:[],onDayCreate:[],onDestroy:[],onKeyDown:[],onMonthChange:[],onOpen:[],onParseConfig:[],onReady:[],onValueUpdate:[],onYearChange:[],plugins:[],position:"auto",positionElement:void 0,prevArrow:"<svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 17 17'><g></g><path d='M5.207 8.471l7.146 7.147-0.707 0.707-7.853-7.854 7.854-7.853 0.707 0.707-7.147 7.146z' /></svg>",shorthandCurrentMonth:!1,static:!1,time_24hr:!1,weekNumbers:!1,wrap:!1},g={weekdays:{shorthand:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],longhand:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},months:{shorthand:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],longhand:["January","February","March","April","May","June","July","August","September","October","November","December"]},daysInMonth:[31,28,31,30,31,30,31,31,30,31,30,31],firstDayOfWeek:0,ordinal:function(e){var t=e%100;if(t>3&&t<21)return"th";switch(t%10){case 1:return"st";case 2:return"nd";case 3:return"rd";default:return"th"}},rangeSeparator:" to ",weekAbbreviation:"Wk",scrollTitle:"Scroll to increment",toggleTitle:"Click to toggle",amPM:["AM","PM"]},m=function(e){return("0"+e).slice(-2)},v=function(e){return!0===e?1:0},y=function(e){return e instanceof Array?e:[e]},b=function(){},w={D:b,F:function(e,t,n){e.setMonth(n.months.longhand.indexOf(t))},G:function(e,t){e.setHours(parseFloat(t))},H:function(e,t){e.setHours(parseFloat(t))},J:function(e,t){e.setDate(parseFloat(t))},K:function(e,t){e.setHours(e.getHours()%12+12*v(/pm/i.test(t)))},M:function(e,t,n){e.setMonth(n.months.shorthand.indexOf(t))},S:function(e,t){e.setSeconds(parseFloat(t))},U:function(e,t){return new Date(1e3*parseFloat(t))},W:function(e,t){var n=parseInt(t);return new Date(e.getFullYear(),0,2+7*(n-1),0,0,0,0)},Y:function(e,t){e.setFullYear(parseFloat(t))},Z:function(e,t){return new Date(t)},d:function(e,t){e.setDate(parseFloat(t))},h:function(e,t){e.setHours(parseFloat(t))},i:function(e,t){e.setMinutes(parseFloat(t))},j:function(e,t){e.setDate(parseFloat(t))},l:b,m:function(e,t){e.setMonth(parseFloat(t)-1)},n:function(e,t){e.setMonth(parseFloat(t)-1)},s:function(e,t){e.setSeconds(parseFloat(t))},w:b,y:function(e,t){e.setFullYear(2e3+parseFloat(t))}},x={D:"(\\w+)",F:"(\\w+)",G:"(\\d\\d|\\d)",H:"(\\d\\d|\\d)",J:"(\\d\\d|\\d)\\w+",K:"(am|AM|Am|aM|pm|PM|Pm|pM)",M:"(\\w+)",S:"(\\d\\d|\\d)",U:"(.+)",W:"(\\d\\d|\\d)",Y:"(\\d{4})",Z:"(.+)",d:"(\\d\\d|\\d)",h:"(\\d\\d|\\d)",i:"(\\d\\d|\\d)",j:"(\\d\\d|\\d)",l:"(\\w+)",m:"(\\d\\d|\\d)",n:"(\\d\\d|\\d)",s:"(\\d\\d|\\d)",w:"(\\d\\d|\\d)",y:"(\\d{2})"},C={Z:function(e){return e.toISOString()},D:function(e,t,n){return t.weekdays.shorthand[C.w(e,t,n)]},F:function(e,t,n){return u(C.n(e,t,n)-1,!1,t)},G:function(e,t,n){return m(C.h(e,t,n))},H:function(e){return m(e.getHours())},J:function(e,t){return void 0!==t.ordinal?e.getDate()+t.ordinal(e.getDate()):e.getDate()},K:function(e){return e.getHours()>11?"PM":"AM"},M:function(e,t){return u(e.getMonth(),!0,t)},S:function(e){return m(e.getSeconds())},U:function(e){return e.getTime()/1e3},
W:function(e,t,n){return n.getWeek(e)},Y:function(e){return e.getFullYear()},d:function(e){return m(e.getDate())},h:function(e){return e.getHours()%12?e.getHours()%12:12},i:function(e){return m(e.getMinutes())},j:function(e){return e.getDate()},l:function(e,t){return t.weekdays.longhand[e.getDay()]},m:function(e){return m(e.getMonth()+1)},n:function(e){return e.getMonth()+1},s:function(e){return e.getSeconds()},w:function(e){return e.getDay()},y:function(e){return String(e.getFullYear()).substring(2)}};"function"!=typeof Object.assign&&(Object.assign=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];if(!e)throw TypeError("Cannot convert undefined or null to object");for(var i=0,o=t;i<o.length;i++){var r=o[i];!function(t){t&&Object.keys(t).forEach(function(n){return e[n]=t[n]})}(r)}return e}),"undefined"!=typeof HTMLElement&&(HTMLCollection.prototype.flatpickr=NodeList.prototype.flatpickr=function(e){return c(this,e)},HTMLElement.prototype.flatpickr=function(e){return c([this],e)});var k;return k=function(e,t){return e instanceof NodeList?c(e,t):"string"==typeof e?c(window.document.querySelectorAll(e),t):c([e],t)},"object"==typeof window&&(window.flatpickr=k),k.defaultConfig=h,k.l10ns={en:d({},g),default:d({},g)},k.localize=function(e){k.l10ns.default=d({},k.l10ns.default,e)},k.setDefaults=function(e){k.defaultConfig=d({},k.defaultConfig,e)},"undefined"!=typeof jQuery&&(jQuery.fn.flatpickr=function(e){return c(this,e)}),Date.prototype.fp_incr=function(e){return new Date(this.getFullYear(),this.getMonth(),this.getDate()+("string"==typeof e?parseInt(e,10):e))},k}),function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t(e.ru={})}(this,function(e){"use strict";var t="undefined"!=typeof window&&void 0!==window.flatpickr?window.flatpickr:{l10ns:{}},n={firstDayOfWeek:1,weekdays:{shorthand:["Вс","Пн","Вт","Ср","Чт","Пт","Сб"],longhand:["Воскресенье","Понедельник","Вторник","Среда","Четверг","Пятница","Суббота"]},months:{shorthand:["Янв","Фев","Март","Апр","Май","Июнь","Июль","Авг","Сен","Окт","Ноя","Дек"],longhand:["Январь","Февраль","Март","Апрель","Май","Июнь","Июль","Август","Сентябрь","Октябрь","Ноябрь","Декабрь"]}};t.l10ns.ru=n;var i=t.l10ns;e.Russian=n,e.default=i,Object.defineProperty(e,"__esModule",{value:!0})}),function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):e.tippy=t()}(this,function(){"use strict";function e(e){Fe.forEach(function(t){var n=t.popper,i=t.tippyInstance,o=t.settings,r=o.appendTo,s=o.hideOnClick,a=o.trigger;if(r.contains(n)){var l=!0===s||-1!==a.indexOf("focus"),c=!e||n!==e.popper;l&&c&&i.hide(n)}})}function t(e,t){return(Element.prototype.closest||function(e){for(var t=this;t;){if(_e.call(t,e))return t;t=t.parentElement}}).call(e,t)}function n(e,t){return Array.prototype.find?e.find(t):e.filter(t)[0]}function i(){var i=function(){He.touch=!0,He.iOS()&&document.body.classList.add("tippy-touch"),He.dynamicInputDetection&&window.performance&&document.addEventListener("mousemove",o)},o=function(){var e=void 0;return function(){var t=performance.now();t-e<20&&(He.touch=!1,document.removeEventListener("mousemove",o),He.iOS()||document.body.classList.remove("tippy-touch")),e=t}}(),r=function(i){if(!(i.target instanceof Element))return e();var o=t(i.target,Re.TOOLTIPPED_EL),r=t(i.target,Re.POPPER);if(r){if(n(Fe,function(e){return e.popper===r}).settings.interactive)return}if(o){var s=n(Fe,function(e){return e.el===o}),a=s.settings,l=a.hideOnClick,c=a.multiple,d=a.trigger;if(!c&&He.touch||!c&&-1!==d.indexOf("click"))return e(s);if(!0!==l||-1!==d.indexOf("click"))return}!t(i.target,Re.CONTROLLER)&&document.querySelector(Re.POPPER)&&e()},s=function(e){var t=document,n=t.activeElement;n&&n.blur&&_e.call(n,Re.TOOLTIPPED_EL)&&n.blur()};document.addEventListener("click",r),document.addEventListener("touchstart",i),window.addEventListener("blur",s),!He.SUPPORTS_TOUCH&&(navigator.maxTouchPoints>0||navigator.msMaxTouchPoints>0)&&document.addEventListener("pointerdown",i)}function o(){return!o.done&&(o.done=!0,i(),!0)}function r(e){window.requestAnimationFrame(function(){setTimeout(e,0)})}function s(e){for(var t=[!1,"webkit"],n=e.charAt(0).toUpperCase()+e.slice(1),i=0;i<t.length;i++){var o=t[i],r=o?""+o+n:e;if(void 0!==window.document.body.style[r])return r}return null}function a(e,t){return Array.prototype.findIndex?e.findIndex(t):e.indexOf(n(e,t))}function l(e){var t=e.getAttribute("title");t&&e.setAttribute("data-original-title",t),e.removeAttribute("title")}function c(e){var t=e.getBoundingClientRect();return t.top>=0&&t.left>=0&&t.bottom<=(window.innerHeight||document.documentElement.clientHeight)&&t.right<=(window.innerWidth||document.documentElement.clientWidth)}function d(e,t){t?window.getComputedStyle(t)[s("transform")]:window.getComputedStyle(e).opacity}function u(e,t){e.forEach(function(e){e&&t(e.classList)})}function p(e){return{tooltip:e.querySelector(Re.TOOLTIP),circle:e.querySelector(Re.CIRCLE),content:e.querySelector(Re.CONTENT)}}function f(e,t){e.forEach(function(e){if(e){var n=_e.call(e,Re.CONTENT),i=n?Math.round(t/1.3):t;e.style[s("transitionDuration")]=i+"ms"}})}function h(e){return"visible"===e.style.visibility}function g(){}function m(e){return!!e&&"[object Object]"===e.toString()}function v(e){return e.replace(/-.+/,"")}function y(e){var t=this,i=n(Fe,function(e){return e.el===t}),o=i.popper,r=i.settings.offset,a=v(o.getAttribute("x-placement")),l=Math.round(o.offsetWidth/2),c=Math.round(o.offsetHeight/2),d=document.documentElement.offsetWidth||document.body.offsetWidth,u=e.pageX,p=e.pageY,f=void 0,h=void 0;switch(a){case"top":f=u-l+r,h=p-2*c;break;case"bottom":f=u-l+r,h=p+10;break;case"left":f=u-2*l,h=p-c+r;break;case"right":f=u+5,h=p-c+r}var g=u+5+l+r>d,m=u-5-l+r<0;"top"!==a&&"bottom"!==a||(g&&(f=d-5-2*l),m&&(f=5)),o.style[s("transform")]="translate3d("+f+"px, "+h+"px, 0)"}function b(e){if(e instanceof Element||m(e))return[e];if(e instanceof NodeList)return[].slice.call(e);if(Array.isArray(e))return e;try{return[].slice.call(document.querySelectorAll(e))}catch(e){return[]}}function w(e,t,n){if(!t)return n();var i=p(e.popper),o=i.tooltip,r=!1,s=function(e){e.target!==o||r||(r=!0,n())};o.addEventListener("webkitTransitionEnd",s),o.addEventListener("transitionend",s),clearTimeout(e._transitionendTimeout),e._transitionendTimeout=setTimeout(function(){r||n()},t)}function x(e){var t=!1,n=0,i=document.createElement("span");return new MutationObserver(function(){e(),t=!1}).observe(i,{attributes:!0}),function(){t||(t=!0,i.setAttribute("x-index",n),n+=1)}}function C(e){var t=!1;return function(){t||(t=!0,setTimeout(function(){t=!1,e()},Ve))}}function k(e){var t={};return e&&"[object Function]"===t.toString.call(e)}function S(e,t){if(1!==e.nodeType)return[];var n=window.getComputedStyle(e,null);return t?n[t]:n}function T(e){return"HTML"===e.nodeName?e:e.parentNode||e.host}function E(e){if(!e||-1!==["HTML","BODY","#document"].indexOf(e.nodeName))return window.document.body;var t=S(e),n=t.overflow,i=t.overflowX;return/(auto|scroll)/.test(n+t.overflowY+i)?e:E(T(e))}function D(e){var t=e&&e.offsetParent,n=t&&t.nodeName;return n&&"BODY"!==n&&"HTML"!==n?-1!==["TD","TABLE"].indexOf(t.nodeName)&&"static"===S(t,"position")?D(t):t:window.document.documentElement}function $(e){var t=e.nodeName;return"BODY"!==t&&("HTML"===t||D(e.firstElementChild)===e)}function M(e){return null!==e.parentNode?M(e.parentNode):e}function P(e,t){if(!(e&&e.nodeType&&t&&t.nodeType))return window.document.documentElement;var n=e.compareDocumentPosition(t)&Node.DOCUMENT_POSITION_FOLLOWING,i=n?e:t,o=n?t:e,r=document.createRange();r.setStart(i,0),r.setEnd(o,0);var s=r.commonAncestorContainer;if(e!==s&&t!==s||i.contains(o))return $(s)?s:D(s);var a=M(e);return a.host?P(a.host,t):P(e,M(t).host)}function A(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"top",n="top"===t?"scrollTop":"scrollLeft",i=e.nodeName;if("BODY"===i||"HTML"===i){var o=window.document.documentElement;return(window.document.scrollingElement||o)[n]}return e[n]}function O(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],i=A(t,"top"),o=A(t,"left"),r=n?-1:1;return e.top+=i*r,e.bottom+=i*r,e.left+=o*r,e.right+=o*r,e}function L(e,t){var n="x"===t?"Left":"Top",i="Left"===n?"Right":"Bottom";return+e["border"+n+"Width"].split("px")[0]+ +e["border"+i+"Width"].split("px")[0]}function I(e,t,n,i,o){return Math.max(t["offset"+e],o?t["scroll"+e]:0,n["client"+e],n["offset"+e],o?n["scroll"+e]:0,Je()?n["offset"+e]+i["margin"+("Height"===e?"Top":"Left")]+i["margin"+("Height"===e?"Bottom":"Right")]:0)}function N(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0],t=window.document.body,n=window.document.documentElement,i=Je()&&window.getComputedStyle(n);return{height:I("Height",t,n,i,e),width:I("Width",t,n,i,e)}}function j(e){return it({},e,{right:e.left+e.width,bottom:e.top+e.height})}function H(e){var t={};if(Je())try{t=e.getBoundingClientRect();var n=A(e,"top"),i=A(e,"left");t.top+=n,t.left+=i,t.bottom+=n,t.right+=i}catch(e){}else t=e.getBoundingClientRect();var o={left:t.left,top:t.top,width:t.right-t.left,height:t.bottom-t.top},r="HTML"===e.nodeName?N():{},s=r.width||e.clientWidth||o.right-o.left,a=r.height||e.clientHeight||o.bottom-o.top,l=e.offsetWidth-s,c=e.offsetHeight-a;if(l||c){var d=S(e);l-=L(d,"x"),c-=L(d,"y"),o.width-=l,o.height-=c}return j(o)}function F(e,t){var n=Je(),i="HTML"===t.nodeName,o=H(e),r=H(t),s=E(e),a=S(t),l=+a.borderTopWidth.split("px")[0],c=+a.borderLeftWidth.split("px")[0],d=j({top:o.top-r.top-l,left:o.left-r.left-c,width:o.width,height:o.height});if(d.marginTop=0,d.marginLeft=0,!n&&i){var u=+a.marginTop.split("px")[0],p=+a.marginLeft.split("px")[0];d.top-=l-u,d.bottom-=l-u,d.left-=c-p,d.right-=c-p,d.marginTop=u,d.marginLeft=p}return(n?t.contains(s):t===s&&"BODY"!==s.nodeName)&&(d=O(d,t)),d}function R(e){var t=window.document.documentElement,n=F(e,t),i=Math.max(t.clientWidth,window.innerWidth||0),o=Math.max(t.clientHeight,window.innerHeight||0),r=A(t),s=A(t,"left");return j({top:r-n.top+n.marginTop,left:s-n.left+n.marginLeft,width:i,height:o})}function q(e){var t=e.nodeName;return"BODY"!==t&&"HTML"!==t&&("fixed"===S(e,"position")||q(T(e)))}function W(e,t,n,i){var o={top:0,left:0},r=P(e,t);if("viewport"===i)o=R(r);else{var s=void 0;"scrollParent"===i?(s=E(T(e)),"BODY"===s.nodeName&&(s=window.document.documentElement)):s="window"===i?window.document.documentElement:i;var a=F(s,r);if("HTML"!==s.nodeName||q(r))o=a;else{var l=N(!1),c=l.height,d=l.width;o.top+=a.top-a.marginTop,o.bottom=c+a.top,o.left+=a.left-a.marginLeft,o.right=d+a.left}}return o.left+=n,o.top+=n,o.right-=n,o.bottom-=n,o}function z(e){return e.width*e.height}function Y(e,t,n,i,o){var r=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0;if(-1===e.indexOf("auto"))return e;var s=W(n,i,r,o),a={top:{width:s.width,height:t.top-s.top},right:{width:s.right-t.right,height:s.height},bottom:{width:s.width,height:s.bottom-t.bottom},left:{width:t.left-s.left,height:s.height}},l=Object.keys(a).map(function(e){return it({key:e},a[e],{area:z(a[e])})}).sort(function(e,t){return t.area-e.area}),c=l.filter(function(e){var t=e.width,i=e.height;return t>=n.clientWidth&&i>=n.clientHeight}),d=c.length>0?c[0].key:l[0].key,u=e.split("-")[1];return d+(u?"-"+u:"")}function _(e,t,n){return F(n,P(t,n))}function B(e){var t=window.getComputedStyle(e),n=parseFloat(t.marginTop)+parseFloat(t.marginBottom),i=parseFloat(t.marginLeft)+parseFloat(t.marginRight);return{width:e.offsetWidth+i,height:e.offsetHeight+n}}function X(e){var t={left:"right",right:"left",bottom:"top",top:"bottom"};return e.replace(/left|right|bottom|top/g,function(e){return t[e]})}function U(e,t,n){n=n.split("-")[0];var i=B(e),o={width:i.width,height:i.height},r=-1!==["right","left"].indexOf(n),s=r?"top":"left",a=r?"left":"top",l=r?"height":"width",c=r?"width":"height";return o[s]=t[s]+t[l]/2-i[l]/2,o[a]=n===a?t[a]-i[c]:t[X(a)],o}function V(e,t){return Array.prototype.find?e.find(t):e.filter(t)[0]}function G(e,t,n){if(Array.prototype.findIndex)return e.findIndex(function(e){return e[t]===n});var i=V(e,function(e){return e[t]===n});return e.indexOf(i)}function K(e,t,n){return(void 0===n?e:e.slice(0,G(e,"name",n))).forEach(function(e){e.function&&console.warn("`modifier.function` is deprecated, use `modifier.fn`!");var n=e.function||e.fn;e.enabled&&k(n)&&(t.offsets.popper=j(t.offsets.popper),t.offsets.reference=j(t.offsets.reference),t=n(t,e))}),t}function Z(){if(!this.state.isDestroyed){var e={instance:this,styles:{},arrowStyles:{},attributes:{},flipped:!1,offsets:{}};e.offsets.reference=_(this.state,this.popper,this.reference),e.placement=Y(this.options.placement,e.offsets.reference,this.popper,this.reference,this.options.modifiers.flip.boundariesElement,this.options.modifiers.flip.padding),e.originalPlacement=e.placement,e.offsets.popper=U(this.popper,e.offsets.reference,e.placement),e.offsets.popper.position="absolute",e=K(this.modifiers,e),this.state.isCreated?this.options.onUpdate(e):(this.state.isCreated=!0,this.options.onCreate(e))}}function Q(e,t){return e.some(function(e){var n=e.name;return e.enabled&&n===t})}function J(e){for(var t=[!1,"ms","Webkit","Moz","O"],n=e.charAt(0).toUpperCase()+e.slice(1),i=0;i<t.length-1;i++){var o=t[i],r=o?""+o+n:e;if(void 0!==window.document.body.style[r])return r}return null}function ee(){return this.state.isDestroyed=!0,Q(this.modifiers,"applyStyle")&&(this.popper.removeAttribute("x-placement"),this.popper.style.left="",this.popper.style.position="",this.popper.style.top="",this.popper.style[J("transform")]=""),this.disableEventListeners(),this.options.removeOnDestroy&&this.popper.parentNode.removeChild(this.popper),this}function te(e,t,n,i){var o="BODY"===e.nodeName,r=o?window:e;r.addEventListener(t,n,{passive:!0}),o||te(E(r.parentNode),t,n,i),i.push(r)}function ne(e,t,n,i){n.updateBound=i,window.addEventListener("resize",n.updateBound,{passive:!0});var o=E(e);return te(o,"scroll",n.updateBound,n.scrollParents),n.scrollElement=o,n.eventsEnabled=!0,n}function ie(){this.state.eventsEnabled||(this.state=ne(this.reference,this.options,this.state,this.scheduleUpdate))}function oe(e,t){return window.removeEventListener("resize",t.updateBound),t.scrollParents.forEach(function(e){e.removeEventListener("scroll",t.updateBound)}),t.updateBound=null,t.scrollParents=[],t.scrollElement=null,t.eventsEnabled=!1,t}function re(){this.state.eventsEnabled&&(window.cancelAnimationFrame(this.scheduleUpdate),this.state=oe(this.reference,this.state))}function se(e){return""!==e&&!isNaN(parseFloat(e))&&isFinite(e)}function ae(e,t){Object.keys(t).forEach(function(n){var i="";-1!==["width","height","top","right","bottom","left"].indexOf(n)&&se(t[n])&&(i="px"),e.style[n]=t[n]+i})}function le(e,t){Object.keys(t).forEach(function(n){!1!==t[n]?e.setAttribute(n,t[n]):e.removeAttribute(n)})}function ce(e){return ae(e.instance.popper,e.styles),le(e.instance.popper,e.attributes),e.arrowElement&&Object.keys(e.arrowStyles).length&&ae(e.arrowElement,e.arrowStyles),e}function de(e,t,n,i,o){var r=_(o,t,e),s=Y(n.placement,r,t,e,n.modifiers.flip.boundariesElement,n.modifiers.flip.padding);return t.setAttribute("x-placement",s),ae(t,{position:"absolute"}),n}function ue(e,t){var n=t.x,i=t.y,o=e.offsets.popper,r=V(e.instance.modifiers,function(e){return"applyStyle"===e.name}).gpuAcceleration;void 0!==r&&console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");var s=void 0!==r?r:t.gpuAcceleration,a=D(e.instance.popper),l=H(a),c={position:o.position},d={left:Math.floor(o.left),top:Math.floor(o.top),bottom:Math.floor(o.bottom),right:Math.floor(o.right)},u="bottom"===n?"top":"bottom",p="right"===i?"left":"right",f=J("transform"),h=void 0,g=void 0;if(g="bottom"===u?-l.height+d.bottom:d.top,h="right"===p?-l.width+d.right:d.left,s&&f)c[f]="translate3d("+h+"px, "+g+"px, 0)",c[u]=0,c[p]=0,c.willChange="transform";else{var m="bottom"===u?-1:1,v="right"===p?-1:1;c[u]=g*m,c[p]=h*v,c.willChange=u+", "+p}var y={"x-placement":e.placement};return e.attributes=it({},y,e.attributes),e.styles=it({},c,e.styles),e.arrowStyles=it({},e.offsets.arrow,e.arrowStyles),e}function pe(e,t,n){var i=V(e,function(e){return e.name===t}),o=!!i&&e.some(function(e){return e.name===n&&e.enabled&&e.order<i.order});if(!o){var r="`"+t+"`",s="`"+n+"`";console.warn(s+" modifier is required by "+r+" modifier in order to work, be sure to include it before "+r+"!")}return o}function fe(e,t){if(!pe(e.instance.modifiers,"arrow","keepTogether"))return e;var n=t.element;if("string"==typeof n){if(!(n=e.instance.popper.querySelector(n)))return e}else if(!e.instance.popper.contains(n))return console.warn("WARNING: `arrow.element` must be child of its popper element!"),e;var i=e.placement.split("-")[0],o=e.offsets,r=o.popper,s=o.reference,a=-1!==["left","right"].indexOf(i),l=a?"height":"width",c=a?"Top":"Left",d=c.toLowerCase(),u=a?"left":"top",p=a?"bottom":"right",f=B(n)[l];s[p]-f<r[d]&&(e.offsets.popper[d]-=r[d]-(s[p]-f)),s[d]+f>r[p]&&(e.offsets.popper[d]+=s[d]+f-r[p]);var h=s[d]+s[l]/2-f/2,g=S(e.instance.popper,"margin"+c).replace("px",""),m=h-j(e.offsets.popper)[d]-g;return m=Math.max(Math.min(r[l]-f,m),0),e.arrowElement=n,e.offsets.arrow={},e.offsets.arrow[d]=Math.round(m),e.offsets.arrow[u]="",e}function he(e){return"end"===e?"start":"start"===e?"end":e}function ge(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=rt.indexOf(e),i=rt.slice(n+1).concat(rt.slice(0,n));return t?i.reverse():i}function me(e,t){if(Q(e.instance.modifiers,"inner"))return e;if(e.flipped&&e.placement===e.originalPlacement)return e;var n=W(e.instance.popper,e.instance.reference,t.padding,t.boundariesElement),i=e.placement.split("-")[0],o=X(i),r=e.placement.split("-")[1]||"",s=[];switch(t.behavior){case st.FLIP:s=[i,o];break;case st.CLOCKWISE:s=ge(i);break;case st.COUNTERCLOCKWISE:s=ge(i,!0);break;default:s=t.behavior}return s.forEach(function(a,l){if(i!==a||s.length===l+1)return e;i=e.placement.split("-")[0],o=X(i);var c=e.offsets.popper,d=e.offsets.reference,u=Math.floor,p="left"===i&&u(c.right)>u(d.left)||"right"===i&&u(c.left)<u(d.right)||"top"===i&&u(c.bottom)>u(d.top)||"bottom"===i&&u(c.top)<u(d.bottom),f=u(c.left)<u(n.left),h=u(c.right)>u(n.right),g=u(c.top)<u(n.top),m=u(c.bottom)>u(n.bottom),v="left"===i&&f||"right"===i&&h||"top"===i&&g||"bottom"===i&&m,y=-1!==["top","bottom"].indexOf(i),b=!!t.flipVariations&&(y&&"start"===r&&f||y&&"end"===r&&h||!y&&"start"===r&&g||!y&&"end"===r&&m);(p||v||b)&&(e.flipped=!0,(p||v)&&(i=s[l+1]),b&&(r=he(r)),e.placement=i+(r?"-"+r:""),e.offsets.popper=it({},e.offsets.popper,U(e.instance.popper,e.offsets.reference,e.placement)),e=K(e.instance.modifiers,e,"flip"))}),e}function ve(e){var t=e.offsets,n=t.popper,i=t.reference,o=e.placement.split("-")[0],r=Math.floor,s=-1!==["top","bottom"].indexOf(o),a=s?"right":"bottom",l=s?"left":"top",c=s?"width":"height";return n[a]<r(i[l])&&(e.offsets.popper[l]=r(i[l])-n[c]),n[l]>r(i[a])&&(e.offsets.popper[l]=r(i[a])),e}function ye(e,t,n,i){var o=e.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),r=+o[1],s=o[2];if(!r)return e;if(0===s.indexOf("%")){var a=void 0;switch(s){case"%p":a=n;break;case"%":case"%r":default:a=i}return j(a)[t]/100*r}if("vh"===s||"vw"===s){return("vh"===s?Math.max(document.documentElement.clientHeight,window.innerHeight||0):Math.max(document.documentElement.clientWidth,window.innerWidth||0))/100*r}return r}function be(e,t,n,i){var o=[0,0],r=-1!==["right","left"].indexOf(i),s=e.split(/(\+|\-)/).map(function(e){return e.trim()}),a=s.indexOf(V(s,function(e){return-1!==e.search(/,|\s/)}));s[a]&&-1===s[a].indexOf(",")&&console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");var l=/\s*,\s*|\s+/,c=-1!==a?[s.slice(0,a).concat([s[a].split(l)[0]]),[s[a].split(l)[1]].concat(s.slice(a+1))]:[s];return c=c.map(function(e,i){var o=(1===i?!r:r)?"height":"width",s=!1;return e.reduce(function(e,t){return""===e[e.length-1]&&-1!==["+","-"].indexOf(t)?(e[e.length-1]=t,s=!0,e):s?(e[e.length-1]+=t,s=!1,e):e.concat(t)},[]).map(function(e){return ye(e,o,t,n)})}),c.forEach(function(e,t){e.forEach(function(n,i){se(n)&&(o[t]+=n*("-"===e[i-1]?-1:1))})}),o}function we(e,t){var n=t.offset,i=e.placement,o=e.offsets,r=o.popper,s=o.reference,a=i.split("-")[0],l=void 0;return l=se(+n)?[+n,0]:be(n,r,s,a),"left"===a?(r.top+=l[0],r.left-=l[1]):"right"===a?(r.top+=l[0],r.left+=l[1]):"top"===a?(r.left+=l[0],r.top-=l[1]):"bottom"===a&&(r.left+=l[0],r.top+=l[1]),e.popper=r,e}function xe(e,t){var n=t.boundariesElement||D(e.instance.popper);e.instance.reference===n&&(n=D(n));var i=W(e.instance.popper,e.instance.reference,t.padding,n);t.boundaries=i;var o=t.priority,r=e.offsets.popper,s={primary:function(e){var n=r[e];return r[e]<i[e]&&!t.escapeWithReference&&(n=Math.max(r[e],i[e])),nt({},e,n)},secondary:function(e){var n="right"===e?"left":"top",o=r[n];return r[e]>i[e]&&!t.escapeWithReference&&(o=Math.min(r[n],i[e]-("right"===e?r.width:r.height))),nt({},n,o)}};return o.forEach(function(e){var t=-1!==["left","top"].indexOf(e)?"primary":"secondary";r=it({},r,s[t](e))}),e.offsets.popper=r,e}function Ce(e){var t=e.placement,n=t.split("-")[0],i=t.split("-")[1];if(i){var o=e.offsets,r=o.reference,s=o.popper,a=-1!==["bottom","top"].indexOf(n),l=a?"left":"top",c=a?"width":"height",d={start:nt({},l,r[l]),end:nt({},l,r[l]+r[c]-s[c])};e.offsets.popper=it({},s,d[i])}return e}function ke(e){if(!pe(e.instance.modifiers,"hide","preventOverflow"))return e;var t=e.offsets.reference,n=V(e.instance.modifiers,function(e){return"preventOverflow"===e.name}).boundaries;if(t.bottom<n.top||t.left>n.right||t.top>n.bottom||t.right<n.left){if(!0===e.hide)return e;e.hide=!0,e.attributes["x-out-of-boundaries"]=""}else{if(!1===e.hide)return e;e.hide=!1,e.attributes["x-out-of-boundaries"]=!1}return e}function Se(e){var t=e.placement,n=t.split("-")[0],i=e.offsets,o=i.popper,r=i.reference,s=-1!==["left","right"].indexOf(n),a=-1===["top","left"].indexOf(n);return o[s?"left":"top"]=r[n]-(a?o[s?"width":"height"]:0),e.placement=X(t),e.offsets.popper=j(o),e}function Te(e){return-(e-qe.distance)+"px"}function Ee(e){var t=e.el,n=e.popper,i=e.settings,o=i.position,a=i.popperOptions,l=i.offset,c=i.distance,d=i.flipDuration,u=p(n),f=u.tooltip,h=pt({placement:o},a||{},{modifiers:pt({},a?a.modifiers:{},{flip:pt({padding:c+5},a&&a.modifiers?a.modifiers.flip:{}),offset:pt({offset:l},a&&a.modifiers?a.modifiers.offset:{})}),onUpdate:function(){var e=f.style;e.top="",e.bottom="",e.left="",e.right="",e[v(n.getAttribute("x-placement"))]=Te(c)}});if(window.MutationObserver){var g=n.style,m=new MutationObserver(function(){g[s("transitionDuration")]="0ms",e.popperInstance.update(),r(function(){g[s("transitionDuration")]=d+"ms"})});m.observe(n,{childList:!0,subtree:!0,characterData:!0}),e._mutationObservers.push(m)}return new ct(t,n,h)}function De(e){var t=e.el,n=e.popper,i=e.settings,o=i.appendTo,r=i.followCursor;o.contains(n)||(o.appendChild(n),e.popperInstance?(e.popperInstance.update(),r&&!He.touch||e.popperInstance.enableEventListeners()):e.popperInstance=Ee(e),r&&!He.touch&&(t.addEventListener("mousemove",y),e.popperInstance.disableEventListeners()))}function $e(e){var t=e.popper,n=e.popperInstance,i=e.settings.stickyDuration,o=function(){return t.style[s("transitionDuration")]=i+"ms"},a=function(){return t.style[s("transitionDuration")]=""};r(function e(){n&&n.scheduleUpdate(),o(),h(t)?window.requestAnimationFrame(e):a()})}function Me(e,t){var n=We.reduce(function(n,i){var o=e.getAttribute("data-"+i.toLowerCase())||t[i];return"false"===o&&(o=!1),"true"===o&&(o=!0),isFinite(o)&&!isNaN(parseFloat(o))&&(o=parseFloat(o)),"string"==typeof o&&"["===o.trim().charAt(0)&&(o=JSON.parse(o)),n[i]=o,n},{});return pt({},t,n)}function Pe(e,t,n){var i=n.position,o=n.distance,r=n.arrow,s=n.animateFill,a=n.inertia,l=n.animation,c=n.arrowSize,d=n.size,u=n.theme,p=n.html,f=n.zIndex,h=n.interactive,g=document.createElement("div");g.setAttribute("class","tippy-popper"),g.setAttribute("role","tooltip"),g.setAttribute("aria-hidden","true"),g.setAttribute("id","tippy-tooltip-"+e),g.style.zIndex=f;var m=document.createElement("div");if(m.setAttribute("class","tippy-tooltip tippy-tooltip--"+d+" leave"),m.setAttribute("data-animation",l),u.split(" ").forEach(function(e){m.classList.add(e+"-theme")}),r){var y=document.createElement("div");y.setAttribute("class","arrow-"+c),y.setAttribute("x-arrow",""),m.appendChild(y)}if(s){m.setAttribute("data-animatefill","");var b=document.createElement("div");b.setAttribute("class","leave"),b.setAttribute("x-circle",""),m.appendChild(b)}a&&m.setAttribute("data-inertia",""),h&&m.setAttribute("data-interactive","");var w=document.createElement("div");if(w.setAttribute("class","tippy-tooltip-content"),p){var x=void 0;p instanceof Element?(w.appendChild(p),x="#"+p.id||"tippy-html-template"):(w.innerHTML=document.getElementById(p.replace("#","")).innerHTML,x=p),g.classList.add("html-template"),h&&g.setAttribute("tabindex","-1"),m.setAttribute("data-template-id",x)}else w.innerHTML=t;return m.style[v(i)]=Te(o),m.appendChild(w),g.appendChild(m),g}function Ae(e,t,n,i){var o=[];return"manual"===e?o:(t.addEventListener(e,n.handleTrigger),o.push({event:e,handler:n.handleTrigger}),"mouseenter"===e&&(He.SUPPORTS_TOUCH&&i&&(t.addEventListener("touchstart",n.handleTrigger),o.push({event:"touchstart",handler:n.handleTrigger}),t.addEventListener("touchend",n.handleMouseleave),o.push({event:"touchend",handler:n.handleMouseleave})),t.addEventListener("mouseleave",n.handleMouseleave),o.push({event:"mouseleave",handler:n.handleMouseleave})),"focus"===e&&(t.addEventListener("blur",n.handleBlur),o.push({event:"blur",handler:n.handleBlur})),o)}function Oe(e,t,n){if(!t.getAttribute("x-placement"))return!0;var i=e.clientX,o=e.clientY,r=n.interactiveBorder,s=n.distance,a=t.getBoundingClientRect(),l=v(t.getAttribute("x-placement")),c=r+s,d={top:a.top-o>r,bottom:o-a.bottom>r,left:a.left-i>r,right:i-a.right>r};switch(l){case"top":d.top=a.top-o>c;break;case"bottom":d.bottom=o-a.bottom>c;break;case"left":d.left=a.left-i>c;break;case"right":d.right=i-a.right>c}return d.top||d.bottom||d.left||d.right}function Le(e,n,i){var o=this,r=(i.position,i.delay),s=(i.duration,i.interactive),a=(i.interactiveBorder,i.distance,i.hideOnClick),l=i.trigger,c=i.touchHold,d=(i.touchWait,void 0),u=void 0,p=function(){clearTimeout(d),clearTimeout(u)},f=function(){if(p(),!h(n)){var e=Array.isArray(r)?r[0]:r;r?d=setTimeout(function(){return o.show(n)},e):o.show(n)}},g=function(e){return o.callbacks.wait?o.callbacks.wait.call(n,f,e):f()},m=function(){p();var e=Array.isArray(r)?r[1]:r;r?u=setTimeout(function(){return o.hide(n)},e):o.hide(n)};return{handleTrigger:function(t){var i="mouseenter"===t.type&&He.SUPPORTS_TOUCH&&He.touch;if(!i||!c){var o="click"===t.type,r="persistent"!==a;o&&h(n)&&r?m():g(t),i&&He.iOS()&&e.click&&e.click()}},handleMouseleave:function(o){if(!("mouseleave"===o.type&&He.SUPPORTS_TOUCH&&He.touch&&c)){if(s){var r=function o(r){var s=function(){document.body.removeEventListener("mouseleave",m),document.removeEventListener("mousemove",o),m()},a=t(r.target,Re.TOOLTIPPED_EL),c=t(r.target,Re.POPPER)===n,d=a===e,u=-1!==l.indexOf("click");if(a&&a!==e)return s();c||d||u||Oe(r,n,i)&&s()};return document.body.addEventListener("mouseleave",m),void document.addEventListener("mousemove",r)}m()}},handleBlur:function(e){e.relatedTarget&&!He.touch&&(t(e.relatedTarget,Re.POPPER)||m())}}}function Ie(e){return e.arrow&&(e.animateFill=!1),e.appendTo&&"function"==typeof e.appendTo&&(e.appendTo=e.appendTo()),e}function Ne(e){var t=this;return e.reduce(function(e,n){var i=ft,o=pt({},Ie(t.settings.performance?t.settings:Me(n,t.settings)));"function"==typeof o.html&&(o.html=o.html(n));var r=o.html,s=o.trigger,a=o.touchHold,c=o.dynamicTitle,d=n.getAttribute("title");if(!d&&!r)return e;n.setAttribute("data-tooltipped",""),n.setAttribute("aria-describedby","tippy-tooltip-"+i),l(n);var u=Pe(i,d,o),f=Le.call(t,n,u,o),h=[];s.trim().split(" ").forEach(function(e){return h=h.concat(Ae(e,n,f,a))});var g=void 0;if(c&&window.MutationObserver){var m=p(u),v=m.content;g=new MutationObserver(function(){var e=n.getAttribute("title");e&&(v.innerHTML=e,l(n))}),g.observe(n,{attributes:!0})}return e.push({id:i,el:n,popper:u,settings:o,listeners:h,tippyInstance:t,_mutationObservers:[g]}),ft++,e},[])}function je(e,t){return m(e)&&(e={refObj:!0,attributes:e.attributes||{},getBoundingClientRect:e.getBoundingClientRect,clientWidth:e.clientWidth,clientHeight:e.clientHeight,setAttribute:function(t,n){e.attributes[t]=n},getAttribute:function(t){return e.attributes[t]},removeAttribute:function(t){delete e.attributes[t]},addEventListener:function(){},removeEventListener:function(){},classList:{classNames:{},add:function(t){e.classList.classNames[t]=!0},remove:function(t){return e.classList.classNames[t]=!1,!0},contains:function(t){return!!e.classList.classNames[t]}}}),new ht(e,t)}var He={};"undefined"!=typeof window&&(He.SUPPORTED="requestAnimationFrame"in window,He.SUPPORTS_TOUCH="ontouchstart"in window,He.touch=!1,He.dynamicInputDetection=!0,He.iOS=function(){return/iPhone|iPad|iPod/.test(navigator.userAgent)&&!window.MSStream});var Fe=[],Re={POPPER:".tippy-popper",TOOLTIP:".tippy-tooltip",CONTENT:".tippy-tooltip-content",CIRCLE:"[x-circle]",ARROW:"[x-arrow]",TOOLTIPPED_EL:"[data-tooltipped]",CONTROLLER:"[data-tippy-controller]"},qe={html:!1,position:"top",animation:"shift",animateFill:!0,arrow:!1,arrowSize:"regular",delay:0,trigger:"mouseenter focus",duration:350,interactive:!1,interactiveBorder:2,theme:"dark",size:"regular",distance:10,offset:0,hideOnClick:!0,multiple:!1,followCursor:!1,inertia:!1,flipDuration:350,sticky:!1,stickyDuration:200,appendTo:function(){return document.body},zIndex:9999,touchHold:!1,performance:!1,dynamicTitle:!1,popperOptions:{}},We=He.SUPPORTED&&Object.keys(qe),ze={};if("undefined"!=typeof Element){var Ye=Element.prototype;ze=Ye.matches||Ye.matchesSelector||Ye.webkitMatchesSelector||Ye.mozMatchesSelector||Ye.msMatchesSelector||function(e){for(var t=(this.document||this.ownerDocument).querySelectorAll(e),n=t.length;--n>=0&&t.item(n)!==this;);return n>-1}}for(var _e=ze,Be=["native code","[object MutationObserverConstructor]"],Xe="undefined"!=typeof window,Ue=["Edge","Trident","Firefox"],Ve=0,Ge=0;Ge<Ue.length;Ge+=1)if(Xe&&navigator.userAgent.indexOf(Ue[Ge])>=0){Ve=1;break}var Ke=Xe&&function(e){return Be.some(function(t){return(e||"").toString().indexOf(t)>-1})}(window.MutationObserver),Ze=Ke?x:C,Qe=void 0,Je=function(){return void 0===Qe&&(Qe=-1!==navigator.appVersion.indexOf("MSIE 10")),Qe},et=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},tt=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),nt=function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e},it=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e},ot=["auto-start","auto","auto-end","top-start","top","top-end","right-start","right","right-end","bottom-end","bottom","bottom-start","left-end","left","left-start"],rt=ot.slice(3),st={FLIP:"flip",CLOCKWISE:"clockwise",COUNTERCLOCKWISE:"counterclockwise"},at={shift:{order:100,enabled:!0,fn:Ce},offset:{order:200,enabled:!0,fn:we,offset:0},preventOverflow:{order:300,enabled:!0,fn:xe,priority:["left","right","top","bottom"],padding:5,boundariesElement:"scrollParent"},keepTogether:{order:400,enabled:!0,fn:ve},arrow:{order:500,enabled:!0,fn:fe,element:"[x-arrow]"},flip:{order:600,enabled:!0,
fn:me,behavior:"flip",padding:5,boundariesElement:"viewport"},inner:{order:700,enabled:!1,fn:Se},hide:{order:800,enabled:!0,fn:ke},computeStyle:{order:850,enabled:!0,fn:ue,gpuAcceleration:!0,x:"bottom",y:"right"},applyStyle:{order:900,enabled:!0,fn:ce,onLoad:de,gpuAcceleration:void 0}},lt={placement:"bottom",eventsEnabled:!0,removeOnDestroy:!1,onCreate:function(){},onUpdate:function(){},modifiers:at},ct=function(){function e(t,n){var i=this,o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};et(this,e),this.scheduleUpdate=function(){return requestAnimationFrame(i.update)},this.update=Ze(this.update.bind(this)),this.options=it({},e.Defaults,o),this.state={isDestroyed:!1,isCreated:!1,scrollParents:[]},this.reference=t.jquery?t[0]:t,this.popper=n.jquery?n[0]:n,this.options.modifiers={},Object.keys(it({},e.Defaults.modifiers,o.modifiers)).forEach(function(t){i.options.modifiers[t]=it({},e.Defaults.modifiers[t]||{},o.modifiers?o.modifiers[t]:{})}),this.modifiers=Object.keys(this.options.modifiers).map(function(e){return it({name:e},i.options.modifiers[e])}).sort(function(e,t){return e.order-t.order}),this.modifiers.forEach(function(e){e.enabled&&k(e.onLoad)&&e.onLoad(i.reference,i.popper,i.options,e,i.state)}),this.update();var r=this.options.eventsEnabled;r&&this.enableEventListeners(),this.state.eventsEnabled=r}return tt(e,[{key:"update",value:function(){return Z.call(this)}},{key:"destroy",value:function(){return ee.call(this)}},{key:"enableEventListeners",value:function(){return ie.call(this)}},{key:"disableEventListeners",value:function(){return re.call(this)}}]),e}();ct.Utils=("undefined"!=typeof window?window:global).PopperUtils,ct.placements=ot,ct.Defaults=lt;var dt=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},ut=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),pt=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e},ft=1,ht=function(){function e(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};dt(this,e),He.SUPPORTED&&(o(),this.state={destroyed:!1},this.selector=t,this.settings=pt({},qe,n),(n.show||n.shown||n.hide||n.hidden)&&console.warn("Callbacks without the `on` prefix are deprecated (with the exception of `wait`). Use onShow, onShown, onHide, and onHidden instead."),this.callbacks={wait:n.wait,show:n.onShow||n.show||g,shown:n.onShown||n.shown||g,hide:n.onHide||n.hide||g,hidden:n.onHidden||n.hidden||g},this.store=Ne.call(this,b(t)),Fe.push.apply(Fe,this.store))}return ut(e,[{key:"getPopperElement",value:function(e){try{return n(this.store,function(t){return t.el===e}).popper}catch(e){console.error("[getPopperElement]: Element passed as the argument does not exist in the instance")}}},{key:"getReferenceElement",value:function(e){try{return n(this.store,function(t){return t.popper===e}).el}catch(e){console.error("[getReferenceElement]: Popper passed as the argument does not exist in the instance")}}},{key:"getReferenceData",value:function(e){return n(this.store,function(t){return t.el===e||t.popper===e})}},{key:"show",value:function(e,t){var i=this;if(!this.state.destroyed){var o=n(this.store,function(t){return t.popper===e}),s=p(e),a=s.tooltip,l=s.circle,c=s.content;if(!this.selector.refObj&&!document.body.contains(o.el))return void this.destroy(e);this.callbacks.show.call(e);var g=o.el,m=o.settings,v=(m.appendTo,m.sticky),y=m.interactive,b=m.followCursor,x=m.flipDuration,C=m.duration,k=void 0!==t?t:Array.isArray(C)?C[0]:C;f([e,a,l],0),De(o),e.style.visibility="visible",e.setAttribute("aria-hidden","false"),r(function(){h(e)&&(b&&!He.touch||(o.popperInstance.update(),f([e],x)),f([a,l],k),l&&(c.style.opacity=1),y&&g.classList.add("active"),v&&$e(o),d(a,l),u([a,l],function(e){e.contains("tippy-notransition")&&e.remove("tippy-notransition"),e.remove("leave"),e.add("enter")}),w(o,k,function(){h(e)&&!o._onShownFired&&(y&&e.focus(),a.classList.add("tippy-notransition"),o._onShownFired=!0,i.callbacks.shown.call(e))}))})}}},{key:"hide",value:function(e,t){var i=this;if(!this.state.destroyed){this.callbacks.hide.call(e);var o=n(this.store,function(t){return t.popper===e}),r=p(e),s=r.tooltip,a=r.circle,l=r.content,d=o.el,g=o.settings,m=g.appendTo,v=(g.sticky,g.interactive),b=(g.followCursor,g.html),x=g.trigger,C=g.duration,k=void 0!==t?t:Array.isArray(C)?C[1]:C;o._onShownFired=!1,v&&d.classList.remove("active"),e.style.visibility="hidden",e.setAttribute("aria-hidden","true"),f([s,a,a?l:null],k),a&&(l.style.opacity=0),u([s,a],function(e){e.contains("tippy-tooltip")&&e.remove("tippy-notransition"),e.remove("enter"),e.add("leave")}),b&&-1!==x.indexOf("click")&&c(d)&&d.focus(),w(o,k,function(){!h(e)&&m.contains(e)&&"1"!==getComputedStyle(s).opacity&&(d.removeEventListener("mousemove",y),o.popperInstance.disableEventListeners(),m.removeChild(e),i.callbacks.hidden.call(e))})}}},{key:"update",value:function(e){if(!this.state.destroyed){var t=n(this.store,function(t){return t.popper===e}),i=p(e),o=i.content,r=t.el,s=t.settings.html;if(s instanceof Element)return void console.warn("Aborted: update() should not be used if `html` is a DOM element");o.innerHTML=s?document.getElementById(s.replace("#","")).innerHTML:r.getAttribute("title")||r.getAttribute("data-original-title"),s||l(r)}}},{key:"destroy",value:function(e,t){var i=this;if(!this.state.destroyed){var o=n(this.store,function(t){return t.popper===e}),r=o.el,s=o.popperInstance,l=o.listeners,c=o._mutationObservers;h(e)&&this.hide(e,0),l.forEach(function(e){return r.removeEventListener(e.event,e.handler)}),r.setAttribute("title",r.getAttribute("data-original-title")),r.removeAttribute("data-original-title"),r.removeAttribute("data-tooltipped"),r.removeAttribute("aria-describedby"),s&&s.destroy(),c.forEach(function(e){e&&e.disconnect()}),Fe.splice(a(Fe,function(t){return t.popper===e}),1),(void 0===t||t)&&(this.store=Fe.filter(function(e){return e.tippyInstance===i}))}}},{key:"destroyAll",value:function(){var e=this;if(!this.state.destroyed){var t=this.store.length;this.store.forEach(function(n,i){var o=n.popper;e.destroy(o,i===t-1)}),this.store=null,this.state.destroyed=!0}}}]),e}();return je.Browser=He,je.Defaults=qe,je.disableDynamicInputDetection=function(){return He.dynamicInputDetection=!1},je.enableDynamicInputDetection=function(){return He.dynamicInputDetection=!0},je}),function(){$("[data-flatpickr]").each(function(){var e={locale:"ru",dateFormat:"d.m.Y"},t=$(this).data("flatpickr");for(var n in t)e[n]=t[n];$(this).flatpickr(e)})}(),function(){$(".js-header-slider").slick({infinite:!0,slidesToShow:1,slidesToScroll:1,nextArrow:".js-header-slider-next",prevArrow:".js-header-slider-prev"})}(),function(e){e.fn.maskedinput=function(){this.each(function(){var t=e(this).data("masked-input"),n=e(this).data("masked-input-placeholder"),i=e(this).is("[data-masked-input-clearifnotmatch]");e(this).mask(t,{placeholder:n,clearIfNotMatch:i})})}}(jQuery),function(){$(".js-logotypes-slider").each(function(){var e=$(this).bxSlider({infiniteLoop:!0,pager:!1,controls:!1});$(this).closest(".logotypes-block-slider").find(".js-logotypes-slider-next").click(function(){return e.goToNextSlide(),!1}),$(this).closest(".logotypes-block-slider").find(".js-logotypes-slider-prev").click(function(){return e.goToPrevSlide(),!1}),$(window).resize(function(){e.reloadSlider()})})}(),function(){function e(t,n,i){$(t.target).closest(n).length||(i(),$(document).off("click","body",e))}$(".js-offcanvas").click(function(){function t(){$(".js-offcanvas, "+n).removeClass("active")}var n="#offcanvas",i="#offcanvas > .main-offcanvas";return $(this).hasClass("active")?t():function(){$(".js-offcanvas").addClass("active"),$(n).addClass("active"),$(document).on("click","body",function(n){e(n,i,t)})}(),!1})}(),$(function(){var e=function(e,t,n,i,o,r,s,a){if("undefined"==typeof cp)alert("Оплата через cloudpayments временно недоступна, попробуйте повторить операцию позже, либо воспользуйтесь оплатой через электронные кошельки");else{var l=new cp.CloudPayments,c={firstname:o,lastname:r,email:n};s&&(c.cloudPayments={recurrent:{interval:"Month",period:1}}),l.charge({publicId:e,description:i,amount:t,currency:"RUB",accountId:n,data:c,invoiceId:a},function(e){$.ajax({type:"POST",url:"/ajax/cp/",data:e})},function(e,t){})}},t=function(t,n){$("[name=other-sum]").val()?t.sum=$("[name=other-sum]").val():t.sum=$("[name=payment-value]:checked").val(),t.project=n.find("[name=donate-project]").val(),t.email=n.find("[name=email]").val(),t.name=n.find("[name=name]").val(),t.lastname=n.find("[name=lastname]").val(),$.ajax({type:"POST",url:"/ajax/payment/",data:t,dataType:"JSON",success:function(t){t.success?"robokassa"==t.gate?document.location.href=t.href:e(t.pubkey,t.sum,t.email,t.description,t.firstname,t.lastname,t.regular,t.order):alert("Извините, в данный момент платежи не принимаются по техническим причинам")}})};$("a[href^='#donate-block-internet']").on("click",function(){return $("#donate-block-internet-once-payment").hide(),$("#donate-block-internet-monthly-payment").hide(),$("#donate-block-sberbank").hide(),$("#donate-block-internet").show(),!1}),$("a[href^='#donate-block-sberbank']").on("click",function(){return $("#donate-block-internet-once-payment").hide(),$("#donate-block-internet-monthly-payment").hide(),$("#donate-block-internet").hide(),$("#donate-block-sberbank").show(),!1}),$("#once-card").on("click",function(){var e=$(".donate-block-form"),n={};return n.type="once",n.gate="cp",t(n,e),!1}),$("#once-emoney").on("click",function(){var e=$(".donate-block-form"),n={};return n.type="once",n.gate="robokassa",t(n,e),!1}),$("[name=agreement]").on("click",function(){$(".form-control-checkbox label").removeClass("red"),$(".oferta-error").hide()}),$(".donate-block-form").on("submit",function(){if("ch"!=$("[name=agreement]:checked").val())return $(".form-control-checkbox label").addClass("red"),$(".oferta-error").show(),!1;$(".oferta-error").hide();var e=$(this),t={};t.type=e.find("[name=payment-type]:checked").val();var n=100;n=$("[name=other-sum]").val()?$("[name=other-sum]").val():$("[name=payment-value]:checked").val();var i=e.find("[name=donate-project] option:selected").text();return"once"==t.type?($("#donate-block-internet").hide(),$("#donate-block-internet-monthly-payment").hide(),$("#donate-block-internet-once-payment").show(),$(".internet-payment-text").html("Перевести "+n+" руб. на "+i.toLowerCase()),!1):($("#donate-block-internet").hide(),$("#donate-block-internet-once-payment").hide(),$("#donate-block-internet-monthly-payment").show(),$(".internet-payment-text").html("Ежемесячно переводить "+n+" руб. на "+i.toLowerCase()+"<br><br><span>Ежемесячное пожертвование возможно только с банковской карты. По карты Maestro нельзя оформить регулярный платеж.</span>"),!1)}),$(".button-pay-monthly").on("click",function(){var e=$(".donate-block-form"),n={};return n.type=e.find("[name=payment-type]:checked").val(),t(n,e),!1});var n=function(){var e=document.location.hash;if(e&&-1!=e.indexOf("donate-")){var t=1*e.replace("#donate-","");$("[name=donate-project]").val(t),$("html, body").animate({scrollTop:$("#donate").offset().top+20},500)}};n(),$(window).on("hashchange",function(){n()})}),function(e){e.fn.toggler=function(){return this.each(function(){e(this).on("click",function(t){var n=e(this).data("toggle")||e(this).attr("href"),i=e(this).data("toggle-class")||"active",o=e(this).data("toggle-group"),r=e(this).is("[data-toggle-self-deactive]");return console.log(n,i,o),e('[data-toggle-group="'+o+'"]').not(this).each(function(){var t=e(this).data("toggle")||e(this).attr("href"),n=e(this).data("toggle-class")||"active";e(t).removeClass(n),e(this).removeClass(n)}),e(this).hasClass(i)&&r?(e(this).removeClass(i),e(n).removeClass(i)):(e(this).addClass(i),e(n).addClass(i)),!1})}),this}}(jQuery),$(document).ready(function(){$("[data-toggle]").toggler(),$("[data-masked-input]").maskedinput(),tippy("[data-tooltip]",{theme:"light"})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
